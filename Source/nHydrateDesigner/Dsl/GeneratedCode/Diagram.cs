//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
using DslDiagrams = global::Microsoft.VisualStudio.Modeling.Diagrams;

[module: global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Scope = "type", Target = "nHydrate2.Dsl.nHydrateDiagram")]

namespace nHydrate2.Dsl
{
	/// <summary>
	/// Double-derived base class for DomainClass nHydrateDiagram
	/// </summary>
	[DslDesign::DisplayNameResource("nHydrate2.Dsl.nHydrateDiagram.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("nHydrate2.Dsl.nHydrateDiagram.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::nHydrate2.Dsl.nHydrate2DomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("baed03c1-2130-477d-ba88-9e9cb86956de")]
	public abstract partial class nHydrateDiagramBase : DslDiagrams::Diagram, System.ComponentModel.INotifyPropertyChanged
	{
		
		public event System.EventHandler<DslModeling::ElementAddedEventArgs> ElementAdded;
		public event System.EventHandler<DslModeling::ElementDeletedEventArgs> ElementDeleted;
		public event System.EventHandler<DslModeling::ElementPropertyChangedEventArgs> ElementPropertyChanged;
		
		protected virtual void OnElementAdded(DslModeling::ElementAddedEventArgs e)
		{
			if (this.ElementAdded != null)
				this.ElementAdded(this, e);
		}
		
		protected virtual void OnElementDeleted(DslModeling::ElementDeletedEventArgs e)
		{
			if (this.ElementDeleted != null)
				this.ElementDeleted(this, e);
		}
		
		protected virtual void OnElementPropertyChanged(DslModeling::ElementPropertyChangedEventArgs e)
		{
			if (this.ElementPropertyChanged != null)
				this.ElementPropertyChanged(this, e);
		}
		
		#region Diagram boilerplate
		private static DslDiagrams::StyleSet classStyleSet;
		private static global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields;
		/// <summary>
		/// Per-class style set for this shape.
		/// </summary>
		protected override DslDiagrams::StyleSet ClassStyleSet
		{
			get
			{
				if (classStyleSet == null)
				{
					classStyleSet = CreateClassStyleSet();
				}
				return classStyleSet;
			}
		}
		
		/// <summary>
		/// Per-class ShapeFields for this shape
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::ShapeField> ShapeFields
		{
			get
			{
				if (shapeFields == null)
				{
					shapeFields = CreateShapeFields();
				}
				return shapeFields;
			}
		}
		#endregion
		#region Toolbox filters
		private static global::System.ComponentModel.ToolboxItemFilterAttribute[] toolboxFilters = new global::System.ComponentModel.ToolboxItemFilterAttribute[] {
					new global::System.ComponentModel.ToolboxItemFilterAttribute(global::nHydrate2.Dsl.nHydrate2ToolboxHelperBase.ToolboxFilterString, global::System.ComponentModel.ToolboxItemFilterType.Require) };
		
		/// <summary>
		/// Toolbox item filter attributes for this diagram.
		/// </summary>
		public override global::System.Collections.ICollection TargetToolboxItemFilterAttributes
		{
			get
			{
				return toolboxFilters;
			}
		}
		#endregion
		#region Diagram styles
		/// <summary>
		/// Initializes style set resources for this shape type
		/// </summary>
		/// <param name="classStyleSet">The style set for this shape class</param>
		protected override void InitializeResources(DslDiagrams::StyleSet classStyleSet)
		{
			base.InitializeResources(classStyleSet);
			
			// Fill brush settings for this shape.
			DslDiagrams::BrushSettings backgroundBrush = new DslDiagrams::BrushSettings();
			backgroundBrush.Color = global::System.Drawing.Color.FromArgb(0, 0, 0, 0);
			classStyleSet.OverrideBrush(DslDiagrams::DiagramBrushes.DiagramBackground, backgroundBrush);
		
		}
		#endregion
		#region Auto-placement
		/// <summary>
		/// Indicate that child shapes should added through view fixup should be placed automatically.
		/// </summary>
		public override bool ShouldAutoPlaceChildShapes
		{
			get
			{
				return true;
			}
		}
		#endregion
		#region Compartment support
		/// <summary>
		/// Whether compartment items change events are subscribed to.
		/// </summary>
		private bool subscribedCompartmentItemsEvents;
		
		/// <summary>
		/// Subscribe to events fired when compartment items changes.
		/// </summary>
		public void SubscribeCompartmentItemsEvents()
		{
			if (!subscribedCompartmentItemsEvents && this.Store != null)
			{
				subscribedCompartmentItemsEvents = true;
				this.Store.EventManagerDirectory.ElementAdded.Add(new global::System.EventHandler<DslModeling::ElementAddedEventArgs>(this.CompartmentItemAdded));
				this.Store.EventManagerDirectory.ElementDeleted.Add(new global::System.EventHandler<DslModeling::ElementDeletedEventArgs>(this.CompartmentItemDeleted));
				this.Store.EventManagerDirectory.ElementPropertyChanged.Add(new global::System.EventHandler<DslModeling::ElementPropertyChangedEventArgs>(this.CompartmentItemPropertyChanged));
				this.Store.EventManagerDirectory.RolePlayerChanged.Add(new global::System.EventHandler<DslModeling::RolePlayerChangedEventArgs>(this.CompartmentItemRolePlayerChanged));
				this.Store.EventManagerDirectory.RolePlayerOrderChanged.Add(new global::System.EventHandler<DslModeling::RolePlayerOrderChangedEventArgs>(this.CompartmentItemRolePlayerOrderChanged));
			}
		}
		
		/// <summary>
		/// Unsubscribe to events fired when compartment items changes.
		/// </summary>
		public void UnsubscribeCompartmentItemsEvents()
		{
			if (subscribedCompartmentItemsEvents)
			{
				this.Store.EventManagerDirectory.ElementAdded.Remove(new global::System.EventHandler<DslModeling::ElementAddedEventArgs>(this.CompartmentItemAdded));
				this.Store.EventManagerDirectory.ElementDeleted.Remove(new global::System.EventHandler<DslModeling::ElementDeletedEventArgs>(this.CompartmentItemDeleted));
				this.Store.EventManagerDirectory.ElementPropertyChanged.Remove(new global::System.EventHandler<DslModeling::ElementPropertyChangedEventArgs>(this.CompartmentItemPropertyChanged));
				this.Store.EventManagerDirectory.RolePlayerChanged.Remove(new global::System.EventHandler<DslModeling::RolePlayerChangedEventArgs>(this.CompartmentItemRolePlayerChanged));
				this.Store.EventManagerDirectory.RolePlayerOrderChanged.Remove(new global::System.EventHandler<DslModeling::RolePlayerOrderChangedEventArgs>(this.CompartmentItemRolePlayerOrderChanged));
				subscribedCompartmentItemsEvents = false;
			}
		}
		
		#region Event handlers
		/// <summary>
		/// Event for element added.
		/// </summary>
		private void CompartmentItemAdded(object sender, DslModeling::ElementAddedEventArgs e)
		{
			// If in Undo, Redo or Rollback the compartment item rules are not run so we must refresh the compartment list at this point if required
			bool repaintOnly = !e.ModelElement.Store.InUndoRedoOrRollback;
			CompartmentItemAddRule.ElementAdded(e, repaintOnly);
			this.OnElementAdded(e);
		}
		/// <summary>
		/// Event for element deleted.
		/// </summary>
		private void CompartmentItemDeleted(object sender, DslModeling::ElementDeletedEventArgs e)
		{
			bool repaintOnly = !e.ModelElement.Store.InUndoRedoOrRollback;
			CompartmentItemDeleteRule.ElementDeleted(e, repaintOnly);
			this.OnElementDeleted(e);
		}
		/// <summary>
		/// Event for element property changed.
		/// </summary>
		private void CompartmentItemPropertyChanged(object sender, DslModeling::ElementPropertyChangedEventArgs e)
		{
			bool repaintOnly = !e.ModelElement.Store.InUndoRedoOrRollback;
			CompartmentItemChangeRule.ElementPropertyChanged(e, repaintOnly);
			this.OnElementPropertyChanged(e);
		}
		/// <summary>
		/// Event for role-player changed.
		/// </summary>
		private void CompartmentItemRolePlayerChanged(object sender, DslModeling::RolePlayerChangedEventArgs e)
		{
			bool repaintOnly = !e.ElementLink.Store.InUndoRedoOrRollback;
			CompartmentItemRolePlayerChangeRule.RolePlayerChanged(e, repaintOnly);
		}
		/// <summary>
		/// Event for role-player order changed.
		/// </summary>
		private void CompartmentItemRolePlayerOrderChanged(object sender, DslModeling::RolePlayerOrderChangedEventArgs e)
		{
			bool repaintOnly = !e.Link.Store.InUndoRedoOrRollback;
			CompartmentItemRolePlayerPositionChangeRule.RolePlayerPositionChanged(e, repaintOnly);
		}
		#endregion
		#endregion
		#region Shape mapping
		/// <summary>
		/// Called during view fixup to ask the parent whether a shape should be created for the given child element.
		/// </summary>
		/// <remarks>
		/// Always return true, since we assume there is only one diagram per model file for DSL scenarios.
		/// </remarks>
		protected override bool ShouldAddShapeForElement(DslModeling::ModelElement element)
		{
			return true;
		}
		
		/// <summary>
		/// Called during view fixup to configure the given child element, after it has been created.
		/// </summary>
		/// <remarks>
		/// Custom code for choosing the shapes attached to either end of a connector is called from here.
		/// </remarks>
		protected override void OnChildConfiguring(DslDiagrams::ShapeElement child, bool createdDuringViewFixup)
		{
			DslDiagrams::NodeShape sourceShape;
			DslDiagrams::NodeShape targetShape;
			DslDiagrams::BinaryLinkShape connector = child as DslDiagrams::BinaryLinkShape;
			if(connector == null)
			{
				base.OnChildConfiguring(child, createdDuringViewFixup);
				return;
			}
			this.GetSourceAndTargetForConnector(connector, out sourceShape, out targetShape);
			
			global::System.Diagnostics.Debug.Assert(sourceShape != null && targetShape != null, "Unable to find source and target shapes for connector.");
			connector.Connect(sourceShape, targetShape);
		}
		
		/// <summary>
		/// helper method to find the shapes for either end of a connector, including calling the user's custom code
		/// </summary>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		internal void GetSourceAndTargetForConnector(DslDiagrams::BinaryLinkShape connector, out DslDiagrams::NodeShape sourceShape, out DslDiagrams::NodeShape targetShape)
		{
			sourceShape = null;
			targetShape = null;
			
			if (sourceShape == null || targetShape == null)
			{
				DslDiagrams::NodeShape[] endShapes = GetEndShapesForConnector(connector);
				if(sourceShape == null)
				{
					sourceShape = endShapes[0];
				}
				if(targetShape == null)
				{
					targetShape = endShapes[1];
				}
			}
		}
		
		/// <summary>
		/// Helper method to find shapes for either end of a connector by looking for shapes associated with either end of the relationship mapped to the connector.
		/// </summary>
		private DslDiagrams::NodeShape[] GetEndShapesForConnector(DslDiagrams::BinaryLinkShape connector)
		{
			DslModeling::ElementLink link = connector.ModelElement as DslModeling::ElementLink;
			DslDiagrams::NodeShape sourceShape = null, targetShape = null;
			if (link != null)
			{
				global::System.Collections.ObjectModel.ReadOnlyCollection<DslModeling::ModelElement> linkedElements = link.LinkedElements;
				if (linkedElements.Count == 2)
				{
					DslDiagrams::Diagram currentDiagram = this.Diagram;
					DslModeling::LinkedElementCollection<DslDiagrams::PresentationElement> presentationElements = DslDiagrams::PresentationViewsSubject.GetPresentation(linkedElements[0]);
					foreach (DslDiagrams::PresentationElement presentationElement in presentationElements)
					{
						DslDiagrams::NodeShape shape = presentationElement as DslDiagrams::NodeShape;
						if (shape != null && shape.Diagram == currentDiagram)
						{
							sourceShape = shape;
							break;
						}
					}
					
					presentationElements = DslDiagrams::PresentationViewsSubject.GetPresentation(linkedElements[1]);
					foreach (DslDiagrams::PresentationElement presentationElement in presentationElements)
					{
						DslDiagrams::NodeShape shape = presentationElement as DslDiagrams::NodeShape;
						if (shape != null && shape.Diagram == currentDiagram)
						{
							targetShape = shape;
							break;
						}
					}
		
				}
			}
			
			return new DslDiagrams::NodeShape[] { sourceShape, targetShape };
		}
		
		/// <summary>
		/// Creates a new shape for the given model element as part of view fixup
		/// </summary>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily", Justification = "Generated code.")]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Justification = "Generated code.")]
		protected override DslDiagrams::ShapeElement CreateChildShape(DslModeling::ModelElement element)
		{
			if(element is global::nHydrate2.Dsl.Entity)
			{
				global::nHydrate2.Dsl.EntityShape newShape = new global::nHydrate2.Dsl.EntityShape(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::nHydrate2.Dsl.Composite)
			{
				global::nHydrate2.Dsl.EntityCompositeShape newShape = new global::nHydrate2.Dsl.EntityCompositeShape(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::nHydrate2.Dsl.View)
			{
				global::nHydrate2.Dsl.ViewShape newShape = new global::nHydrate2.Dsl.ViewShape(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::nHydrate2.Dsl.StoredProcedure)
			{
				global::nHydrate2.Dsl.StoredProcedureShape newShape = new global::nHydrate2.Dsl.StoredProcedureShape(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::nHydrate2.Dsl.Function)
			{
				global::nHydrate2.Dsl.FunctionShape newShape = new global::nHydrate2.Dsl.FunctionShape(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::nHydrate2.Dsl.EntityHasEntities)
			{
				global::nHydrate2.Dsl.EntityAssociationConnector newShape = new global::nHydrate2.Dsl.EntityAssociationConnector(this.Partition);
				return newShape;
			}
			if(element is global::nHydrate2.Dsl.EntityInheritsEntity)
			{
				global::nHydrate2.Dsl.EntityInheritanceConnector newShape = new global::nHydrate2.Dsl.EntityInheritanceConnector(this.Partition);
				return newShape;
			}
			if(element is global::nHydrate2.Dsl.EntityHasComposites)
			{
				global::nHydrate2.Dsl.EntityCompositeConnector newShape = new global::nHydrate2.Dsl.EntityCompositeConnector(this.Partition);
				return newShape;
			}
			if(element is global::nHydrate2.Dsl.EntityHasViews)
			{
				global::nHydrate2.Dsl.EntityViewAssociationConnector newShape = new global::nHydrate2.Dsl.EntityViewAssociationConnector(this.Partition);
				return newShape;
			}
			return base.CreateChildShape(element);
		}
		#endregion
		#region Decorator mapping
		/// <summary>
		/// Initialize shape decorator mappings.  This is done here rather than in individual shapes because decorator maps
		/// are defined per diagram type rather than per shape type.
		/// </summary>
		protected override void InitializeShapeFields(global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields)
		{
			base.InitializeShapeFields(shapeFields);
			global::nHydrate2.Dsl.EntityShape.DecoratorsInitialized += EntityShapeDecoratorMap.OnDecoratorsInitialized;
			global::nHydrate2.Dsl.EntityCompositeShape.DecoratorsInitialized += EntityCompositeShapeDecoratorMap.OnDecoratorsInitialized;
			global::nHydrate2.Dsl.ViewShape.DecoratorsInitialized += ViewShapeDecoratorMap.OnDecoratorsInitialized;
			global::nHydrate2.Dsl.StoredProcedureShape.DecoratorsInitialized += StoredProcedureShapeDecoratorMap.OnDecoratorsInitialized;
			global::nHydrate2.Dsl.FunctionShape.DecoratorsInitialized += FunctionShapeDecoratorMap.OnDecoratorsInitialized;
			global::nHydrate2.Dsl.EntityAssociationConnector.DecoratorsInitialized += EntityAssociationConnectorDecoratorMap.OnDecoratorsInitialized;
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for EntityShape.
		/// </summary>
		internal static partial class EntityShapeDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for EntityShape.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::nHydrate2.Dsl.Entity.NameDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "EntityTextDecorator").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for EntityCompositeShape.
		/// </summary>
		internal static partial class EntityCompositeShapeDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for EntityCompositeShape.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::nHydrate2.Dsl.Composite.NameDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "EntityCompositeShapeTextDecorator").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for ViewShape.
		/// </summary>
		internal static partial class ViewShapeDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for ViewShape.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::nHydrate2.Dsl.View.NameDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "ViewTextDecorator").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for StoredProcedureShape.
		/// </summary>
		internal static partial class StoredProcedureShapeDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for StoredProcedureShape.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::nHydrate2.Dsl.StoredProcedure.NameDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "StoredProcedureTextDecorator").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for FunctionShape.
		/// </summary>
		internal static partial class FunctionShapeDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for FunctionShape.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::nHydrate2.Dsl.Function.NameDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "FunctionTextDecorator").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for EntityAssociationConnector.
		/// </summary>
		internal static partial class EntityAssociationConnectorDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for EntityAssociationConnector.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::nHydrate2.Dsl.Entity.NameDomainPropertyId);
				propertyInfo.PresentationDomainNavigator = new DslDiagrams::PresentationDomainNavigator(SourceEntityRelationTextDecoratorPresentationToDomain);
				propertyInfo.DomainPresentationNavigator = new DslDiagrams::DomainPresentationNavigator(SourceEntityRelationTextDecoratorDomainToPresentation);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "SourceEntityRelationTextDecorator").AssociateValueWith(shape.Store, propertyInfo);
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::nHydrate2.Dsl.Entity.NameDomainPropertyId);
				propertyInfo.PresentationDomainNavigator = new DslDiagrams::PresentationDomainNavigator(DestEntityRelationTextDecoratorPresentationToDomain);
				propertyInfo.DomainPresentationNavigator = new DslDiagrams::DomainPresentationNavigator(DestEntityRelationTextDecoratorDomainToPresentation);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "DestEntityRelationTextDecorator").AssociateValueWith(shape.Store, propertyInfo);
			}
			public static DslModeling::ModelElement SourceEntityRelationTextDecoratorPresentationToDomain(DslDiagrams::PresentationElement presentation)
			{
				global::nHydrate2.Dsl.EntityHasEntities modelElement = presentation.ModelElement as global::nHydrate2.Dsl.EntityHasEntities;
				if(modelElement != null)
				{
					// Segment 0
					global::nHydrate2.Dsl.Entity mappedElement = modelElement.ChildEntity;
					if ( mappedElement == null ) return null;
					return mappedElement;
				}
				return null;
			}
			public static global::System.Collections.Generic.ICollection<DslDiagrams::PresentationElement> SourceEntityRelationTextDecoratorDomainToPresentation(DslModeling::ModelElement modelElement)
			{
				global::nHydrate2.Dsl.Entity typedElement = modelElement as global::nHydrate2.Dsl.Entity;
				if(typedElement != null)
				{
					if(typedElement.IsDeleted)
					{
						// We cannot navigate back along a path containing deleted elements, best we can do is return the diagram
						// to ensure all visible shapes are invalidated.
						global::System.Collections.ObjectModel.ReadOnlyCollection<global::nHydrate2.Dsl.nHydrateDiagram> diagramCollection = modelElement.Store.ElementDirectory.FindElements<global::nHydrate2.Dsl.nHydrateDiagram>(true);
						global::nHydrate2.Dsl.nHydrateDiagram[] diagramArray = new global::nHydrate2.Dsl.nHydrateDiagram[diagramCollection.Count];
						diagramCollection.CopyTo(diagramArray, 0);
						return diagramArray;
					}
					// Segment 0
						global::System.Collections.ObjectModel.ReadOnlyCollection<global::nHydrate2.Dsl.EntityHasEntities> mappedElements = global::nHydrate2.Dsl.EntityHasEntities.GetLinksToParentEntity(typedElement);
					global::System.Collections.Generic.List<DslDiagrams::PresentationElement> presentationList = new global::System.Collections.Generic.List<DslDiagrams::PresentationElement>();
					foreach(DslModeling::ModelElement mappedElement in mappedElements)
					{
						presentationList.AddRange(DslDiagrams::PresentationViewsSubject.GetPresentation(mappedElement));
					}
					return presentationList;
				}
				return null;
			}
			public static DslModeling::ModelElement DestEntityRelationTextDecoratorPresentationToDomain(DslDiagrams::PresentationElement presentation)
			{
				global::nHydrate2.Dsl.EntityHasEntities modelElement = presentation.ModelElement as global::nHydrate2.Dsl.EntityHasEntities;
				if(modelElement != null)
				{
					// Segment 0
					global::nHydrate2.Dsl.Entity mappedElement = modelElement.ParentEntity;
					if ( mappedElement == null ) return null;
					return mappedElement;
				}
				return null;
			}
			public static global::System.Collections.Generic.ICollection<DslDiagrams::PresentationElement> DestEntityRelationTextDecoratorDomainToPresentation(DslModeling::ModelElement modelElement)
			{
				global::nHydrate2.Dsl.Entity typedElement = modelElement as global::nHydrate2.Dsl.Entity;
				if(typedElement != null)
				{
					if(typedElement.IsDeleted)
					{
						// We cannot navigate back along a path containing deleted elements, best we can do is return the diagram
						// to ensure all visible shapes are invalidated.
						global::System.Collections.ObjectModel.ReadOnlyCollection<global::nHydrate2.Dsl.nHydrateDiagram> diagramCollection = modelElement.Store.ElementDirectory.FindElements<global::nHydrate2.Dsl.nHydrateDiagram>(true);
						global::nHydrate2.Dsl.nHydrateDiagram[] diagramArray = new global::nHydrate2.Dsl.nHydrateDiagram[diagramCollection.Count];
						diagramCollection.CopyTo(diagramArray, 0);
						return diagramArray;
					}
					// Segment 0
						global::System.Collections.ObjectModel.ReadOnlyCollection<global::nHydrate2.Dsl.EntityHasEntities> mappedElements = global::nHydrate2.Dsl.EntityHasEntities.GetLinksToChildEntities(typedElement);
					global::System.Collections.Generic.List<DslDiagrams::PresentationElement> presentationList = new global::System.Collections.Generic.List<DslDiagrams::PresentationElement>();
					foreach(DslModeling::ModelElement mappedElement in mappedElements)
					{
						presentationList.AddRange(DslDiagrams::PresentationViewsSubject.GetPresentation(mappedElement));
					}
					return presentationList;
				}
				return null;
			}
		}
		
		#endregion
		
		#region Connect actions
		private bool changingMouseAction;
		private global::nHydrate2.Dsl.AssociationConnectAction associationConnectAction;
		private global::nHydrate2.Dsl.InheritanceConnectAction inheritanceConnectAction;
		private global::nHydrate2.Dsl.ViewLinkConnectAction viewLinkConnectAction;
		/// <summary>
		/// Virtual method to provide a filter when to select the mouse action
		/// </summary>
		/// <param name="activeView">Currently active view</param>
		/// <param name="filter">filter string used to filter the toolbox items</param>
		protected virtual bool SelectedToolboxItemSupportsFilterString(DslDiagrams::DiagramView activeView, string filter)
		{
			return activeView.SelectedToolboxItemSupportsFilterString(filter);
		}
		/// <summary>
		/// Override to provide the right mouse action when trying
		/// to create links on the diagram
		/// </summary>
		/// <param name="pointArgs"></param>
		public override void OnViewMouseEnter(DslDiagrams::DiagramPointEventArgs pointArgs)
		{
			if (pointArgs  == null) throw new global::System.ArgumentNullException("pointArgs");
		
			DslDiagrams::DiagramView activeView = this.ActiveDiagramView;
			if(activeView != null)
			{
				DslDiagrams::MouseAction action = null;
				if (SelectedToolboxItemSupportsFilterString(activeView, global::nHydrate2.Dsl.nHydrate2ToolboxHelper.AssociationFilterString))
				{
					if (this.associationConnectAction == null)
					{
						this.associationConnectAction = new global::nHydrate2.Dsl.AssociationConnectAction(this);
						this.associationConnectAction.MouseActionDeactivated += new DslDiagrams::MouseAction.MouseActionDeactivatedEventHandler(OnConnectActionDeactivated);
					}
					action = this.associationConnectAction;
				} 
				else if (SelectedToolboxItemSupportsFilterString(activeView, global::nHydrate2.Dsl.nHydrate2ToolboxHelper.InheritanceFilterString))
				{
					if (this.inheritanceConnectAction == null)
					{
						this.inheritanceConnectAction = new global::nHydrate2.Dsl.InheritanceConnectAction(this);
						this.inheritanceConnectAction.MouseActionDeactivated += new DslDiagrams::MouseAction.MouseActionDeactivatedEventHandler(OnConnectActionDeactivated);
					}
					action = this.inheritanceConnectAction;
				} 
				else if (SelectedToolboxItemSupportsFilterString(activeView, global::nHydrate2.Dsl.nHydrate2ToolboxHelper.ViewLinkFilterString))
				{
					if (this.viewLinkConnectAction == null)
					{
						this.viewLinkConnectAction = new global::nHydrate2.Dsl.ViewLinkConnectAction(this);
						this.viewLinkConnectAction.MouseActionDeactivated += new DslDiagrams::MouseAction.MouseActionDeactivatedEventHandler(OnConnectActionDeactivated);
					}
					action = this.viewLinkConnectAction;
				} 
				else
				{
					action = null;
				}
				
				if (pointArgs.DiagramClientView.ActiveMouseAction != action)
				{
					try
					{
						this.changingMouseAction = true;
						pointArgs.DiagramClientView.ActiveMouseAction = action;
					}
					finally
					{
						this.changingMouseAction = false;
					}
				}
			}
		}
		
		/// <summary>
		/// Snap toolbox selection back to regular pointer after using a custom connect action.
		/// </summary>
		private void OnConnectActionDeactivated(object sender, DslDiagrams::DiagramEventArgs e)
		{
			OnMouseActionDeactivated();
		}
		
		/// <summary>
		/// Overridable method to manage the mouse deactivation. The default implementation snap stoolbox selection back to regular pointer 
		/// after using a custom connect action.
		/// </summary>
		protected virtual void OnMouseActionDeactivated()
		{
			DslDiagrams::DiagramView activeView = this.ActiveDiagramView;
		
			if (activeView != null && activeView.Toolbox != null)
			{
				// If we're not changing mouse action due to changing toolbox selection change,
				// reset toolbox selection.
				if (!this.changingMouseAction)
				{
					activeView.Toolbox.SelectedToolboxItemUsed();
				}
			}
		}
		#endregion
		
		/// <summary>
		/// Dispose of connect actions.
		/// </summary>
		protected override void Dispose(bool disposing)
		{
			try
			{
				if(disposing)
				{
					if(this.associationConnectAction != null)
					{
						this.associationConnectAction.Dispose();
						this.associationConnectAction = null;
					}
					if(this.inheritanceConnectAction != null)
					{
						this.inheritanceConnectAction.Dispose();
						this.inheritanceConnectAction = null;
					}
					if(this.viewLinkConnectAction != null)
					{
						this.viewLinkConnectAction.Dispose();
						this.viewLinkConnectAction = null;
					}
					this.UnsubscribeCompartmentItemsEvents();
				}
			}
			finally
			{
				base.Dispose(disposing);
			}
		}
		#region INotifyPropertyChanged
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs e)
		{
			if (this.PropertyChanged != null)
				this.PropertyChanged(this, e);
		}
		#endregion
	
		#region Constructors, domain class Id
	
		/// <summary>
		/// nHydrateDiagram domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xbaed03c1, 0x2130, 0x477d, 0xba, 0x88, 0x9e, 0x9c, 0xb8, 0x69, 0x56, 0xde);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected nHydrateDiagramBase(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region DisplayType domain property code
		
		/// <summary>
		/// DisplayType domain property Id.
		/// </summary>
		public static readonly global::System.Guid DisplayTypeDomainPropertyId = new global::System.Guid(0x292cd8ce, 0xc52a, 0x49d8, 0x8c, 0xbc, 0xe3, 0xc3, 0xb2, 0x9d, 0x8f, 0x51);
		
		/// <summary>
		/// Storage for DisplayType
		/// </summary>
		private global::System.Boolean displayTypePropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of DisplayType domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.nHydrateDiagram/DisplayType.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.nHydrateDiagram/DisplayType.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("292cd8ce-c52a-49d8-8cbc-e3c3b29d8f51")]
		public virtual global::System.Boolean DisplayType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return displayTypePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DisplayTypePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the nHydrateDiagram.DisplayType domain property.
		/// </summary>
		internal sealed partial class DisplayTypePropertyHandler : DslModeling::DomainPropertyValueHandler<nHydrateDiagramBase, global::System.Boolean>
		{
			private DisplayTypePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the nHydrateDiagram.DisplayType domain property value handler.
			/// </summary>
			public static readonly DisplayTypePropertyHandler Instance = new DisplayTypePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the nHydrateDiagram.DisplayType domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DisplayTypeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(nHydrateDiagramBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.DisplayType;
				//return element.GetValue<global::System.Boolean>("DisplayType", element.displayTypePropertyStorage);
				//return element.displayTypePropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(nHydrateDiagramBase element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.displayTypePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("nHydrateDiagram"));
				}
			}
		}
		
		#endregion
	}
	/// <summary>
	/// DomainClass nHydrateDiagram
	/// </summary>
	[global::System.CLSCompliant(true)]
			
	public partial class nHydrateDiagram : nHydrateDiagramBase
	{
		#region Constructors
		// Constructors were not generated for this class because it had HasCustomConstructor
		// set to true. Please provide the constructors below in a partial class.
		///// <summary>
		///// Constructor
		///// </summary>
		///// <param name="store">Store where new element is to be created.</param>
		///// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		//public nHydrateDiagram(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
		//	: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		//{
		//}
		//
		///// <summary>
		///// Constructor
		///// </summary>
		///// <param name="partition">Partition where new element is to be created.</param>
		///// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		//public nHydrateDiagram(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
		//	: base(partition, propertyAssignments)
		//{
		//}
		#endregion
	}
}
namespace nHydrate2.Dsl
{
	
		/// <summary>
		/// Double derived implementation for the rule that initiates view fixup when an element that has an associated shape is added to the model.
		/// This now enables the DSL author to everride the SkipFixUp() method 
		/// </summary>
		internal partial class FixUpDiagramBase : DslModeling::AddRule
		{
			protected virtual bool SkipFixup(DslModeling::ModelElement childElement)
			{
				return childElement.IsDeleted;
			}
		}
	
		/// <summary>
		/// Rule that initiates view fixup when an element that has an associated shape is added to the model. 
		/// </summary>
		[DslModeling::RuleOn(typeof(global::nHydrate2.Dsl.EntityInheritsEntity), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::nHydrate2.Dsl.EntityHasEntities), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::nHydrate2.Dsl.EntityHasViews), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::nHydrate2.Dsl.EntityHasComposites), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::nHydrate2.Dsl.Function), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::nHydrate2.Dsl.Composite), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::nHydrate2.Dsl.Entity), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::nHydrate2.Dsl.StoredProcedure), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::nHydrate2.Dsl.View), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		internal sealed partial class FixUpDiagram : FixUpDiagramBase
		{
			[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
			public override void ElementAdded(DslModeling::ElementAddedEventArgs e)
			{
				if(e == null) throw new global::System.ArgumentNullException("e");
			
				DslModeling::ModelElement childElement = e.ModelElement;
				if (this.SkipFixup(childElement))
					return;
				DslModeling::ModelElement parentElement;
				if(childElement is DslModeling::ElementLink)
				{
					parentElement = GetParentForRelationship((DslModeling::ElementLink)childElement);
				} else
				if(childElement is global::nHydrate2.Dsl.Function)
				{
					parentElement = GetParentForFunction((global::nHydrate2.Dsl.Function)childElement);
				} else
				if(childElement is global::nHydrate2.Dsl.Composite)
				{
					parentElement = GetParentForComposite((global::nHydrate2.Dsl.Composite)childElement);
				} else
				if(childElement is global::nHydrate2.Dsl.Entity)
				{
					parentElement = GetParentForEntity((global::nHydrate2.Dsl.Entity)childElement);
				} else
				if(childElement is global::nHydrate2.Dsl.StoredProcedure)
				{
					parentElement = GetParentForStoredProcedure((global::nHydrate2.Dsl.StoredProcedure)childElement);
				} else
				if(childElement is global::nHydrate2.Dsl.View)
				{
					parentElement = GetParentForView((global::nHydrate2.Dsl.View)childElement);
				} else
				{
					parentElement = null;
				}
				
				if(parentElement != null)
				{
					DslDiagrams::Diagram.FixUpDiagram(parentElement, childElement);
				}
			}
			public static global::nHydrate2.Dsl.nHydrateModel GetParentForEntity( global::nHydrate2.Dsl.Entity root )
			{
				// Segments 0 and 1
				global::nHydrate2.Dsl.nHydrateModel result = root.nHydrateModel;
				if ( result == null ) return null;
				return result;
			}
			public static global::nHydrate2.Dsl.nHydrateModel GetParentForComposite( global::nHydrate2.Dsl.Composite root )
			{
				// Segments 0 and 1
				global::nHydrate2.Dsl.Entity root2 = root.Entity;
				if ( root2 == null ) return null;
				// Segments 2 and 3
				global::nHydrate2.Dsl.nHydrateModel result = root2.nHydrateModel;
				if ( result == null ) return null;
				return result;
			}
			public static global::nHydrate2.Dsl.nHydrateModel GetParentForView( global::nHydrate2.Dsl.View root )
			{
				// Segments 0 and 1
				global::nHydrate2.Dsl.nHydrateModel result = root.nHydrateModel;
				if ( result == null ) return null;
				return result;
			}
			public static global::nHydrate2.Dsl.nHydrateModel GetParentForStoredProcedure( global::nHydrate2.Dsl.StoredProcedure root )
			{
				// Segments 0 and 1
				global::nHydrate2.Dsl.nHydrateModel result = root.nHydrateModel;
				if ( result == null ) return null;
				return result;
			}
			public static global::nHydrate2.Dsl.nHydrateModel GetParentForFunction( global::nHydrate2.Dsl.Function root )
			{
				// Segments 0 and 1
				global::nHydrate2.Dsl.nHydrateModel result = root.nHydrateModel;
				if ( result == null ) return null;
				return result;
			}
			private static DslModeling::ModelElement GetParentForRelationship(DslModeling::ElementLink elementLink)
			{
				global::System.Collections.ObjectModel.ReadOnlyCollection<DslModeling::ModelElement> linkedElements = elementLink.LinkedElements;
	
				if (linkedElements.Count == 2)
				{
					DslDiagrams::ShapeElement sourceShape = linkedElements[0] as DslDiagrams::ShapeElement;
					DslDiagrams::ShapeElement targetShape = linkedElements[1] as DslDiagrams::ShapeElement;
	
					if(sourceShape == null)
					{
						DslModeling::LinkedElementCollection<DslDiagrams::PresentationElement> presentationElements = DslDiagrams::PresentationViewsSubject.GetPresentation(linkedElements[0]);
						foreach (DslDiagrams::PresentationElement presentationElement in presentationElements)
						{
							DslDiagrams::ShapeElement shape = presentationElement as DslDiagrams::ShapeElement;
							if (shape != null)
							{
								sourceShape = shape;
								break;
							}
						}
					}
					
					if(targetShape == null)
					{
						DslModeling::LinkedElementCollection<DslDiagrams::PresentationElement> presentationElements = DslDiagrams::PresentationViewsSubject.GetPresentation(linkedElements[1]);
						foreach (DslDiagrams::PresentationElement presentationElement in presentationElements)
						{
							DslDiagrams::ShapeElement shape = presentationElement as DslDiagrams::ShapeElement;
							if (shape != null)
							{
								targetShape = shape;
								break;
							}
						}
					}
					
					if(sourceShape == null || targetShape == null)
					{
						global::System.Diagnostics.Debug.Fail("Unable to find source and/or target shape for view fixup.");
						return null;
					}
	
					DslDiagrams::ShapeElement sourceParent = sourceShape.ParentShape;
					DslDiagrams::ShapeElement targetParent = targetShape.ParentShape;
	
					while (sourceParent != targetParent && sourceParent != null)
					{
						DslDiagrams::ShapeElement curParent = targetParent;
						while (sourceParent != curParent && curParent != null)
						{
							curParent = curParent.ParentShape;
						}
	
						if(sourceParent == curParent)
						{
							break;
						}
						else
						{
							sourceParent = sourceParent.ParentShape;
						}
					}
	
					while (sourceParent != null)
					{
						// ensure that the parent can parent connectors (i.e., a diagram or a swimlane).
						if(sourceParent is DslDiagrams::Diagram || sourceParent is DslDiagrams::SwimlaneShape)
						{
							break;
						}
						else
						{
							sourceParent = sourceParent.ParentShape;
						}
					}
	
					global::System.Diagnostics.Debug.Assert(sourceParent != null && sourceParent.ModelElement != null, "Unable to find common parent for view fixup.");
					return sourceParent.ModelElement;
				}
	
				return null;
			}
		}
		
		/// <summary>
		/// Rule to update compartments when an item is added to the list
		/// </summary>
		[DslModeling::RuleOn(typeof(global::nHydrate2.Dsl.EntityHasFields), FireTime=DslModeling::TimeToFire.TopLevelCommit, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::nHydrate2.Dsl.ViewHasFields), FireTime=DslModeling::TimeToFire.TopLevelCommit, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::nHydrate2.Dsl.StoredProcedureHasFields), FireTime=DslModeling::TimeToFire.TopLevelCommit, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::nHydrate2.Dsl.StoredProcedureHasParameters), FireTime=DslModeling::TimeToFire.TopLevelCommit, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::nHydrate2.Dsl.FunctionHasFields), FireTime=DslModeling::TimeToFire.TopLevelCommit, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::nHydrate2.Dsl.FunctionHasParameters), FireTime=DslModeling::TimeToFire.TopLevelCommit, InitiallyDisabled=true)]
		internal sealed class CompartmentItemAddRule : DslModeling::AddRule
		{
			/// <summary>
			/// Called when an element is added. 
			/// </summary>
			/// <param name="e"></param>
			public override void ElementAdded(DslModeling::ElementAddedEventArgs e)
			{
				ElementAdded(e, false);
			}
	
			internal static void ElementAdded(DslModeling::ElementAddedEventArgs e, bool repaintOnly)
			{
				if(e==null) throw new global::System.ArgumentNullException("e");
				if (e.ModelElement.IsDeleted)
					return;
				if(e.ModelElement is global::nHydrate2.Dsl.EntityHasFields)
				{
					global::System.Collections.IEnumerable elements = GetEntityForEntityShapeEntityFieldCompartmentFromLastLink((global::nHydrate2.Dsl.EntityHasFields)e.ModelElement);
					UpdateCompartments(elements, typeof(global::nHydrate2.Dsl.EntityShape), "EntityFieldCompartment", repaintOnly);
				}
				if(e.ModelElement is global::nHydrate2.Dsl.ViewHasFields)
				{
					global::System.Collections.IEnumerable elements = GetViewForViewShapeViewFieldCompartmentFromLastLink((global::nHydrate2.Dsl.ViewHasFields)e.ModelElement);
					UpdateCompartments(elements, typeof(global::nHydrate2.Dsl.ViewShape), "ViewFieldCompartment", repaintOnly);
				}
				if(e.ModelElement is global::nHydrate2.Dsl.StoredProcedureHasFields)
				{
					global::System.Collections.IEnumerable elements = GetStoredProcedureForStoredProcedureShapeStoredProcedureFieldCompartmentFromLastLink((global::nHydrate2.Dsl.StoredProcedureHasFields)e.ModelElement);
					UpdateCompartments(elements, typeof(global::nHydrate2.Dsl.StoredProcedureShape), "StoredProcedureFieldCompartment", repaintOnly);
				}
				if(e.ModelElement is global::nHydrate2.Dsl.StoredProcedureHasParameters)
				{
					global::System.Collections.IEnumerable elements = GetStoredProcedureForStoredProcedureShapeStoredProcedureParameterCompartmentFromLastLink((global::nHydrate2.Dsl.StoredProcedureHasParameters)e.ModelElement);
					UpdateCompartments(elements, typeof(global::nHydrate2.Dsl.StoredProcedureShape), "StoredProcedureParameterCompartment", repaintOnly);
				}
				if(e.ModelElement is global::nHydrate2.Dsl.FunctionHasFields)
				{
					global::System.Collections.IEnumerable elements = GetFunctionForFunctionShapeFieldCompartmentFromLastLink((global::nHydrate2.Dsl.FunctionHasFields)e.ModelElement);
					UpdateCompartments(elements, typeof(global::nHydrate2.Dsl.FunctionShape), "FieldCompartment", repaintOnly);
				}
				if(e.ModelElement is global::nHydrate2.Dsl.FunctionHasParameters)
				{
					global::System.Collections.IEnumerable elements = GetFunctionForFunctionShapeParameterCompartmentFromLastLink((global::nHydrate2.Dsl.FunctionHasParameters)e.ModelElement);
					UpdateCompartments(elements, typeof(global::nHydrate2.Dsl.FunctionShape), "ParameterCompartment", repaintOnly);
				}
			}
			
			#region static DomainPath traversal methods to get the list of compartments to update
			internal static global::System.Collections.ICollection GetEntityForEntityShapeEntityFieldCompartmentFromLastLink(global::nHydrate2.Dsl.EntityHasFields root)
			{
				// Segment 0
				global::nHydrate2.Dsl.Entity result = root.Entity;
				if ( result == null ) return new DslModeling::ModelElement[0];
				return new DslModeling::ModelElement[] {result};
			}
			internal static global::System.Collections.ICollection GetEntityForEntityShapeEntityFieldCompartment(global::nHydrate2.Dsl.Field root)
			{
				// Segments 1 and 0
				global::nHydrate2.Dsl.Entity result = root.Entity;
				if ( result == null ) return new DslModeling::ModelElement[0];
				return new DslModeling::ModelElement[] {result};
			}
			internal static global::System.Collections.ICollection GetViewForViewShapeViewFieldCompartmentFromLastLink(global::nHydrate2.Dsl.ViewHasFields root)
			{
				// Segment 0
				global::nHydrate2.Dsl.View result = root.View;
				if ( result == null ) return new DslModeling::ModelElement[0];
				return new DslModeling::ModelElement[] {result};
			}
			internal static global::System.Collections.ICollection GetViewForViewShapeViewFieldCompartment(global::nHydrate2.Dsl.ViewField root)
			{
				// Segments 1 and 0
				global::nHydrate2.Dsl.View result = root.View;
				if ( result == null ) return new DslModeling::ModelElement[0];
				return new DslModeling::ModelElement[] {result};
			}
			internal static global::System.Collections.ICollection GetStoredProcedureForStoredProcedureShapeStoredProcedureFieldCompartmentFromLastLink(global::nHydrate2.Dsl.StoredProcedureHasFields root)
			{
				// Segment 0
				global::nHydrate2.Dsl.StoredProcedure result = root.StoredProcedure;
				if ( result == null ) return new DslModeling::ModelElement[0];
				return new DslModeling::ModelElement[] {result};
			}
			internal static global::System.Collections.ICollection GetStoredProcedureForStoredProcedureShapeStoredProcedureFieldCompartment(global::nHydrate2.Dsl.StoredProcedureField root)
			{
				// Segments 1 and 0
				global::nHydrate2.Dsl.StoredProcedure result = root.StoredProcedure;
				if ( result == null ) return new DslModeling::ModelElement[0];
				return new DslModeling::ModelElement[] {result};
			}
			internal static global::System.Collections.ICollection GetStoredProcedureForStoredProcedureShapeStoredProcedureParameterCompartmentFromLastLink(global::nHydrate2.Dsl.StoredProcedureHasParameters root)
			{
				// Segment 0
				global::nHydrate2.Dsl.StoredProcedure result = root.StoredProcedure;
				if ( result == null ) return new DslModeling::ModelElement[0];
				return new DslModeling::ModelElement[] {result};
			}
			internal static global::System.Collections.ICollection GetStoredProcedureForStoredProcedureShapeStoredProcedureParameterCompartment(global::nHydrate2.Dsl.StoredProcedureParameter root)
			{
				// Segments 1 and 0
				global::nHydrate2.Dsl.StoredProcedure result = root.StoredProcedure;
				if ( result == null ) return new DslModeling::ModelElement[0];
				return new DslModeling::ModelElement[] {result};
			}
			internal static global::System.Collections.ICollection GetFunctionForFunctionShapeFieldCompartmentFromLastLink(global::nHydrate2.Dsl.FunctionHasFields root)
			{
				// Segment 0
				global::nHydrate2.Dsl.Function result = root.Function;
				if ( result == null ) return new DslModeling::ModelElement[0];
				return new DslModeling::ModelElement[] {result};
			}
			internal static global::System.Collections.ICollection GetFunctionForFunctionShapeFieldCompartment(global::nHydrate2.Dsl.FunctionField root)
			{
				// Segments 1 and 0
				global::nHydrate2.Dsl.Function result = root.Function;
				if ( result == null ) return new DslModeling::ModelElement[0];
				return new DslModeling::ModelElement[] {result};
			}
			internal static global::System.Collections.ICollection GetFunctionForFunctionShapeParameterCompartmentFromLastLink(global::nHydrate2.Dsl.FunctionHasParameters root)
			{
				// Segment 0
				global::nHydrate2.Dsl.Function result = root.Function;
				if ( result == null ) return new DslModeling::ModelElement[0];
				return new DslModeling::ModelElement[] {result};
			}
			internal static global::System.Collections.ICollection GetFunctionForFunctionShapeParameterCompartment(global::nHydrate2.Dsl.FunctionParameter root)
			{
				// Segments 1 and 0
				global::nHydrate2.Dsl.Function result = root.Function;
				if ( result == null ) return new DslModeling::ModelElement[0];
				return new DslModeling::ModelElement[] {result};
			}
			#endregion
	
			#region helper method to update compartments 
			/// <summary>
			/// Updates the compartments for the shapes associated to the given list of model elements
			/// </summary>
			/// <param name="elements">List of model elements</param>
			/// <param name="shapeType">The type of shape that needs updating</param>
			/// <param name="compartmentName">The name of the compartment to update</param>
			/// <param name="repaintOnly">If true, the method will only invalidate the shape for a repaint, without re-initializing the shape.</param>
			internal static void UpdateCompartments(global::System.Collections.IEnumerable elements, global::System.Type shapeType, string compartmentName, bool repaintOnly)
			{
				foreach (DslModeling::ModelElement element in elements)
				{
					DslModeling::LinkedElementCollection<DslDiagrams::PresentationElement> pels = DslDiagrams::PresentationViewsSubject.GetPresentation(element);
					foreach (DslDiagrams::PresentationElement pel in pels)
					{
						DslDiagrams::CompartmentShape compartmentShape = pel as DslDiagrams::CompartmentShape;
						if (compartmentShape != null && shapeType.IsAssignableFrom(compartmentShape.GetType()))
						{
							if (repaintOnly)
							{
								compartmentShape.Invalidate();
							}
							else
							{
								foreach(DslDiagrams::CompartmentMapping mapping in compartmentShape.GetCompartmentMappings())
								{
									if(mapping.CompartmentId==compartmentName)
									{
										mapping.InitializeCompartmentShape(compartmentShape);
										break;
									}
								}
							}
						}
					}
				}
			}
			#endregion
		}
		
		/// <summary>
		/// Rule to update compartments when an items is removed from the list
		/// </summary>
		[DslModeling::RuleOn(typeof(global::nHydrate2.Dsl.EntityHasFields), FireTime=DslModeling::TimeToFire.TopLevelCommit, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::nHydrate2.Dsl.ViewHasFields), FireTime=DslModeling::TimeToFire.TopLevelCommit, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::nHydrate2.Dsl.StoredProcedureHasFields), FireTime=DslModeling::TimeToFire.TopLevelCommit, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::nHydrate2.Dsl.StoredProcedureHasParameters), FireTime=DslModeling::TimeToFire.TopLevelCommit, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::nHydrate2.Dsl.FunctionHasFields), FireTime=DslModeling::TimeToFire.TopLevelCommit, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::nHydrate2.Dsl.FunctionHasParameters), FireTime=DslModeling::TimeToFire.TopLevelCommit, InitiallyDisabled=true)]
		internal sealed class CompartmentItemDeleteRule : DslModeling::DeleteRule
		{
			/// <summary>
			/// Called when an element is deleted
			/// </summary>
			/// <param name="e"></param>
			public override void ElementDeleted(DslModeling::ElementDeletedEventArgs e)
			{
				ElementDeleted(e, false);
			}
			
			internal static void ElementDeleted(DslModeling::ElementDeletedEventArgs e, bool repaintOnly)
			{
				if(e==null) throw new global::System.ArgumentNullException("e");
				if(e.ModelElement is global::nHydrate2.Dsl.EntityHasFields)
				{
					global::System.Collections.ICollection elements = CompartmentItemAddRule.GetEntityForEntityShapeEntityFieldCompartmentFromLastLink((global::nHydrate2.Dsl.EntityHasFields)e.ModelElement);
					CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::nHydrate2.Dsl.EntityShape), "EntityFieldCompartment", repaintOnly);
				}
				if(e.ModelElement is global::nHydrate2.Dsl.ViewHasFields)
				{
					global::System.Collections.ICollection elements = CompartmentItemAddRule.GetViewForViewShapeViewFieldCompartmentFromLastLink((global::nHydrate2.Dsl.ViewHasFields)e.ModelElement);
					CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::nHydrate2.Dsl.ViewShape), "ViewFieldCompartment", repaintOnly);
				}
				if(e.ModelElement is global::nHydrate2.Dsl.StoredProcedureHasFields)
				{
					global::System.Collections.ICollection elements = CompartmentItemAddRule.GetStoredProcedureForStoredProcedureShapeStoredProcedureFieldCompartmentFromLastLink((global::nHydrate2.Dsl.StoredProcedureHasFields)e.ModelElement);
					CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::nHydrate2.Dsl.StoredProcedureShape), "StoredProcedureFieldCompartment", repaintOnly);
				}
				if(e.ModelElement is global::nHydrate2.Dsl.StoredProcedureHasParameters)
				{
					global::System.Collections.ICollection elements = CompartmentItemAddRule.GetStoredProcedureForStoredProcedureShapeStoredProcedureParameterCompartmentFromLastLink((global::nHydrate2.Dsl.StoredProcedureHasParameters)e.ModelElement);
					CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::nHydrate2.Dsl.StoredProcedureShape), "StoredProcedureParameterCompartment", repaintOnly);
				}
				if(e.ModelElement is global::nHydrate2.Dsl.FunctionHasFields)
				{
					global::System.Collections.ICollection elements = CompartmentItemAddRule.GetFunctionForFunctionShapeFieldCompartmentFromLastLink((global::nHydrate2.Dsl.FunctionHasFields)e.ModelElement);
					CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::nHydrate2.Dsl.FunctionShape), "FieldCompartment", repaintOnly);
				}
				if(e.ModelElement is global::nHydrate2.Dsl.FunctionHasParameters)
				{
					global::System.Collections.ICollection elements = CompartmentItemAddRule.GetFunctionForFunctionShapeParameterCompartmentFromLastLink((global::nHydrate2.Dsl.FunctionHasParameters)e.ModelElement);
					CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::nHydrate2.Dsl.FunctionShape), "ParameterCompartment", repaintOnly);
				}
			}
		}
		
		/// <summary>
		/// Rule to update compartments when the property on an item being displayed changes.
		/// </summary>
		[DslModeling::RuleOn(typeof(global::nHydrate2.Dsl.Field), FireTime=DslModeling::TimeToFire.TopLevelCommit, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::nHydrate2.Dsl.ViewField), FireTime=DslModeling::TimeToFire.TopLevelCommit, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::nHydrate2.Dsl.StoredProcedureField), FireTime=DslModeling::TimeToFire.TopLevelCommit, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::nHydrate2.Dsl.StoredProcedureParameter), FireTime=DslModeling::TimeToFire.TopLevelCommit, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::nHydrate2.Dsl.FunctionField), FireTime=DslModeling::TimeToFire.TopLevelCommit, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::nHydrate2.Dsl.FunctionParameter), FireTime=DslModeling::TimeToFire.TopLevelCommit, InitiallyDisabled=true)]
		internal sealed class CompartmentItemChangeRule : DslModeling::ChangeRule 
		{
			/// <summary>
			/// Called when an element is changed
			/// </summary>
			/// <param name="e"></param>
			public override void ElementPropertyChanged(DslModeling::ElementPropertyChangedEventArgs e)
			{
				ElementPropertyChanged(e, false);
			}
			
			internal static void ElementPropertyChanged(DslModeling::ElementPropertyChangedEventArgs e, bool repaintOnly)
			{
				if(e==null) throw new global::System.ArgumentNullException("e");
				if(e.ModelElement is global::nHydrate2.Dsl.Field && e.DomainProperty.Id == global::nHydrate2.Dsl.Field.NameDomainPropertyId)
				{
					global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetEntityForEntityShapeEntityFieldCompartment((global::nHydrate2.Dsl.Field)e.ModelElement);
					CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::nHydrate2.Dsl.EntityShape), "EntityFieldCompartment", repaintOnly);
				}
				if(e.ModelElement is global::nHydrate2.Dsl.ViewField && e.DomainProperty.Id == global::nHydrate2.Dsl.ViewField.NameDomainPropertyId)
				{
					global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetViewForViewShapeViewFieldCompartment((global::nHydrate2.Dsl.ViewField)e.ModelElement);
					CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::nHydrate2.Dsl.ViewShape), "ViewFieldCompartment", repaintOnly);
				}
				if(e.ModelElement is global::nHydrate2.Dsl.StoredProcedureField && e.DomainProperty.Id == global::nHydrate2.Dsl.StoredProcedureField.NameDomainPropertyId)
				{
					global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetStoredProcedureForStoredProcedureShapeStoredProcedureFieldCompartment((global::nHydrate2.Dsl.StoredProcedureField)e.ModelElement);
					CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::nHydrate2.Dsl.StoredProcedureShape), "StoredProcedureFieldCompartment", repaintOnly);
				}
				if(e.ModelElement is global::nHydrate2.Dsl.StoredProcedureParameter && e.DomainProperty.Id == global::nHydrate2.Dsl.StoredProcedureParameter.NameDomainPropertyId)
				{
					global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetStoredProcedureForStoredProcedureShapeStoredProcedureParameterCompartment((global::nHydrate2.Dsl.StoredProcedureParameter)e.ModelElement);
					CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::nHydrate2.Dsl.StoredProcedureShape), "StoredProcedureParameterCompartment", repaintOnly);
				}
				if(e.ModelElement is global::nHydrate2.Dsl.FunctionField && e.DomainProperty.Id == global::nHydrate2.Dsl.FunctionField.NameDomainPropertyId)
				{
					global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetFunctionForFunctionShapeFieldCompartment((global::nHydrate2.Dsl.FunctionField)e.ModelElement);
					CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::nHydrate2.Dsl.FunctionShape), "FieldCompartment", repaintOnly);
				}
				if(e.ModelElement is global::nHydrate2.Dsl.FunctionParameter && e.DomainProperty.Id == global::nHydrate2.Dsl.FunctionParameter.NameDomainPropertyId)
				{
					global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetFunctionForFunctionShapeParameterCompartment((global::nHydrate2.Dsl.FunctionParameter)e.ModelElement);
					CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::nHydrate2.Dsl.FunctionShape), "ParameterCompartment", repaintOnly);
				}
			}
		}
		
		/// <summary>
		/// Rule to update compartments when a roleplayer change happens
		/// </summary>
		[DslModeling::RuleOn(typeof(global::nHydrate2.Dsl.EntityHasFields), FireTime=DslModeling::TimeToFire.TopLevelCommit, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::nHydrate2.Dsl.ViewHasFields), FireTime=DslModeling::TimeToFire.TopLevelCommit, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::nHydrate2.Dsl.StoredProcedureHasFields), FireTime=DslModeling::TimeToFire.TopLevelCommit, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::nHydrate2.Dsl.StoredProcedureHasParameters), FireTime=DslModeling::TimeToFire.TopLevelCommit, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::nHydrate2.Dsl.FunctionHasFields), FireTime=DslModeling::TimeToFire.TopLevelCommit, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::nHydrate2.Dsl.FunctionHasParameters), FireTime=DslModeling::TimeToFire.TopLevelCommit, InitiallyDisabled=true)]
		internal sealed class CompartmentItemRolePlayerChangeRule : DslModeling::RolePlayerChangeRule 
		{
			/// <summary>
			/// Called when the roleplayer on a link changes.
			/// </summary>
			/// <param name="e"></param>
			public override void RolePlayerChanged(DslModeling::RolePlayerChangedEventArgs e)
			{
				RolePlayerChanged(e, false);
			}
			
			internal static void RolePlayerChanged(DslModeling::RolePlayerChangedEventArgs e, bool repaintOnly)
			{
				if(e==null) throw new global::System.ArgumentNullException("e");
				if(typeof(global::nHydrate2.Dsl.EntityHasFields).IsAssignableFrom(e.DomainRelationship.ImplementationClass))
				{
					if(e.DomainRole.IsSource)
					{
						//global::System.Collections.IEnumerable oldElements = CompartmentItemAddRule.GetEntityForEntityShapeEntityFieldCompartmentFromLastLink((global::nHydrate2.Dsl.Field)e.OldRolePlayer);
						//foreach(DslModeling::ModelElement element in oldElements)
						//{
						//	DslModeling::LinkedElementCollection<DslDiagrams::PresentationElement> pels = DslDiagrams::PresentationViewsSubject.GetPresentation(element);
						//	foreach(DslDiagrams::PresentationElement pel in pels)
						//	{
						//		global::nHydrate2.Dsl.EntityShape compartmentShape = pel as global::nHydrate2.Dsl.EntityShape;
						//		if(compartmentShape != null)
						//		{
						//			compartmentShape.GetCompartmentMappings()[0].InitializeCompartmentShape(compartmentShape);
						//		}
						//	}
						//}
						
						global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetEntityForEntityShapeEntityFieldCompartmentFromLastLink((global::nHydrate2.Dsl.EntityHasFields)e.ElementLink);
						CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::nHydrate2.Dsl.EntityShape), "EntityFieldCompartment", repaintOnly);
					}
					else 
					{
						global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetEntityForEntityShapeEntityFieldCompartment((global::nHydrate2.Dsl.Field)e.NewRolePlayer);
						CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::nHydrate2.Dsl.EntityShape), "EntityFieldCompartment", repaintOnly);
					}
				}
				if(typeof(global::nHydrate2.Dsl.ViewHasFields).IsAssignableFrom(e.DomainRelationship.ImplementationClass))
				{
					if(e.DomainRole.IsSource)
					{
						//global::System.Collections.IEnumerable oldElements = CompartmentItemAddRule.GetViewForViewShapeViewFieldCompartmentFromLastLink((global::nHydrate2.Dsl.ViewField)e.OldRolePlayer);
						//foreach(DslModeling::ModelElement element in oldElements)
						//{
						//	DslModeling::LinkedElementCollection<DslDiagrams::PresentationElement> pels = DslDiagrams::PresentationViewsSubject.GetPresentation(element);
						//	foreach(DslDiagrams::PresentationElement pel in pels)
						//	{
						//		global::nHydrate2.Dsl.ViewShape compartmentShape = pel as global::nHydrate2.Dsl.ViewShape;
						//		if(compartmentShape != null)
						//		{
						//			compartmentShape.GetCompartmentMappings()[0].InitializeCompartmentShape(compartmentShape);
						//		}
						//	}
						//}
						
						global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetViewForViewShapeViewFieldCompartmentFromLastLink((global::nHydrate2.Dsl.ViewHasFields)e.ElementLink);
						CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::nHydrate2.Dsl.ViewShape), "ViewFieldCompartment", repaintOnly);
					}
					else 
					{
						global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetViewForViewShapeViewFieldCompartment((global::nHydrate2.Dsl.ViewField)e.NewRolePlayer);
						CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::nHydrate2.Dsl.ViewShape), "ViewFieldCompartment", repaintOnly);
					}
				}
				if(typeof(global::nHydrate2.Dsl.StoredProcedureHasFields).IsAssignableFrom(e.DomainRelationship.ImplementationClass))
				{
					if(e.DomainRole.IsSource)
					{
						//global::System.Collections.IEnumerable oldElements = CompartmentItemAddRule.GetStoredProcedureForStoredProcedureShapeStoredProcedureFieldCompartmentFromLastLink((global::nHydrate2.Dsl.StoredProcedureField)e.OldRolePlayer);
						//foreach(DslModeling::ModelElement element in oldElements)
						//{
						//	DslModeling::LinkedElementCollection<DslDiagrams::PresentationElement> pels = DslDiagrams::PresentationViewsSubject.GetPresentation(element);
						//	foreach(DslDiagrams::PresentationElement pel in pels)
						//	{
						//		global::nHydrate2.Dsl.StoredProcedureShape compartmentShape = pel as global::nHydrate2.Dsl.StoredProcedureShape;
						//		if(compartmentShape != null)
						//		{
						//			compartmentShape.GetCompartmentMappings()[0].InitializeCompartmentShape(compartmentShape);
						//		}
						//	}
						//}
						
						global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetStoredProcedureForStoredProcedureShapeStoredProcedureFieldCompartmentFromLastLink((global::nHydrate2.Dsl.StoredProcedureHasFields)e.ElementLink);
						CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::nHydrate2.Dsl.StoredProcedureShape), "StoredProcedureFieldCompartment", repaintOnly);
					}
					else 
					{
						global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetStoredProcedureForStoredProcedureShapeStoredProcedureFieldCompartment((global::nHydrate2.Dsl.StoredProcedureField)e.NewRolePlayer);
						CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::nHydrate2.Dsl.StoredProcedureShape), "StoredProcedureFieldCompartment", repaintOnly);
					}
				}
				if(typeof(global::nHydrate2.Dsl.StoredProcedureHasParameters).IsAssignableFrom(e.DomainRelationship.ImplementationClass))
				{
					if(e.DomainRole.IsSource)
					{
						//global::System.Collections.IEnumerable oldElements = CompartmentItemAddRule.GetStoredProcedureForStoredProcedureShapeStoredProcedureParameterCompartmentFromLastLink((global::nHydrate2.Dsl.StoredProcedureParameter)e.OldRolePlayer);
						//foreach(DslModeling::ModelElement element in oldElements)
						//{
						//	DslModeling::LinkedElementCollection<DslDiagrams::PresentationElement> pels = DslDiagrams::PresentationViewsSubject.GetPresentation(element);
						//	foreach(DslDiagrams::PresentationElement pel in pels)
						//	{
						//		global::nHydrate2.Dsl.StoredProcedureShape compartmentShape = pel as global::nHydrate2.Dsl.StoredProcedureShape;
						//		if(compartmentShape != null)
						//		{
						//			compartmentShape.GetCompartmentMappings()[1].InitializeCompartmentShape(compartmentShape);
						//		}
						//	}
						//}
						
						global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetStoredProcedureForStoredProcedureShapeStoredProcedureParameterCompartmentFromLastLink((global::nHydrate2.Dsl.StoredProcedureHasParameters)e.ElementLink);
						CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::nHydrate2.Dsl.StoredProcedureShape), "StoredProcedureParameterCompartment", repaintOnly);
					}
					else 
					{
						global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetStoredProcedureForStoredProcedureShapeStoredProcedureParameterCompartment((global::nHydrate2.Dsl.StoredProcedureParameter)e.NewRolePlayer);
						CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::nHydrate2.Dsl.StoredProcedureShape), "StoredProcedureParameterCompartment", repaintOnly);
					}
				}
				if(typeof(global::nHydrate2.Dsl.FunctionHasFields).IsAssignableFrom(e.DomainRelationship.ImplementationClass))
				{
					if(e.DomainRole.IsSource)
					{
						//global::System.Collections.IEnumerable oldElements = CompartmentItemAddRule.GetFunctionForFunctionShapeFieldCompartmentFromLastLink((global::nHydrate2.Dsl.FunctionField)e.OldRolePlayer);
						//foreach(DslModeling::ModelElement element in oldElements)
						//{
						//	DslModeling::LinkedElementCollection<DslDiagrams::PresentationElement> pels = DslDiagrams::PresentationViewsSubject.GetPresentation(element);
						//	foreach(DslDiagrams::PresentationElement pel in pels)
						//	{
						//		global::nHydrate2.Dsl.FunctionShape compartmentShape = pel as global::nHydrate2.Dsl.FunctionShape;
						//		if(compartmentShape != null)
						//		{
						//			compartmentShape.GetCompartmentMappings()[0].InitializeCompartmentShape(compartmentShape);
						//		}
						//	}
						//}
						
						global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetFunctionForFunctionShapeFieldCompartmentFromLastLink((global::nHydrate2.Dsl.FunctionHasFields)e.ElementLink);
						CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::nHydrate2.Dsl.FunctionShape), "FieldCompartment", repaintOnly);
					}
					else 
					{
						global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetFunctionForFunctionShapeFieldCompartment((global::nHydrate2.Dsl.FunctionField)e.NewRolePlayer);
						CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::nHydrate2.Dsl.FunctionShape), "FieldCompartment", repaintOnly);
					}
				}
				if(typeof(global::nHydrate2.Dsl.FunctionHasParameters).IsAssignableFrom(e.DomainRelationship.ImplementationClass))
				{
					if(e.DomainRole.IsSource)
					{
						//global::System.Collections.IEnumerable oldElements = CompartmentItemAddRule.GetFunctionForFunctionShapeParameterCompartmentFromLastLink((global::nHydrate2.Dsl.FunctionParameter)e.OldRolePlayer);
						//foreach(DslModeling::ModelElement element in oldElements)
						//{
						//	DslModeling::LinkedElementCollection<DslDiagrams::PresentationElement> pels = DslDiagrams::PresentationViewsSubject.GetPresentation(element);
						//	foreach(DslDiagrams::PresentationElement pel in pels)
						//	{
						//		global::nHydrate2.Dsl.FunctionShape compartmentShape = pel as global::nHydrate2.Dsl.FunctionShape;
						//		if(compartmentShape != null)
						//		{
						//			compartmentShape.GetCompartmentMappings()[1].InitializeCompartmentShape(compartmentShape);
						//		}
						//	}
						//}
						
						global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetFunctionForFunctionShapeParameterCompartmentFromLastLink((global::nHydrate2.Dsl.FunctionHasParameters)e.ElementLink);
						CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::nHydrate2.Dsl.FunctionShape), "ParameterCompartment", repaintOnly);
					}
					else 
					{
						global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetFunctionForFunctionShapeParameterCompartment((global::nHydrate2.Dsl.FunctionParameter)e.NewRolePlayer);
						CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::nHydrate2.Dsl.FunctionShape), "ParameterCompartment", repaintOnly);
					}
				}
			}
		}
	
		/// <summary>
		/// Rule to update compartments when the order of items in the list changes.
		/// </summary>
		[DslModeling::RuleOn(typeof(global::nHydrate2.Dsl.EntityHasFields), FireTime=DslModeling::TimeToFire.TopLevelCommit, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::nHydrate2.Dsl.ViewHasFields), FireTime=DslModeling::TimeToFire.TopLevelCommit, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::nHydrate2.Dsl.StoredProcedureHasFields), FireTime=DslModeling::TimeToFire.TopLevelCommit, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::nHydrate2.Dsl.StoredProcedureHasParameters), FireTime=DslModeling::TimeToFire.TopLevelCommit, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::nHydrate2.Dsl.FunctionHasFields), FireTime=DslModeling::TimeToFire.TopLevelCommit, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::nHydrate2.Dsl.FunctionHasParameters), FireTime=DslModeling::TimeToFire.TopLevelCommit, InitiallyDisabled=true)]
		internal sealed class CompartmentItemRolePlayerPositionChangeRule : DslModeling::RolePlayerPositionChangeRule 
		{
			/// <summary>
			/// Called when the order of a roleplayer in a relationship changes
			/// </summary>
			/// <param name="e"></param>
			public override void RolePlayerPositionChanged(DslModeling::RolePlayerOrderChangedEventArgs e)
			{
				RolePlayerPositionChanged(e, false);
			}
			
			internal static void RolePlayerPositionChanged(DslModeling::RolePlayerOrderChangedEventArgs e, bool repaintOnly)
			{
				if(e==null) throw new global::System.ArgumentNullException("e");
				if(typeof(global::nHydrate2.Dsl.EntityHasFields).IsAssignableFrom(e.DomainRelationship.ImplementationClass))
				{
					if(!e.CounterpartDomainRole.IsSource)
					{
						global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetEntityForEntityShapeEntityFieldCompartment((global::nHydrate2.Dsl.Field)e.CounterpartRolePlayer);
						CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::nHydrate2.Dsl.EntityShape), "EntityFieldCompartment", repaintOnly);
					}
				}
				if(typeof(global::nHydrate2.Dsl.ViewHasFields).IsAssignableFrom(e.DomainRelationship.ImplementationClass))
				{
					if(!e.CounterpartDomainRole.IsSource)
					{
						global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetViewForViewShapeViewFieldCompartment((global::nHydrate2.Dsl.ViewField)e.CounterpartRolePlayer);
						CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::nHydrate2.Dsl.ViewShape), "ViewFieldCompartment", repaintOnly);
					}
				}
				if(typeof(global::nHydrate2.Dsl.StoredProcedureHasFields).IsAssignableFrom(e.DomainRelationship.ImplementationClass))
				{
					if(!e.CounterpartDomainRole.IsSource)
					{
						global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetStoredProcedureForStoredProcedureShapeStoredProcedureFieldCompartment((global::nHydrate2.Dsl.StoredProcedureField)e.CounterpartRolePlayer);
						CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::nHydrate2.Dsl.StoredProcedureShape), "StoredProcedureFieldCompartment", repaintOnly);
					}
				}
				if(typeof(global::nHydrate2.Dsl.StoredProcedureHasParameters).IsAssignableFrom(e.DomainRelationship.ImplementationClass))
				{
					if(!e.CounterpartDomainRole.IsSource)
					{
						global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetStoredProcedureForStoredProcedureShapeStoredProcedureParameterCompartment((global::nHydrate2.Dsl.StoredProcedureParameter)e.CounterpartRolePlayer);
						CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::nHydrate2.Dsl.StoredProcedureShape), "StoredProcedureParameterCompartment", repaintOnly);
					}
				}
				if(typeof(global::nHydrate2.Dsl.FunctionHasFields).IsAssignableFrom(e.DomainRelationship.ImplementationClass))
				{
					if(!e.CounterpartDomainRole.IsSource)
					{
						global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetFunctionForFunctionShapeFieldCompartment((global::nHydrate2.Dsl.FunctionField)e.CounterpartRolePlayer);
						CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::nHydrate2.Dsl.FunctionShape), "FieldCompartment", repaintOnly);
					}
				}
				if(typeof(global::nHydrate2.Dsl.FunctionHasParameters).IsAssignableFrom(e.DomainRelationship.ImplementationClass))
				{
					if(!e.CounterpartDomainRole.IsSource)
					{
						global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetFunctionForFunctionShapeParameterCompartment((global::nHydrate2.Dsl.FunctionParameter)e.CounterpartRolePlayer);
						CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::nHydrate2.Dsl.FunctionShape), "ParameterCompartment", repaintOnly);
					}
				}
			}
		}
	
		/// <summary>
		/// A rule which fires when data mapped to outer text decorators has changed,
		/// so we can update the decorator host's bounds.
		/// </summary>
		[DslModeling::RuleOn(typeof(global::nHydrate2.Dsl.Entity), InitiallyDisabled=true)]
		internal sealed class DecoratorPropertyChanged : DslModeling::ChangeRule
		{
			[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity", Justification = "Generated code.")]
			public override void ElementPropertyChanged(DslModeling::ElementPropertyChangedEventArgs e)
			{
				if(e == null) throw new global::System.ArgumentNullException("e");
				
				if (e.DomainProperty.Id == global::nHydrate2.Dsl.Entity.NameDomainPropertyId)
				{
					DslDiagrams::Decorator decorator = global::nHydrate2.Dsl.EntityAssociationConnector.FindEntityAssociationConnectorDecorator("SourceEntityRelationTextDecorator");
					if(decorator != null)
					{
						decorator.UpdateDecoratorHostShapes(e.ModelElement, global::nHydrate2.Dsl.EntityHasEntities.DomainClassId);
					}
					decorator = global::nHydrate2.Dsl.EntityAssociationConnector.FindEntityAssociationConnectorDecorator("DestEntityRelationTextDecorator");
					if(decorator != null)
					{
						decorator.UpdateDecoratorHostShapes(e.ModelElement, global::nHydrate2.Dsl.EntityHasEntities.DomainClassId);
					}
				}
			}
		}
	
		/// <summary>
		/// Reroute a connector when the role players of its underlying relationship change
		/// </summary>
		[DslModeling::RuleOn(typeof(global::nHydrate2.Dsl.EntityHasEntities), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::nHydrate2.Dsl.EntityInheritsEntity), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::nHydrate2.Dsl.EntityHasComposites), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::nHydrate2.Dsl.EntityHasViews), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		internal sealed class ConnectorRolePlayerChanged : DslModeling::RolePlayerChangeRule
		{
			/// <summary>
			/// Reroute a connector when the role players of its underlying relationship change
			/// </summary>
			public override void RolePlayerChanged(DslModeling::RolePlayerChangedEventArgs e)
			{
				if (e == null) throw new global::System.ArgumentNullException("e");
	
				global::System.Collections.ObjectModel.ReadOnlyCollection<DslDiagrams::PresentationViewsSubject> connectorLinks = DslDiagrams::PresentationViewsSubject.GetLinksToPresentation(e.ElementLink);
				foreach (DslDiagrams::PresentationViewsSubject connectorLink in connectorLinks)
				{
					// Fix up any binary link shapes attached to the element link.
					DslDiagrams::BinaryLinkShape linkShape = connectorLink.Presentation as DslDiagrams::BinaryLinkShape;
					if (linkShape != null)
					{
						global::nHydrate2.Dsl.nHydrateDiagram diagram = linkShape.Diagram as global::nHydrate2.Dsl.nHydrateDiagram;
						if (diagram != null)
						{
							if (e.NewRolePlayer != null)
							{
								DslDiagrams::NodeShape fromShape;
								DslDiagrams::NodeShape toShape;
								diagram.GetSourceAndTargetForConnector(linkShape, out fromShape, out toShape);
								if (fromShape != null && toShape != null)
								{
									if (!object.Equals(fromShape, linkShape.FromShape))
									{
										linkShape.FromShape = fromShape;
									}
									if (!object.Equals(linkShape.ToShape, toShape))
									{
										linkShape.ToShape = toShape;
									}
								}
								else
								{
									// delete the connector if we cannot find an appropriate target shape.
									linkShape.Delete();
								}
							}
							else
							{
								// delete the connector if the new role player is null.
								linkShape.Delete();
							}
						}
					}
				}
			}
		}
	}
	
