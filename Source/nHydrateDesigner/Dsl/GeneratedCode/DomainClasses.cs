//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace nHydrate2.Dsl
{
	/// <summary>
	/// Double-derived base class for DomainClass nHydrateModel
	/// </summary>
	[DslDesign::DisplayNameResource("nHydrate2.Dsl.nHydrateModel.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("nHydrate2.Dsl.nHydrateModel.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::nHydrate2.Dsl.nHydrate2DomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("77b5fe81-853a-4b74-8ce5-98612544852f")]
	public abstract partial class nHydrateModelBase : DslModeling::ModelElement, System.ComponentModel.INotifyPropertyChanged
	{
		#region INotifyPropertyChanged
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs e)
		{
			if (this.PropertyChanged != null)
				this.PropertyChanged(this, e);
		}
		#endregion
	
		#region Constructors, domain class Id
	
		/// <summary>
		/// nHydrateModel domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x77b5fe81, 0x853a, 0x4b74, 0x8c, 0xe5, 0x98, 0x61, 0x25, 0x44, 0x85, 0x2f);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected nHydrateModelBase(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region CompanyName domain property code
		
		/// <summary>
		/// CompanyName domain property Id.
		/// </summary>
		public static readonly global::System.Guid CompanyNameDomainPropertyId = new global::System.Guid(0xe4a7289c, 0xe61c, 0x440e, 0xb8, 0x81, 0x5b, 0x06, 0x95, 0x0f, 0xd6, 0xf0);
		
		/// <summary>
		/// Storage for CompanyName
		/// </summary>
		private global::System.String companyNamePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of CompanyName domain property.
		/// Specifies the company name that will be used to build namespaces
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.nHydrateModel/CompanyName.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.nHydrateModel/CompanyName.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.nHydrateModel/CompanyName.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("e4a7289c-e61c-440e-b881-5b06950fd6f0")]
		public virtual global::System.String CompanyName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return companyNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				CompanyNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the nHydrateModel.CompanyName domain property.
		/// </summary>
		internal sealed partial class CompanyNamePropertyHandler : DslModeling::DomainPropertyValueHandler<nHydrateModelBase, global::System.String>
		{
			private CompanyNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the nHydrateModel.CompanyName domain property value handler.
			/// </summary>
			public static readonly CompanyNamePropertyHandler Instance = new CompanyNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the nHydrateModel.CompanyName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return CompanyNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(nHydrateModelBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.CompanyName;
				//return element.GetValue<global::System.String>("CompanyName", element.companyNamePropertyStorage);
				//return element.companyNamePropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(nHydrateModelBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.companyNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("nHydrateModel"));
				}
			}
		}
		
		#endregion
		#region Copyright domain property code
		
		/// <summary>
		/// Copyright domain property Id.
		/// </summary>
		public static readonly global::System.Guid CopyrightDomainPropertyId = new global::System.Guid(0x4f568ed1, 0xd9e1, 0x4905, 0xbe, 0xe0, 0x6e, 0x61, 0x11, 0x58, 0x1c, 0xe5);
		
		/// <summary>
		/// Storage for Copyright
		/// </summary>
		private global::System.String copyrightPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Copyright domain property.
		/// Determines copyright to add to each file
		/// </summary>
		[System.ComponentModel.Editor(typeof(nHydrate2.Dsl.Design.Editors.CopyrightEditor), typeof(System.Drawing.Design.UITypeEditor))]
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.nHydrateModel/Copyright.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.nHydrateModel/Copyright.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.nHydrateModel/Copyright.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("4f568ed1-d9e1-4905-bee0-6e6111581ce5")]
		public virtual global::System.String Copyright
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return copyrightPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				CopyrightPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the nHydrateModel.Copyright domain property.
		/// </summary>
		internal sealed partial class CopyrightPropertyHandler : DslModeling::DomainPropertyValueHandler<nHydrateModelBase, global::System.String>
		{
			private CopyrightPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the nHydrateModel.Copyright domain property value handler.
			/// </summary>
			public static readonly CopyrightPropertyHandler Instance = new CopyrightPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the nHydrateModel.Copyright domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return CopyrightDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(nHydrateModelBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.Copyright;
				//return element.GetValue<global::System.String>("Copyright", element.copyrightPropertyStorage);
				//return element.copyrightPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(nHydrateModelBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.copyrightPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("nHydrateModel"));
				}
			}
		}
		
		#endregion
		#region DefaultNamespace domain property code
		
		/// <summary>
		/// DefaultNamespace domain property Id.
		/// </summary>
		public static readonly global::System.Guid DefaultNamespaceDomainPropertyId = new global::System.Guid(0x878ea856, 0xee97, 0x4991, 0xbb, 0x04, 0x94, 0x10, 0x62, 0xbb, 0xea, 0x33);
		
		/// <summary>
		/// Storage for DefaultNamespace
		/// </summary>
		private global::System.String defaultNamespacePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of DefaultNamespace domain property.
		/// Determines the default namespace and base project names of all generated
		/// projects. Leave blank for the default value of CompanyName.ProjectName
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.nHydrateModel/DefaultNamespace.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.nHydrateModel/DefaultNamespace.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.nHydrateModel/DefaultNamespace.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("878ea856-ee97-4991-bb04-941062bbea33")]
		public virtual global::System.String DefaultNamespace
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return defaultNamespacePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DefaultNamespacePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the nHydrateModel.DefaultNamespace domain property.
		/// </summary>
		internal sealed partial class DefaultNamespacePropertyHandler : DslModeling::DomainPropertyValueHandler<nHydrateModelBase, global::System.String>
		{
			private DefaultNamespacePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the nHydrateModel.DefaultNamespace domain property value handler.
			/// </summary>
			public static readonly DefaultNamespacePropertyHandler Instance = new DefaultNamespacePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the nHydrateModel.DefaultNamespace domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DefaultNamespaceDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(nHydrateModelBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.DefaultNamespace;
				//return element.GetValue<global::System.String>("DefaultNamespace", element.defaultNamespacePropertyStorage);
				//return element.defaultNamespacePropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(nHydrateModelBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.defaultNamespacePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("nHydrateModel"));
				}
			}
		}
		
		#endregion
		#region ProjectName domain property code
		
		/// <summary>
		/// ProjectName domain property Id.
		/// </summary>
		public static readonly global::System.Guid ProjectNameDomainPropertyId = new global::System.Guid(0x6aed7802, 0x72a5, 0x4336, 0x9d, 0xd3, 0xfa, 0xd4, 0x6e, 0xc0, 0x57, 0x59);
		
		/// <summary>
		/// Storage for ProjectName
		/// </summary>
		private global::System.String projectNamePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of ProjectName domain property.
		/// Specifies the name of the generated assembly
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.nHydrateModel/ProjectName.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.nHydrateModel/ProjectName.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.nHydrateModel/ProjectName.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("6aed7802-72a5-4336-9dd3-fad46ec05759")]
		public virtual global::System.String ProjectName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return projectNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ProjectNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the nHydrateModel.ProjectName domain property.
		/// </summary>
		internal sealed partial class ProjectNamePropertyHandler : DslModeling::DomainPropertyValueHandler<nHydrateModelBase, global::System.String>
		{
			private ProjectNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the nHydrateModel.ProjectName domain property value handler.
			/// </summary>
			public static readonly ProjectNamePropertyHandler Instance = new ProjectNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the nHydrateModel.ProjectName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ProjectNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(nHydrateModelBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.ProjectName;
				//return element.GetValue<global::System.String>("ProjectName", element.projectNamePropertyStorage);
				//return element.projectNamePropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(nHydrateModelBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.projectNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("nHydrateModel"));
				}
			}
		}
		
		#endregion
		#region SQLServerType domain property code
		
		/// <summary>
		/// SQLServerType domain property Id.
		/// </summary>
		public static readonly global::System.Guid SQLServerTypeDomainPropertyId = new global::System.Guid(0xe309bd8d, 0xce4c, 0x4995, 0xa7, 0x3e, 0xb6, 0xaa, 0xeb, 0x07, 0x0c, 0x3d);
		
		/// <summary>
		/// Storage for SQLServerType
		/// </summary>
		private DatabaseTypeConstants sQLServerTypePropertyStorage = DatabaseTypeConstants.SQL2005;
		
		/// <summary>
		/// Gets or sets the value of SQLServerType domain property.
		/// Determines the target SQL Server version
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.nHydrateModel/SQLServerType.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.nHydrateModel/SQLServerType.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.nHydrateModel/SQLServerType.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(DatabaseTypeConstants.SQL2005)]
		[DslModeling::DomainObjectId("e309bd8d-ce4c-4995-a73e-b6aaeb070c3d")]
		public virtual DatabaseTypeConstants SQLServerType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return sQLServerTypePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				SQLServerTypePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the nHydrateModel.SQLServerType domain property.
		/// </summary>
		internal sealed partial class SQLServerTypePropertyHandler : DslModeling::DomainPropertyValueHandler<nHydrateModelBase, DatabaseTypeConstants>
		{
			private SQLServerTypePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the nHydrateModel.SQLServerType domain property value handler.
			/// </summary>
			public static readonly SQLServerTypePropertyHandler Instance = new SQLServerTypePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the nHydrateModel.SQLServerType domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return SQLServerTypeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed DatabaseTypeConstants GetValue(nHydrateModelBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.SQLServerType;
				//return element.GetValue<DatabaseTypeConstants>("SQLServerType", element.sQLServerTypePropertyStorage);
				//return element.sQLServerTypePropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(nHydrateModelBase element, DatabaseTypeConstants newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				DatabaseTypeConstants oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.sQLServerTypePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("nHydrateModel"));
				}
			}
		}
		
		#endregion
		#region StoredProcedurePrefix domain property code
		
		/// <summary>
		/// StoredProcedurePrefix domain property Id.
		/// </summary>
		public static readonly global::System.Guid StoredProcedurePrefixDomainPropertyId = new global::System.Guid(0xbc3b0b9e, 0x6e90, 0x4e4c, 0xa8, 0x59, 0xe1, 0x17, 0x47, 0xc4, 0x20, 0xfc);
		
		/// <summary>
		/// Storage for StoredProcedurePrefix
		/// </summary>
		private global::System.String storedProcedurePrefixPropertyStorage = "gen";
		
		/// <summary>
		/// Gets or sets the value of StoredProcedurePrefix domain property.
		/// Determines the prefix for generated stored procedures
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.nHydrateModel/StoredProcedurePrefix.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.nHydrateModel/StoredProcedurePrefix.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.nHydrateModel/StoredProcedurePrefix.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("gen")]
		[DslModeling::DomainObjectId("bc3b0b9e-6e90-4e4c-a859-e11747c420fc")]
		public virtual global::System.String StoredProcedurePrefix
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return storedProcedurePrefixPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				StoredProcedurePrefixPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the nHydrateModel.StoredProcedurePrefix domain property.
		/// </summary>
		internal sealed partial class StoredProcedurePrefixPropertyHandler : DslModeling::DomainPropertyValueHandler<nHydrateModelBase, global::System.String>
		{
			private StoredProcedurePrefixPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the nHydrateModel.StoredProcedurePrefix domain property value handler.
			/// </summary>
			public static readonly StoredProcedurePrefixPropertyHandler Instance = new StoredProcedurePrefixPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the nHydrateModel.StoredProcedurePrefix domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return StoredProcedurePrefixDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(nHydrateModelBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.StoredProcedurePrefix;
				//return element.GetValue<global::System.String>("StoredProcedurePrefix", element.storedProcedurePrefixPropertyStorage);
				//return element.storedProcedurePrefixPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(nHydrateModelBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.storedProcedurePrefixPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("nHydrateModel"));
				}
			}
		}
		
		#endregion
		#region UseUTCTime domain property code
		
		/// <summary>
		/// UseUTCTime domain property Id.
		/// </summary>
		public static readonly global::System.Guid UseUTCTimeDomainPropertyId = new global::System.Guid(0x5be892eb, 0x5e4f, 0x4065, 0xad, 0x4a, 0xee, 0x6b, 0x1c, 0x65, 0xc8, 0xd4);
		
		/// <summary>
		/// Storage for UseUTCTime
		/// </summary>
		private global::System.Boolean useUTCTimePropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of UseUTCTime domain property.
		/// Specifies whether UTC or local time is used for the created and modified audits
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.nHydrateModel/UseUTCTime.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.nHydrateModel/UseUTCTime.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.nHydrateModel/UseUTCTime.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("5be892eb-5e4f-4065-ad4a-ee6b1c65c8d4")]
		public virtual global::System.Boolean UseUTCTime
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return useUTCTimePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				UseUTCTimePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the nHydrateModel.UseUTCTime domain property.
		/// </summary>
		internal sealed partial class UseUTCTimePropertyHandler : DslModeling::DomainPropertyValueHandler<nHydrateModelBase, global::System.Boolean>
		{
			private UseUTCTimePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the nHydrateModel.UseUTCTime domain property value handler.
			/// </summary>
			public static readonly UseUTCTimePropertyHandler Instance = new UseUTCTimePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the nHydrateModel.UseUTCTime domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return UseUTCTimeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(nHydrateModelBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.UseUTCTime;
				//return element.GetValue<global::System.Boolean>("UseUTCTime", element.useUTCTimePropertyStorage);
				//return element.useUTCTimePropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(nHydrateModelBase element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.useUTCTimePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("nHydrateModel"));
				}
			}
		}
		
		#endregion
		#region Version domain property code
		
		/// <summary>
		/// Version domain property Id.
		/// </summary>
		public static readonly global::System.Guid VersionDomainPropertyId = new global::System.Guid(0x0d7940fc, 0x1697, 0x4d8a, 0x95, 0x7a, 0x64, 0x79, 0xd9, 0x71, 0x0a, 0x87);
		
		/// <summary>
		/// Storage for Version
		/// </summary>
		private global::System.String versionPropertyStorage = "0.0.0.0";
		
		/// <summary>
		/// Gets or sets the value of Version domain property.
		/// Specifies the version number of the generated assembly
		/// </summary>
		[System.ComponentModel.TypeConverter(typeof(nHydrate2.Dsl.Design.Converters.VersionConverter))]
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.nHydrateModel/Version.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.nHydrateModel/Version.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.nHydrateModel/Version.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("0.0.0.0")]
		[DslModeling::DomainObjectId("0d7940fc-1697-4d8a-957a-6479d9710a87")]
		public virtual global::System.String Version
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return versionPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				VersionPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the nHydrateModel.Version domain property.
		/// </summary>
		internal sealed partial class VersionPropertyHandler : DslModeling::DomainPropertyValueHandler<nHydrateModelBase, global::System.String>
		{
			private VersionPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the nHydrateModel.Version domain property value handler.
			/// </summary>
			public static readonly VersionPropertyHandler Instance = new VersionPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the nHydrateModel.Version domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return VersionDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(nHydrateModelBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.Version;
				//return element.GetValue<global::System.String>("Version", element.versionPropertyStorage);
				//return element.versionPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(nHydrateModelBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.versionPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("nHydrateModel"));
				}
			}
		}
		
		#endregion
		#region CreatedByColumnName domain property code
		
		/// <summary>
		/// CreatedByColumnName domain property Id.
		/// </summary>
		public static readonly global::System.Guid CreatedByColumnNameDomainPropertyId = new global::System.Guid(0xefe34335, 0x275d, 0x4e98, 0xaa, 0x77, 0x2c, 0x72, 0x38, 0x7c, 0xa5, 0xf2);
		
		/// <summary>
		/// Storage for CreatedByColumnName
		/// </summary>
		private global::System.String createdByColumnNamePropertyStorage = "CreatedBy";
		
		/// <summary>
		/// Gets or sets the value of CreatedByColumnName domain property.
		/// Determines the name of the created by field
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.nHydrateModel/CreatedByColumnName.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.nHydrateModel/CreatedByColumnName.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.nHydrateModel/CreatedByColumnName.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("CreatedBy")]
		[DslModeling::DomainObjectId("efe34335-275d-4e98-aa77-2c72387ca5f2")]
		public virtual global::System.String CreatedByColumnName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return createdByColumnNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				CreatedByColumnNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the nHydrateModel.CreatedByColumnName domain property.
		/// </summary>
		internal sealed partial class CreatedByColumnNamePropertyHandler : DslModeling::DomainPropertyValueHandler<nHydrateModelBase, global::System.String>
		{
			private CreatedByColumnNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the nHydrateModel.CreatedByColumnName domain property value handler.
			/// </summary>
			public static readonly CreatedByColumnNamePropertyHandler Instance = new CreatedByColumnNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the nHydrateModel.CreatedByColumnName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return CreatedByColumnNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(nHydrateModelBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.CreatedByColumnName;
				//return element.GetValue<global::System.String>("CreatedByColumnName", element.createdByColumnNamePropertyStorage);
				//return element.createdByColumnNamePropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(nHydrateModelBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.createdByColumnNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("nHydrateModel"));
				}
			}
		}
		
		#endregion
		#region CreatedDateColumnName domain property code
		
		/// <summary>
		/// CreatedDateColumnName domain property Id.
		/// </summary>
		public static readonly global::System.Guid CreatedDateColumnNameDomainPropertyId = new global::System.Guid(0xb33e6b20, 0xf095, 0x403e, 0xb0, 0xa4, 0x72, 0xde, 0xb6, 0xa0, 0x14, 0xd3);
		
		/// <summary>
		/// Storage for CreatedDateColumnName
		/// </summary>
		private global::System.String createdDateColumnNamePropertyStorage = "CreatedDate";
		
		/// <summary>
		/// Gets or sets the value of CreatedDateColumnName domain property.
		/// Determines the name of the created date field
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.nHydrateModel/CreatedDateColumnName.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.nHydrateModel/CreatedDateColumnName.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.nHydrateModel/CreatedDateColumnName.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("CreatedDate")]
		[DslModeling::DomainObjectId("b33e6b20-f095-403e-b0a4-72deb6a014d3")]
		public virtual global::System.String CreatedDateColumnName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return createdDateColumnNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				CreatedDateColumnNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the nHydrateModel.CreatedDateColumnName domain property.
		/// </summary>
		internal sealed partial class CreatedDateColumnNamePropertyHandler : DslModeling::DomainPropertyValueHandler<nHydrateModelBase, global::System.String>
		{
			private CreatedDateColumnNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the nHydrateModel.CreatedDateColumnName domain property value handler.
			/// </summary>
			public static readonly CreatedDateColumnNamePropertyHandler Instance = new CreatedDateColumnNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the nHydrateModel.CreatedDateColumnName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return CreatedDateColumnNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(nHydrateModelBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.CreatedDateColumnName;
				//return element.GetValue<global::System.String>("CreatedDateColumnName", element.createdDateColumnNamePropertyStorage);
				//return element.createdDateColumnNamePropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(nHydrateModelBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.createdDateColumnNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("nHydrateModel"));
				}
			}
		}
		
		#endregion
		#region ModifiedDateColumnName domain property code
		
		/// <summary>
		/// ModifiedDateColumnName domain property Id.
		/// </summary>
		public static readonly global::System.Guid ModifiedDateColumnNameDomainPropertyId = new global::System.Guid(0xc9898612, 0xec74, 0x4afc, 0x90, 0x4a, 0xfa, 0xb3, 0xe0, 0xb7, 0xa1, 0x32);
		
		/// <summary>
		/// Storage for ModifiedDateColumnName
		/// </summary>
		private global::System.String modifiedDateColumnNamePropertyStorage = "ModifiedDate";
		
		/// <summary>
		/// Gets or sets the value of ModifiedDateColumnName domain property.
		/// Determines the name of the modified date field
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.nHydrateModel/ModifiedDateColumnName.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.nHydrateModel/ModifiedDateColumnName.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.nHydrateModel/ModifiedDateColumnName.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("ModifiedDate")]
		[DslModeling::DomainObjectId("c9898612-ec74-4afc-904a-fab3e0b7a132")]
		public virtual global::System.String ModifiedDateColumnName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return modifiedDateColumnNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ModifiedDateColumnNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the nHydrateModel.ModifiedDateColumnName domain property.
		/// </summary>
		internal sealed partial class ModifiedDateColumnNamePropertyHandler : DslModeling::DomainPropertyValueHandler<nHydrateModelBase, global::System.String>
		{
			private ModifiedDateColumnNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the nHydrateModel.ModifiedDateColumnName domain property value handler.
			/// </summary>
			public static readonly ModifiedDateColumnNamePropertyHandler Instance = new ModifiedDateColumnNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the nHydrateModel.ModifiedDateColumnName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ModifiedDateColumnNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(nHydrateModelBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.ModifiedDateColumnName;
				//return element.GetValue<global::System.String>("ModifiedDateColumnName", element.modifiedDateColumnNamePropertyStorage);
				//return element.modifiedDateColumnNamePropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(nHydrateModelBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.modifiedDateColumnNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("nHydrateModel"));
				}
			}
		}
		
		#endregion
		#region ModifiedByColumnName domain property code
		
		/// <summary>
		/// ModifiedByColumnName domain property Id.
		/// </summary>
		public static readonly global::System.Guid ModifiedByColumnNameDomainPropertyId = new global::System.Guid(0xc3940874, 0x169f, 0x44ff, 0x92, 0x6e, 0x68, 0x0f, 0xeb, 0xb2, 0xc8, 0xf1);
		
		/// <summary>
		/// Storage for ModifiedByColumnName
		/// </summary>
		private global::System.String modifiedByColumnNamePropertyStorage = "ModifiedBy";
		
		/// <summary>
		/// Gets or sets the value of ModifiedByColumnName domain property.
		/// Determines the name of the modified by field
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.nHydrateModel/ModifiedByColumnName.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.nHydrateModel/ModifiedByColumnName.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.nHydrateModel/ModifiedByColumnName.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("ModifiedBy")]
		[DslModeling::DomainObjectId("c3940874-169f-44ff-926e-680febb2c8f1")]
		public virtual global::System.String ModifiedByColumnName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return modifiedByColumnNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ModifiedByColumnNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the nHydrateModel.ModifiedByColumnName domain property.
		/// </summary>
		internal sealed partial class ModifiedByColumnNamePropertyHandler : DslModeling::DomainPropertyValueHandler<nHydrateModelBase, global::System.String>
		{
			private ModifiedByColumnNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the nHydrateModel.ModifiedByColumnName domain property value handler.
			/// </summary>
			public static readonly ModifiedByColumnNamePropertyHandler Instance = new ModifiedByColumnNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the nHydrateModel.ModifiedByColumnName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ModifiedByColumnNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(nHydrateModelBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.ModifiedByColumnName;
				//return element.GetValue<global::System.String>("ModifiedByColumnName", element.modifiedByColumnNamePropertyStorage);
				//return element.modifiedByColumnNamePropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(nHydrateModelBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.modifiedByColumnNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("nHydrateModel"));
				}
			}
		}
		
		#endregion
		#region TimestampColumnName domain property code
		
		/// <summary>
		/// TimestampColumnName domain property Id.
		/// </summary>
		public static readonly global::System.Guid TimestampColumnNameDomainPropertyId = new global::System.Guid(0xeaf7be21, 0xe695, 0x48b8, 0x96, 0xb3, 0xe1, 0xac, 0xe1, 0x13, 0x9a, 0xab);
		
		/// <summary>
		/// Storage for TimestampColumnName
		/// </summary>
		private global::System.String timestampColumnNamePropertyStorage = "Timestamp";
		
		/// <summary>
		/// Gets or sets the value of TimestampColumnName domain property.
		/// Determines the name of the timestamp column
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.nHydrateModel/TimestampColumnName.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.nHydrateModel/TimestampColumnName.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.nHydrateModel/TimestampColumnName.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("Timestamp")]
		[DslModeling::DomainObjectId("eaf7be21-e695-48b8-96b3-e1ace1139aab")]
		public virtual global::System.String TimestampColumnName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return timestampColumnNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TimestampColumnNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the nHydrateModel.TimestampColumnName domain property.
		/// </summary>
		internal sealed partial class TimestampColumnNamePropertyHandler : DslModeling::DomainPropertyValueHandler<nHydrateModelBase, global::System.String>
		{
			private TimestampColumnNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the nHydrateModel.TimestampColumnName domain property value handler.
			/// </summary>
			public static readonly TimestampColumnNamePropertyHandler Instance = new TimestampColumnNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the nHydrateModel.TimestampColumnName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TimestampColumnNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(nHydrateModelBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.TimestampColumnName;
				//return element.GetValue<global::System.String>("TimestampColumnName", element.timestampColumnNamePropertyStorage);
				//return element.timestampColumnNamePropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(nHydrateModelBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.timestampColumnNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("nHydrateModel"));
				}
			}
		}
		
		#endregion
		#region GrantUser domain property code
		
		/// <summary>
		/// GrantUser domain property Id.
		/// </summary>
		public static readonly global::System.Guid GrantUserDomainPropertyId = new global::System.Guid(0x04550abb, 0x3bfc, 0x4787, 0x90, 0x64, 0x85, 0xbf, 0xbe, 0x9c, 0xd4, 0x8e);
		
		/// <summary>
		/// Storage for GrantUser
		/// </summary>
		private global::System.String grantUserPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of GrantUser domain property.
		/// Determines the database user to grant access permissions to for database objects
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.nHydrateModel/GrantUser.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.nHydrateModel/GrantUser.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.nHydrateModel/GrantUser.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("04550abb-3bfc-4787-9064-85bfbe9cd48e")]
		public virtual global::System.String GrantUser
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return grantUserPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				GrantUserPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the nHydrateModel.GrantUser domain property.
		/// </summary>
		internal sealed partial class GrantUserPropertyHandler : DslModeling::DomainPropertyValueHandler<nHydrateModelBase, global::System.String>
		{
			private GrantUserPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the nHydrateModel.GrantUser domain property value handler.
			/// </summary>
			public static readonly GrantUserPropertyHandler Instance = new GrantUserPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the nHydrateModel.GrantUser domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return GrantUserDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(nHydrateModelBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.GrantUser;
				//return element.GetValue<global::System.String>("GrantUser", element.grantUserPropertyStorage);
				//return element.grantUserPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(nHydrateModelBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.grantUserPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("nHydrateModel"));
				}
			}
		}
		
		#endregion
		#region TransformNames domain property code
		
		/// <summary>
		/// TransformNames domain property Id.
		/// </summary>
		public static readonly global::System.Guid TransformNamesDomainPropertyId = new global::System.Guid(0xf4344b62, 0x7cd9, 0x4937, 0xb0, 0x7a, 0x70, 0x56, 0xd7, 0x2f, 0xc1, 0xfa);
		
		/// <summary>
		/// Storage for TransformNames
		/// </summary>
		private global::System.Boolean transformNamesPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of TransformNames domain property.
		/// Determines if all tokens are transformed from a lower case/undescore format to
		/// title case tokens on generation
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.nHydrateModel/TransformNames.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.nHydrateModel/TransformNames.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.nHydrateModel/TransformNames.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("f4344b62-7cd9-4937-b07a-7056d72fc1fa")]
		public virtual global::System.Boolean TransformNames
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return transformNamesPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TransformNamesPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the nHydrateModel.TransformNames domain property.
		/// </summary>
		internal sealed partial class TransformNamesPropertyHandler : DslModeling::DomainPropertyValueHandler<nHydrateModelBase, global::System.Boolean>
		{
			private TransformNamesPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the nHydrateModel.TransformNames domain property value handler.
			/// </summary>
			public static readonly TransformNamesPropertyHandler Instance = new TransformNamesPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the nHydrateModel.TransformNames domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TransformNamesDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(nHydrateModelBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.TransformNames;
				//return element.GetValue<global::System.Boolean>("TransformNames", element.transformNamesPropertyStorage);
				//return element.transformNamesPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(nHydrateModelBase element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.transformNamesPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("nHydrateModel"));
				}
			}
		}
		
		#endregion
		#region UseModules domain property code
		
		/// <summary>
		/// UseModules domain property Id.
		/// </summary>
		public static readonly global::System.Guid UseModulesDomainPropertyId = new global::System.Guid(0x9e140ef2, 0x050f, 0x4fe9, 0xb0, 0x14, 0x8d, 0x0d, 0xa9, 0xf5, 0xd2, 0x2e);
		
		/// <summary>
		/// Storage for UseModules
		/// </summary>
		private global::System.Boolean useModulesPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of UseModules domain property.
		/// Determines if generation will be based on modules
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.nHydrateModel/UseModules.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.nHydrateModel/UseModules.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.nHydrateModel/UseModules.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("9e140ef2-050f-4fe9-b014-8d0da9f5d22e")]
		public virtual global::System.Boolean UseModules
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return useModulesPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				UseModulesPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the nHydrateModel.UseModules domain property.
		/// </summary>
		internal sealed partial class UseModulesPropertyHandler : DslModeling::DomainPropertyValueHandler<nHydrateModelBase, global::System.Boolean>
		{
			private UseModulesPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the nHydrateModel.UseModules domain property value handler.
			/// </summary>
			public static readonly UseModulesPropertyHandler Instance = new UseModulesPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the nHydrateModel.UseModules domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return UseModulesDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(nHydrateModelBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.UseModules;
				//return element.GetValue<global::System.Boolean>("UseModules", element.useModulesPropertyStorage);
				//return element.useModulesPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(nHydrateModelBase element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.useModulesPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("nHydrateModel"));
				}
			}
		}
		
		#endregion
		#region ShowViews domain property code
		
		/// <summary>
		/// ShowViews domain property Id.
		/// </summary>
		public static readonly global::System.Guid ShowViewsDomainPropertyId = new global::System.Guid(0x7eccc5be, 0x839a, 0x41a9, 0xb1, 0x87, 0x08, 0x93, 0xeb, 0x0f, 0x3e, 0xa9);
		
		/// <summary>
		/// Storage for ShowViews
		/// </summary>
		private global::System.Boolean showViewsPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of ShowViews domain property.
		/// Determines if views are visible on the diagram
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.nHydrateModel/ShowViews.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.nHydrateModel/ShowViews.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.nHydrateModel/ShowViews.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("7eccc5be-839a-41a9-b187-0893eb0f3ea9")]
		public virtual global::System.Boolean ShowViews
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return showViewsPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ShowViewsPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the nHydrateModel.ShowViews domain property.
		/// </summary>
		internal sealed partial class ShowViewsPropertyHandler : DslModeling::DomainPropertyValueHandler<nHydrateModelBase, global::System.Boolean>
		{
			private ShowViewsPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the nHydrateModel.ShowViews domain property value handler.
			/// </summary>
			public static readonly ShowViewsPropertyHandler Instance = new ShowViewsPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the nHydrateModel.ShowViews domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ShowViewsDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(nHydrateModelBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.ShowViews;
				//return element.GetValue<global::System.Boolean>("ShowViews", element.showViewsPropertyStorage);
				//return element.showViewsPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(nHydrateModelBase element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.showViewsPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("nHydrateModel"));
				}
			}
		}
		
		#endregion
		#region ShowStoredProcedures domain property code
		
		/// <summary>
		/// ShowStoredProcedures domain property Id.
		/// </summary>
		public static readonly global::System.Guid ShowStoredProceduresDomainPropertyId = new global::System.Guid(0x2a51cfa1, 0x07fc, 0x4ead, 0x81, 0x2a, 0x9a, 0x77, 0x41, 0xb5, 0xcb, 0xde);
		
		/// <summary>
		/// Storage for ShowStoredProcedures
		/// </summary>
		private global::System.Boolean showStoredProceduresPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of ShowStoredProcedures domain property.
		/// Determines if stored procedures are visible on the diagram
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.nHydrateModel/ShowStoredProcedures.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.nHydrateModel/ShowStoredProcedures.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.nHydrateModel/ShowStoredProcedures.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("2a51cfa1-07fc-4ead-812a-9a7741b5cbde")]
		public virtual global::System.Boolean ShowStoredProcedures
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return showStoredProceduresPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ShowStoredProceduresPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the nHydrateModel.ShowStoredProcedures domain property.
		/// </summary>
		internal sealed partial class ShowStoredProceduresPropertyHandler : DslModeling::DomainPropertyValueHandler<nHydrateModelBase, global::System.Boolean>
		{
			private ShowStoredProceduresPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the nHydrateModel.ShowStoredProcedures domain property value handler.
			/// </summary>
			public static readonly ShowStoredProceduresPropertyHandler Instance = new ShowStoredProceduresPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the nHydrateModel.ShowStoredProcedures domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ShowStoredProceduresDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(nHydrateModelBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.ShowStoredProcedures;
				//return element.GetValue<global::System.Boolean>("ShowStoredProcedures", element.showStoredProceduresPropertyStorage);
				//return element.showStoredProceduresPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(nHydrateModelBase element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.showStoredProceduresPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("nHydrateModel"));
				}
			}
		}
		
		#endregion
		#region ShowFunctions domain property code
		
		/// <summary>
		/// ShowFunctions domain property Id.
		/// </summary>
		public static readonly global::System.Guid ShowFunctionsDomainPropertyId = new global::System.Guid(0x9df51744, 0xb095, 0x46bc, 0x84, 0x0e, 0xb9, 0xde, 0x79, 0xf3, 0x1b, 0x36);
		
		/// <summary>
		/// Storage for ShowFunctions
		/// </summary>
		private global::System.Boolean showFunctionsPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of ShowFunctions domain property.
		/// Determines if functions are visible on the diagram
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.nHydrateModel/ShowFunctions.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.nHydrateModel/ShowFunctions.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.nHydrateModel/ShowFunctions.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("9df51744-b095-46bc-840e-b9de79f31b36")]
		public virtual global::System.Boolean ShowFunctions
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return showFunctionsPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ShowFunctionsPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the nHydrateModel.ShowFunctions domain property.
		/// </summary>
		internal sealed partial class ShowFunctionsPropertyHandler : DslModeling::DomainPropertyValueHandler<nHydrateModelBase, global::System.Boolean>
		{
			private ShowFunctionsPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the nHydrateModel.ShowFunctions domain property value handler.
			/// </summary>
			public static readonly ShowFunctionsPropertyHandler Instance = new ShowFunctionsPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the nHydrateModel.ShowFunctions domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ShowFunctionsDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(nHydrateModelBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.ShowFunctions;
				//return element.GetValue<global::System.Boolean>("ShowFunctions", element.showFunctionsPropertyStorage);
				//return element.showFunctionsPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(nHydrateModelBase element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.showFunctionsPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("nHydrateModel"));
				}
			}
		}
		
		#endregion
		#region Collate domain property code
		
		/// <summary>
		/// Collate domain property Id.
		/// </summary>
		public static readonly global::System.Guid CollateDomainPropertyId = new global::System.Guid(0xb677c102, 0x9e9a, 0x4944, 0x81, 0xe2, 0x58, 0x02, 0x9d, 0xcf, 0x46, 0x67);
		
		/// <summary>
		/// Storage for Collate
		/// </summary>
		private global::System.String collatePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Collate domain property.
		/// Determines the database collation
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.nHydrateModel/Collate.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.nHydrateModel/Collate.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.nHydrateModel/Collate.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("b677c102-9e9a-4944-81e2-58029dcf4667")]
		public virtual global::System.String Collate
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return collatePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				CollatePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the nHydrateModel.Collate domain property.
		/// </summary>
		internal sealed partial class CollatePropertyHandler : DslModeling::DomainPropertyValueHandler<nHydrateModelBase, global::System.String>
		{
			private CollatePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the nHydrateModel.Collate domain property value handler.
			/// </summary>
			public static readonly CollatePropertyHandler Instance = new CollatePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the nHydrateModel.Collate domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return CollateDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(nHydrateModelBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.Collate;
				//return element.GetValue<global::System.String>("Collate", element.collatePropertyStorage);
				//return element.collatePropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(nHydrateModelBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.collatePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("nHydrateModel"));
				}
			}
		}
		
		#endregion
		#region ModelToDisk domain property code
		
		/// <summary>
		/// ModelToDisk domain property Id.
		/// </summary>
		public static readonly global::System.Guid ModelToDiskDomainPropertyId = new global::System.Guid(0x6fbe9eae, 0xbebb, 0x4ede, 0xb0, 0xdf, 0x3f, 0x8e, 0xa4, 0x15, 0x36, 0x33);
		
		/// <summary>
		/// Storage for ModelToDisk
		/// </summary>
		private global::System.Boolean modelToDiskPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of ModelToDisk domain property.
		/// Determines if model objects are duplicated on disk for easy editing
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.nHydrateModel/ModelToDisk.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.nHydrateModel/ModelToDisk.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.nHydrateModel/ModelToDisk.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("6fbe9eae-bebb-4ede-b0df-3f8ea4153633")]
		public virtual global::System.Boolean ModelToDisk
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return modelToDiskPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ModelToDiskPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the nHydrateModel.ModelToDisk domain property.
		/// </summary>
		internal sealed partial class ModelToDiskPropertyHandler : DslModeling::DomainPropertyValueHandler<nHydrateModelBase, global::System.Boolean>
		{
			private ModelToDiskPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the nHydrateModel.ModelToDisk domain property value handler.
			/// </summary>
			public static readonly ModelToDiskPropertyHandler Instance = new ModelToDiskPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the nHydrateModel.ModelToDisk domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ModelToDiskDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(nHydrateModelBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.ModelToDisk;
				//return element.GetValue<global::System.Boolean>("ModelToDisk", element.modelToDiskPropertyStorage);
				//return element.modelToDiskPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(nHydrateModelBase element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.modelToDiskPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("nHydrateModel"));
				}
			}
		}
		
		#endregion
		#region MaxPrecedenceOrder domain property code
		
		/// <summary>
		/// MaxPrecedenceOrder domain property Id.
		/// </summary>
		public static readonly global::System.Guid MaxPrecedenceOrderDomainPropertyId = new global::System.Guid(0xd45a19f0, 0xde09, 0x44a9, 0x84, 0x0e, 0x0a, 0x03, 0x20, 0x2a, 0xc8, 0x7e);
		
		/// <summary>
		/// Storage for MaxPrecedenceOrder
		/// </summary>
		private global::System.Int32 maxPrecedenceOrderPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of MaxPrecedenceOrder domain property.
		/// Determines the last used precedence for model objects used for installer
		/// generation
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.nHydrateModel/MaxPrecedenceOrder.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.nHydrateModel/MaxPrecedenceOrder.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.nHydrateModel/MaxPrecedenceOrder.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainObjectId("d45a19f0-de09-44a9-840e-0a03202ac87e")]
		public virtual global::System.Int32 MaxPrecedenceOrder
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return maxPrecedenceOrderPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				MaxPrecedenceOrderPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the nHydrateModel.MaxPrecedenceOrder domain property.
		/// </summary>
		internal sealed partial class MaxPrecedenceOrderPropertyHandler : DslModeling::DomainPropertyValueHandler<nHydrateModelBase, global::System.Int32>
		{
			private MaxPrecedenceOrderPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the nHydrateModel.MaxPrecedenceOrder domain property value handler.
			/// </summary>
			public static readonly MaxPrecedenceOrderPropertyHandler Instance = new MaxPrecedenceOrderPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the nHydrateModel.MaxPrecedenceOrder domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return MaxPrecedenceOrderDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Int32 GetValue(nHydrateModelBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.MaxPrecedenceOrder;
				//return element.GetValue<global::System.Int32>("MaxPrecedenceOrder", element.maxPrecedenceOrderPropertyStorage);
				//return element.maxPrecedenceOrderPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(nHydrateModelBase element, global::System.Int32 newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Int32 oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.maxPrecedenceOrderPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("nHydrateModel"));
				}
			}
		}
		
		#endregion
		#region ModelVersion domain property code
		
		/// <summary>
		/// ModelVersion domain property Id.
		/// </summary>
		public static readonly global::System.Guid ModelVersionDomainPropertyId = new global::System.Guid(0xcfac3b29, 0x311d, 0x4da5, 0x8d, 0x93, 0xbb, 0x44, 0x22, 0x83, 0xb5, 0x1f);
		
		/// <summary>
		/// Storage for ModelVersion
		/// </summary>
		private global::System.String modelVersionPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of ModelVersion domain property.
		/// Determines the version of the model. Used for tracking changes and provides an
		/// upgrade path for older models
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.nHydrateModel/ModelVersion.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.nHydrateModel/ModelVersion.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.nHydrateModel/ModelVersion.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("cfac3b29-311d-4da5-8d93-bb442283b51f")]
		public virtual global::System.String ModelVersion
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return modelVersionPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ModelVersionPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the nHydrateModel.ModelVersion domain property.
		/// </summary>
		internal sealed partial class ModelVersionPropertyHandler : DslModeling::DomainPropertyValueHandler<nHydrateModelBase, global::System.String>
		{
			private ModelVersionPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the nHydrateModel.ModelVersion domain property value handler.
			/// </summary>
			public static readonly ModelVersionPropertyHandler Instance = new ModelVersionPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the nHydrateModel.ModelVersion domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ModelVersionDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(nHydrateModelBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.ModelVersion;
				//return element.GetValue<global::System.String>("ModelVersion", element.modelVersionPropertyStorage);
				//return element.modelVersionPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(nHydrateModelBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.modelVersionPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("nHydrateModel"));
				}
			}
		}
		
		#endregion
		#region CompanyURL domain property code
		
		/// <summary>
		/// CompanyURL domain property Id.
		/// </summary>
		public static readonly global::System.Guid CompanyURLDomainPropertyId = new global::System.Guid(0xe6f9583a, 0x48f9, 0x4747, 0x95, 0xef, 0x6e, 0xda, 0xf2, 0x97, 0x20, 0x6b);
		
		/// <summary>
		/// Storage for CompanyURL
		/// </summary>
		private global::System.String companyURLPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of CompanyURL domain property.
		/// The URL of the company
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.nHydrateModel/CompanyURL.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.nHydrateModel/CompanyURL.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.nHydrateModel/CompanyURL.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("e6f9583a-48f9-4747-95ef-6edaf297206b")]
		public virtual global::System.String CompanyURL
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return companyURLPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				CompanyURLPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the nHydrateModel.CompanyURL domain property.
		/// </summary>
		internal sealed partial class CompanyURLPropertyHandler : DslModeling::DomainPropertyValueHandler<nHydrateModelBase, global::System.String>
		{
			private CompanyURLPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the nHydrateModel.CompanyURL domain property value handler.
			/// </summary>
			public static readonly CompanyURLPropertyHandler Instance = new CompanyURLPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the nHydrateModel.CompanyURL domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return CompanyURLDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(nHydrateModelBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.CompanyURL;
				//return element.GetValue<global::System.String>("CompanyURL", element.companyURLPropertyStorage);
				//return element.companyURLPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(nHydrateModelBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.companyURLPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("nHydrateModel"));
				}
			}
		}
		
		#endregion
		#region CompanyPhone domain property code
		
		/// <summary>
		/// CompanyPhone domain property Id.
		/// </summary>
		public static readonly global::System.Guid CompanyPhoneDomainPropertyId = new global::System.Guid(0x4bfc4208, 0x7582, 0x4e3d, 0xa0, 0x1a, 0x7d, 0x20, 0xa1, 0xc3, 0xca, 0xaa);
		
		/// <summary>
		/// Storage for CompanyPhone
		/// </summary>
		private global::System.String companyPhonePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of CompanyPhone domain property.
		/// The public phone numbner of the company
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.nHydrateModel/CompanyPhone.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.nHydrateModel/CompanyPhone.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.nHydrateModel/CompanyPhone.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("4bfc4208-7582-4e3d-a01a-7d20a1c3caaa")]
		public virtual global::System.String CompanyPhone
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return companyPhonePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				CompanyPhonePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the nHydrateModel.CompanyPhone domain property.
		/// </summary>
		internal sealed partial class CompanyPhonePropertyHandler : DslModeling::DomainPropertyValueHandler<nHydrateModelBase, global::System.String>
		{
			private CompanyPhonePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the nHydrateModel.CompanyPhone domain property value handler.
			/// </summary>
			public static readonly CompanyPhonePropertyHandler Instance = new CompanyPhonePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the nHydrateModel.CompanyPhone domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return CompanyPhoneDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(nHydrateModelBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.CompanyPhone;
				//return element.GetValue<global::System.String>("CompanyPhone", element.companyPhonePropertyStorage);
				//return element.companyPhonePropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(nHydrateModelBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.companyPhonePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("nHydrateModel"));
				}
			}
		}
		
		#endregion
		#region UseGeneratedCRUD domain property code
		
		/// <summary>
		/// UseGeneratedCRUD domain property Id.
		/// </summary>
		public static readonly global::System.Guid UseGeneratedCRUDDomainPropertyId = new global::System.Guid(0x4138a1c1, 0x4bbf, 0x4195, 0xab, 0xa3, 0x1c, 0x32, 0xaa, 0xd5, 0x1a, 0x0e);
		
		/// <summary>
		/// Storage for UseGeneratedCRUD
		/// </summary>
		private global::System.Boolean useGeneratedCRUDPropertyStorage = true;
		
		/// <summary>
		/// Gets or sets the value of UseGeneratedCRUD domain property.
		/// Determines if generated stored procedures are used for the CRUD layer.
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.nHydrateModel/UseGeneratedCRUD.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.nHydrateModel/UseGeneratedCRUD.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.nHydrateModel/UseGeneratedCRUD.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(true)]
		[DslModeling::DomainObjectId("4138a1c1-4bbf-4195-aba3-1c32aad51a0e")]
		public virtual global::System.Boolean UseGeneratedCRUD
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return useGeneratedCRUDPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				UseGeneratedCRUDPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the nHydrateModel.UseGeneratedCRUD domain property.
		/// </summary>
		internal sealed partial class UseGeneratedCRUDPropertyHandler : DslModeling::DomainPropertyValueHandler<nHydrateModelBase, global::System.Boolean>
		{
			private UseGeneratedCRUDPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the nHydrateModel.UseGeneratedCRUD domain property value handler.
			/// </summary>
			public static readonly UseGeneratedCRUDPropertyHandler Instance = new UseGeneratedCRUDPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the nHydrateModel.UseGeneratedCRUD domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return UseGeneratedCRUDDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(nHydrateModelBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.UseGeneratedCRUD;
				//return element.GetValue<global::System.Boolean>("UseGeneratedCRUD", element.useGeneratedCRUDPropertyStorage);
				//return element.useGeneratedCRUDPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(nHydrateModelBase element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.useGeneratedCRUDPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("nHydrateModel"));
				}
			}
		}
		
		#endregion
		#region DiagramVisibility domain property code
		
		/// <summary>
		/// DiagramVisibility domain property Id.
		/// </summary>
		public static readonly global::System.Guid DiagramVisibilityDomainPropertyId = new global::System.Guid(0xceb0f015, 0xea20, 0x4762, 0xa3, 0x24, 0xe3, 0xc7, 0xfc, 0x56, 0x7b, 0x0c);
		
		/// <summary>
		/// Storage for DiagramVisibility
		/// </summary>
		private VisibilityTypeConstants diagramVisibilityPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of DiagramVisibility domain property.
		/// Determines which objects are visible on the diagram
		/// </summary>
		[System.ComponentModel.TypeConverter(typeof(nHydrate2.Dsl.Design.Converters.VisibilityTypeEnumConverter))]
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.nHydrateModel/DiagramVisibility.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.nHydrateModel/DiagramVisibility.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.nHydrateModel/DiagramVisibility.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("ceb0f015-ea20-4762-a324-e3c7fc567b0c")]
		public virtual VisibilityTypeConstants DiagramVisibility
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return diagramVisibilityPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DiagramVisibilityPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the nHydrateModel.DiagramVisibility domain property.
		/// </summary>
		internal sealed partial class DiagramVisibilityPropertyHandler : DslModeling::DomainPropertyValueHandler<nHydrateModelBase, VisibilityTypeConstants>
		{
			private DiagramVisibilityPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the nHydrateModel.DiagramVisibility domain property value handler.
			/// </summary>
			public static readonly DiagramVisibilityPropertyHandler Instance = new DiagramVisibilityPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the nHydrateModel.DiagramVisibility domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DiagramVisibilityDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed VisibilityTypeConstants GetValue(nHydrateModelBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.DiagramVisibility;
				//return element.GetValue<VisibilityTypeConstants>("DiagramVisibility", element.diagramVisibilityPropertyStorage);
				//return element.diagramVisibilityPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(nHydrateModelBase element, VisibilityTypeConstants newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				VisibilityTypeConstants oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.diagramVisibilityPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("nHydrateModel"));
				}
			}
		}
		
		#endregion
		#region SupportedPlatforms domain property code
		
		/// <summary>
		/// SupportedPlatforms domain property Id.
		/// </summary>
		public static readonly global::System.Guid SupportedPlatformsDomainPropertyId = new global::System.Guid(0xe88f80f4, 0x31ef, 0x4d89, 0x9c, 0x9b, 0x78, 0xb0, 0x01, 0x57, 0xd2, 0x02);
		
		/// <summary>
		/// Storage for SupportedPlatforms
		/// </summary>
		private DatabasePlatformConstants supportedPlatformsPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of SupportedPlatforms domain property.
		/// Determines the platforms supported by the generation output
		/// </summary>
		[System.ComponentModel.TypeConverter(typeof(nHydrate2.Dsl.Design.Converters.DatabasePlatformEnumConverter))]
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.nHydrateModel/SupportedPlatforms.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.nHydrateModel/SupportedPlatforms.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.nHydrateModel/SupportedPlatforms.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("e88f80f4-31ef-4d89-9c9b-78b00157d202")]
		public virtual DatabasePlatformConstants SupportedPlatforms
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return supportedPlatformsPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				SupportedPlatformsPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the nHydrateModel.SupportedPlatforms domain property.
		/// </summary>
		internal sealed partial class SupportedPlatformsPropertyHandler : DslModeling::DomainPropertyValueHandler<nHydrateModelBase, DatabasePlatformConstants>
		{
			private SupportedPlatformsPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the nHydrateModel.SupportedPlatforms domain property value handler.
			/// </summary>
			public static readonly SupportedPlatformsPropertyHandler Instance = new SupportedPlatformsPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the nHydrateModel.SupportedPlatforms domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return SupportedPlatformsDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed DatabasePlatformConstants GetValue(nHydrateModelBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.SupportedPlatforms;
				//return element.GetValue<DatabasePlatformConstants>("SupportedPlatforms", element.supportedPlatformsPropertyStorage);
				//return element.supportedPlatformsPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(nHydrateModelBase element, DatabasePlatformConstants newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				DatabasePlatformConstants oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.supportedPlatformsPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("nHydrateModel"));
				}
			}
		}
		
		#endregion
		#region OutputTarget domain property code
		
		/// <summary>
		/// OutputTarget domain property Id.
		/// </summary>
		public static readonly global::System.Guid OutputTargetDomainPropertyId = new global::System.Guid(0xbe71ee12, 0x7759, 0x4612, 0x93, 0x0e, 0xe5, 0x34, 0x30, 0xfe, 0xbf, 0xb8);
		
		/// <summary>
		/// Storage for OutputTarget
		/// </summary>
		private global::System.String outputTargetPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of OutputTarget domain property.
		/// The target location for generated projects
		/// </summary>
		[System.ComponentModel.Editor(typeof(nHydrate2.Dsl.Design.Editors.OutputTargetEditor), typeof(System.Drawing.Design.UITypeEditor))]
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.nHydrateModel/OutputTarget.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.nHydrateModel/OutputTarget.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.nHydrateModel/OutputTarget.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("be71ee12-7759-4612-930e-e53430febfb8")]
		public virtual global::System.String OutputTarget
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return outputTargetPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				OutputTargetPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the nHydrateModel.OutputTarget domain property.
		/// </summary>
		internal sealed partial class OutputTargetPropertyHandler : DslModeling::DomainPropertyValueHandler<nHydrateModelBase, global::System.String>
		{
			private OutputTargetPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the nHydrateModel.OutputTarget domain property value handler.
			/// </summary>
			public static readonly OutputTargetPropertyHandler Instance = new OutputTargetPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the nHydrateModel.OutputTarget domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return OutputTargetDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(nHydrateModelBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.OutputTarget;
				//return element.GetValue<global::System.String>("OutputTarget", element.outputTargetPropertyStorage);
				//return element.outputTargetPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(nHydrateModelBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.outputTargetPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("nHydrateModel"));
				}
			}
		}
		
		#endregion
		#region TenantPrefix domain property code
		
		/// <summary>
		/// TenantPrefix domain property Id.
		/// </summary>
		public static readonly global::System.Guid TenantPrefixDomainPropertyId = new global::System.Guid(0x8d907fa0, 0x9318, 0x41e3, 0x8f, 0xcf, 0xd9, 0xe1, 0x54, 0x11, 0x25, 0x97);
		
		/// <summary>
		/// Storage for TenantPrefix
		/// </summary>
		private global::System.String tenantPrefixPropertyStorage = "__vw_tenant";
		
		/// <summary>
		/// Gets or sets the value of TenantPrefix domain property.
		/// Determines the prefix for generated views that map to tenant tables
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.nHydrateModel/TenantPrefix.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.nHydrateModel/TenantPrefix.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.nHydrateModel/TenantPrefix.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("__vw_tenant")]
		[DslModeling::DomainObjectId("8d907fa0-9318-41e3-8fcf-d9e154112597")]
		public virtual global::System.String TenantPrefix
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return tenantPrefixPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TenantPrefixPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the nHydrateModel.TenantPrefix domain property.
		/// </summary>
		internal sealed partial class TenantPrefixPropertyHandler : DslModeling::DomainPropertyValueHandler<nHydrateModelBase, global::System.String>
		{
			private TenantPrefixPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the nHydrateModel.TenantPrefix domain property value handler.
			/// </summary>
			public static readonly TenantPrefixPropertyHandler Instance = new TenantPrefixPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the nHydrateModel.TenantPrefix domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TenantPrefixDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(nHydrateModelBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.TenantPrefix;
				//return element.GetValue<global::System.String>("TenantPrefix", element.tenantPrefixPropertyStorage);
				//return element.tenantPrefixPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(nHydrateModelBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.tenantPrefixPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("nHydrateModel"));
				}
			}
		}
		
		#endregion
		#region TenantColumnName domain property code
		
		/// <summary>
		/// TenantColumnName domain property Id.
		/// </summary>
		public static readonly global::System.Guid TenantColumnNameDomainPropertyId = new global::System.Guid(0xfd3902ce, 0x3044, 0x47e2, 0xa3, 0x79, 0x88, 0x5c, 0x8e, 0x1a, 0x1a, 0x4d);
		
		/// <summary>
		/// Storage for TenantColumnName
		/// </summary>
		private global::System.String tenantColumnNamePropertyStorage = "__tenant_user";
		
		/// <summary>
		/// Gets or sets the value of TenantColumnName domain property.
		/// Determines the name of the column to hold tenant information for tenant tables
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.nHydrateModel/TenantColumnName.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.nHydrateModel/TenantColumnName.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.nHydrateModel/TenantColumnName.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("__tenant_user")]
		[DslModeling::DomainObjectId("fd3902ce-3044-47e2-a379-885c8e1a1a4d")]
		public virtual global::System.String TenantColumnName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return tenantColumnNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TenantColumnNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the nHydrateModel.TenantColumnName domain property.
		/// </summary>
		internal sealed partial class TenantColumnNamePropertyHandler : DslModeling::DomainPropertyValueHandler<nHydrateModelBase, global::System.String>
		{
			private TenantColumnNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the nHydrateModel.TenantColumnName domain property value handler.
			/// </summary>
			public static readonly TenantColumnNamePropertyHandler Instance = new TenantColumnNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the nHydrateModel.TenantColumnName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TenantColumnNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(nHydrateModelBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.TenantColumnName;
				//return element.GetValue<global::System.String>("TenantColumnName", element.tenantColumnNamePropertyStorage);
				//return element.tenantColumnNamePropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(nHydrateModelBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.tenantColumnNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("nHydrateModel"));
				}
			}
		}
		
		#endregion
		#region Entities opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Entities.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Entity> Entities
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Entity>, Entity>(global::nHydrate2.Dsl.nHydrateModelHasEntities.nHydrateModelDomainRoleId);
			}
		}
		#endregion
		#region StoredProcedures opposite domain role accessor
		
		/// <summary>
		/// Gets a list of StoredProcedures.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<StoredProcedure> StoredProcedures
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<StoredProcedure>, StoredProcedure>(global::nHydrate2.Dsl.nHydrateModelHasStoredProcedures.nHydrateModelDomainRoleId);
			}
		}
		#endregion
		#region Views opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Views.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<View> Views
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<View>, View>(global::nHydrate2.Dsl.nHydrateModelHasViews.nHydrateModelDomainRoleId);
			}
		}
		#endregion
		#region RelationFields opposite domain role accessor
		
		/// <summary>
		/// Gets a list of RelationFields.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<RelationField> RelationFields
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<RelationField>, RelationField>(global::nHydrate2.Dsl.nHydrateModelHasRelationFields.nHydrateModelDomainRoleId);
			}
		}
		#endregion
		#region Functions opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Functions.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Function> Functions
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Function>, Function>(global::nHydrate2.Dsl.nHydrateModelHasFunctions.nHydrateModelDomainRoleId);
			}
		}
		#endregion
		#region Modules opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Modules.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Module> Modules
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Module>, Module>(global::nHydrate2.Dsl.nHydrateModelHasModules.nHydrateModelDomainRoleId);
			}
		}
		#endregion
		#region RelationModules opposite domain role accessor
		
		/// <summary>
		/// Gets a list of RelationModules.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<RelationModule> RelationModules
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<RelationModule>, RelationModule>(global::nHydrate2.Dsl.nHydrateModelHasRelationModules.nHydrateModelDomainRoleId);
			}
		}
		#endregion
		#region ModelMetadata opposite domain role accessor
		
		/// <summary>
		/// Gets a list of ModelMetadata.
		/// Description for nHydrate2.Dsl.nHydrateModelHasModelMetadata.nHydrateModel
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ModelMetadata> ModelMetadata
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ModelMetadata>, ModelMetadata>(global::nHydrate2.Dsl.nHydrateModelHasModelMetadata.nHydrateModelDomainRoleId);
			}
		}
		#endregion
		#region IndexModules opposite domain role accessor
		
		/// <summary>
		/// Gets a list of IndexModules.
		/// Description for nHydrate2.Dsl.nHydrateModelHasIndexModules.nHydrateModel
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<IndexModule> IndexModules
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<IndexModule>, IndexModule>(global::nHydrate2.Dsl.nHydrateModelHasIndexModules.nHydrateModelDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::nHydrate2.Dsl.RelationModule.DomainClassId)) 
				{
					// Call custom method implemented in partial class
					return this.CanMergeRelationModule(rootElement, elementGroupPrototype);
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::nHydrate2.Dsl.Module.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::nHydrate2.Dsl.IndexModule.DomainClassId)) 
				{
					// Call custom method implemented in partial class
					return this.CanMergeIndexModule(rootElement, elementGroupPrototype);
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::nHydrate2.Dsl.ModelMetadata.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::nHydrate2.Dsl.Function.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::nHydrate2.Dsl.StoredProcedure.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::nHydrate2.Dsl.Entity.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::nHydrate2.Dsl.RelationField.DomainClassId)) 
				{
					// Call custom method implemented in partial class
					return this.CanMergeRelationField(rootElement, elementGroupPrototype);
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::nHydrate2.Dsl.View.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::nHydrate2.Dsl.RelationModule sourceRelationModule1 = sourceElement as global::nHydrate2.Dsl.RelationModule;
			if (sourceRelationModule1 != null)
			{
				// Create link for path nHydrateModelHasRelationModules.RelationModules
				this.RelationModules.Add(sourceRelationModule1);

				return;
			}
				
			global::nHydrate2.Dsl.Module sourceModule2 = sourceElement as global::nHydrate2.Dsl.Module;
			if (sourceModule2 != null)
			{
				// Create link for path nHydrateModelHasModules.Modules
				this.Modules.Add(sourceModule2);

				return;
			}
				
			global::nHydrate2.Dsl.IndexModule sourceIndexModule3 = sourceElement as global::nHydrate2.Dsl.IndexModule;
			if (sourceIndexModule3 != null)
			{
				// Create link for path nHydrateModelHasIndexModules.IndexModules
				this.IndexModules.Add(sourceIndexModule3);

				return;
			}
				
			global::nHydrate2.Dsl.ModelMetadata sourceModelMetadata4 = sourceElement as global::nHydrate2.Dsl.ModelMetadata;
			if (sourceModelMetadata4 != null)
			{
				// Create link for path nHydrateModelHasModelMetadata.ModelMetadata
				this.ModelMetadata.Add(sourceModelMetadata4);

				return;
			}
				
			global::nHydrate2.Dsl.Function sourceFunction5 = sourceElement as global::nHydrate2.Dsl.Function;
			if (sourceFunction5 != null)
			{
				// Create link for path nHydrateModelHasFunctions.Functions
				this.Functions.Add(sourceFunction5);

				return;
			}
				
			global::nHydrate2.Dsl.StoredProcedure sourceStoredProcedure6 = sourceElement as global::nHydrate2.Dsl.StoredProcedure;
			if (sourceStoredProcedure6 != null)
			{
				// Create link for path nHydrateModelHasStoredProcedures.StoredProcedures
				this.StoredProcedures.Add(sourceStoredProcedure6);

				return;
			}
				
			global::nHydrate2.Dsl.Entity sourceEntity7 = sourceElement as global::nHydrate2.Dsl.Entity;
			if (sourceEntity7 != null)
			{
				// Create link for path nHydrateModelHasEntities.Entities
				this.Entities.Add(sourceEntity7);

				return;
			}
				
			global::nHydrate2.Dsl.RelationField sourceRelationField8 = sourceElement as global::nHydrate2.Dsl.RelationField;
			if (sourceRelationField8 != null)
			{
				// Create link for path nHydrateModelHasRelationFields.RelationFields
				this.RelationFields.Add(sourceRelationField8);

				return;
			}
				
			global::nHydrate2.Dsl.View sourceView9 = sourceElement as global::nHydrate2.Dsl.View;
			if (sourceView9 != null)
			{
				// Create link for path nHydrateModelHasViews.Views
				this.Views.Add(sourceView9);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::nHydrate2.Dsl.RelationModule sourceRelationModule1 = sourceElement as global::nHydrate2.Dsl.RelationModule;
			if (sourceRelationModule1 != null)
			{
				// Delete link for path nHydrateModelHasRelationModules.RelationModules
				
				foreach (DslModeling::ElementLink link in global::nHydrate2.Dsl.nHydrateModelHasRelationModules.GetLinks((global::nHydrate2.Dsl.nHydrateModel)this, sourceRelationModule1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::nHydrate2.Dsl.nHydrateModelHasRelationModules.nHydrateModelDomainRoleId, global::nHydrate2.Dsl.nHydrateModelHasRelationModules.RelationModuleDomainRoleId);
				}

				return;
			}
				
			global::nHydrate2.Dsl.Module sourceModule2 = sourceElement as global::nHydrate2.Dsl.Module;
			if (sourceModule2 != null)
			{
				// Delete link for path nHydrateModelHasModules.Modules
				
				foreach (DslModeling::ElementLink link in global::nHydrate2.Dsl.nHydrateModelHasModules.GetLinks((global::nHydrate2.Dsl.nHydrateModel)this, sourceModule2))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::nHydrate2.Dsl.nHydrateModelHasModules.nHydrateModelDomainRoleId, global::nHydrate2.Dsl.nHydrateModelHasModules.ModuleDomainRoleId);
				}

				return;
			}
				
			global::nHydrate2.Dsl.IndexModule sourceIndexModule3 = sourceElement as global::nHydrate2.Dsl.IndexModule;
			if (sourceIndexModule3 != null)
			{
				// Delete link for path nHydrateModelHasIndexModules.IndexModules
				
				foreach (DslModeling::ElementLink link in global::nHydrate2.Dsl.nHydrateModelHasIndexModules.GetLinks((global::nHydrate2.Dsl.nHydrateModel)this, sourceIndexModule3))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::nHydrate2.Dsl.nHydrateModelHasIndexModules.nHydrateModelDomainRoleId, global::nHydrate2.Dsl.nHydrateModelHasIndexModules.IndexModuleDomainRoleId);
				}

				return;
			}
				
			global::nHydrate2.Dsl.ModelMetadata sourceModelMetadata4 = sourceElement as global::nHydrate2.Dsl.ModelMetadata;
			if (sourceModelMetadata4 != null)
			{
				// Delete link for path nHydrateModelHasModelMetadata.ModelMetadata
				
				foreach (DslModeling::ElementLink link in global::nHydrate2.Dsl.nHydrateModelHasModelMetadata.GetLinks((global::nHydrate2.Dsl.nHydrateModel)this, sourceModelMetadata4))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::nHydrate2.Dsl.nHydrateModelHasModelMetadata.nHydrateModelDomainRoleId, global::nHydrate2.Dsl.nHydrateModelHasModelMetadata.ModelMetadataDomainRoleId);
				}

				return;
			}
				
			global::nHydrate2.Dsl.Function sourceFunction5 = sourceElement as global::nHydrate2.Dsl.Function;
			if (sourceFunction5 != null)
			{
				// Delete link for path nHydrateModelHasFunctions.Functions
				
				foreach (DslModeling::ElementLink link in global::nHydrate2.Dsl.nHydrateModelHasFunctions.GetLinks((global::nHydrate2.Dsl.nHydrateModel)this, sourceFunction5))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::nHydrate2.Dsl.nHydrateModelHasFunctions.nHydrateModelDomainRoleId, global::nHydrate2.Dsl.nHydrateModelHasFunctions.FunctionDomainRoleId);
				}

				return;
			}
				
			global::nHydrate2.Dsl.StoredProcedure sourceStoredProcedure6 = sourceElement as global::nHydrate2.Dsl.StoredProcedure;
			if (sourceStoredProcedure6 != null)
			{
				// Delete link for path nHydrateModelHasStoredProcedures.StoredProcedures
				
				foreach (DslModeling::ElementLink link in global::nHydrate2.Dsl.nHydrateModelHasStoredProcedures.GetLinks((global::nHydrate2.Dsl.nHydrateModel)this, sourceStoredProcedure6))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::nHydrate2.Dsl.nHydrateModelHasStoredProcedures.nHydrateModelDomainRoleId, global::nHydrate2.Dsl.nHydrateModelHasStoredProcedures.StoredProcedureDomainRoleId);
				}

				return;
			}
				
			global::nHydrate2.Dsl.Entity sourceEntity7 = sourceElement as global::nHydrate2.Dsl.Entity;
			if (sourceEntity7 != null)
			{
				// Delete link for path nHydrateModelHasEntities.Entities
				
				foreach (DslModeling::ElementLink link in global::nHydrate2.Dsl.nHydrateModelHasEntities.GetLinks((global::nHydrate2.Dsl.nHydrateModel)this, sourceEntity7))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::nHydrate2.Dsl.nHydrateModelHasEntities.nHydrateModelDomainRoleId, global::nHydrate2.Dsl.nHydrateModelHasEntities.EntityDomainRoleId);
				}

				return;
			}
				
			global::nHydrate2.Dsl.RelationField sourceRelationField8 = sourceElement as global::nHydrate2.Dsl.RelationField;
			if (sourceRelationField8 != null)
			{
				// Delete link for path nHydrateModelHasRelationFields.RelationFields
				
				foreach (DslModeling::ElementLink link in global::nHydrate2.Dsl.nHydrateModelHasRelationFields.GetLinks((global::nHydrate2.Dsl.nHydrateModel)this, sourceRelationField8))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::nHydrate2.Dsl.nHydrateModelHasRelationFields.nHydrateModelDomainRoleId, global::nHydrate2.Dsl.nHydrateModelHasRelationFields.RelationFieldDomainRoleId);
				}

				return;
			}
				
			global::nHydrate2.Dsl.View sourceView9 = sourceElement as global::nHydrate2.Dsl.View;
			if (sourceView9 != null)
			{
				// Delete link for path nHydrateModelHasViews.Views
				
				foreach (DslModeling::ElementLink link in global::nHydrate2.Dsl.nHydrateModelHasViews.GetLinks((global::nHydrate2.Dsl.nHydrateModel)this, sourceView9))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::nHydrate2.Dsl.nHydrateModelHasViews.nHydrateModelDomainRoleId, global::nHydrate2.Dsl.nHydrateModelHasViews.ViewDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
	/// <summary>
	/// DomainClass nHydrateModel
	/// </summary>
	[global::System.CLSCompliant(true)]
			
	public partial class nHydrateModel : nHydrateModelBase
	{
		#region Constructors
		// Constructors were not generated for this class because it had HasCustomConstructor
		// set to true. Please provide the constructors below in a partial class.
		///// <summary>
		///// Constructor
		///// </summary>
		///// <param name="store">Store where new element is to be created.</param>
		///// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		//public nHydrateModel(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
		//	: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		//{
		//}
		//
		///// <summary>
		///// Constructor
		///// </summary>
		///// <param name="partition">Partition where new element is to be created.</param>
		///// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		//public nHydrateModel(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
		//	: base(partition, propertyAssignments)
		//{
		//}
		#endregion
	}
}
namespace nHydrate2.Dsl
{
	/// <summary>
	/// Double-derived base class for DomainClass Entity
	/// </summary>
	[DslDesign::DisplayNameResource("nHydrate2.Dsl.Entity.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("nHydrate2.Dsl.Entity.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::nHydrate2.Dsl.nHydrate2DomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("99e3c3f3-d9f6-4226-b914-b50a93434e4f")]
	public abstract partial class EntityBase : DslModeling::ModelElement, System.ComponentModel.INotifyPropertyChanged
	{
		#region INotifyPropertyChanged
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs e)
		{
			if (this.PropertyChanged != null)
				this.PropertyChanged(this, e);
		}
		#endregion
	
		#region Constructors, domain class Id
	
		/// <summary>
		/// Entity domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x99e3c3f3, 0xd9f6, 0x4226, 0xb9, 0x14, 0xb5, 0x0a, 0x93, 0x43, 0x4e, 0x4f);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected EntityBase(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x767a392d, 0xc773, 0x430a, 0xab, 0xbb, 0xe3, 0x21, 0x99, 0x3f, 0xc5, 0xde);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Determines the name of this entity
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.Entity/Name.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.Entity/Name.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.Entity/Name.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("767a392d-c773-430a-abbb-e321993fc5de")]
		public virtual global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Entity.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<EntityBase, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Entity.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Entity.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(EntityBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.Name;
				//return element.GetValue<global::System.String>("Name", element.namePropertyStorage);
				//return element.namePropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(EntityBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Entity"));
				}
			}
		}
		
		#endregion
		#region Summary domain property code
		
		/// <summary>
		/// Summary domain property Id.
		/// </summary>
		public static readonly global::System.Guid SummaryDomainPropertyId = new global::System.Guid(0x542415d5, 0xc314, 0x471a, 0xa4, 0x84, 0x11, 0x86, 0xae, 0x40, 0xcd, 0x25);
		
		/// <summary>
		/// Storage for Summary
		/// </summary>
		private global::System.String summaryPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Summary domain property.
		/// A summary of the entity
		/// </summary>
		[System.ComponentModel.Editor(typeof(System.ComponentModel.Design.MultilineStringEditor), typeof(System.Drawing.Design.UITypeEditor))]
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.Entity/Summary.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.Entity/Summary.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.Entity/Summary.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("542415d5-c314-471a-a484-1186ae40cd25")]
		public virtual global::System.String Summary
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return summaryPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				SummaryPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Entity.Summary domain property.
		/// </summary>
		internal sealed partial class SummaryPropertyHandler : DslModeling::DomainPropertyValueHandler<EntityBase, global::System.String>
		{
			private SummaryPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Entity.Summary domain property value handler.
			/// </summary>
			public static readonly SummaryPropertyHandler Instance = new SummaryPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Entity.Summary domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return SummaryDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(EntityBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.Summary;
				//return element.GetValue<global::System.String>("Summary", element.summaryPropertyStorage);
				//return element.summaryPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(EntityBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.summaryPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Entity"));
				}
			}
		}
		
		#endregion
		#region AllowAuditTracking domain property code
		
		/// <summary>
		/// AllowAuditTracking domain property Id.
		/// </summary>
		public static readonly global::System.Guid AllowAuditTrackingDomainPropertyId = new global::System.Guid(0xb01b66ac, 0x5a6b, 0x496b, 0x92, 0xe9, 0xa7, 0x2d, 0x8b, 0xbe, 0x3b, 0x2d);
		
		/// <summary>
		/// Storage for AllowAuditTracking
		/// </summary>
		private global::System.Boolean allowAuditTrackingPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of AllowAuditTracking domain property.
		/// Determines if there is a full audit trail for this entity
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.Entity/AllowAuditTracking.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.Entity/AllowAuditTracking.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.Entity/AllowAuditTracking.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("b01b66ac-5a6b-496b-92e9-a72d8bbe3b2d")]
		public virtual global::System.Boolean AllowAuditTracking
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return allowAuditTrackingPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				AllowAuditTrackingPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Entity.AllowAuditTracking domain property.
		/// </summary>
		internal sealed partial class AllowAuditTrackingPropertyHandler : DslModeling::DomainPropertyValueHandler<EntityBase, global::System.Boolean>
		{
			private AllowAuditTrackingPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Entity.AllowAuditTracking domain property value handler.
			/// </summary>
			public static readonly AllowAuditTrackingPropertyHandler Instance = new AllowAuditTrackingPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Entity.AllowAuditTracking domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return AllowAuditTrackingDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(EntityBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.AllowAuditTracking;
				//return element.GetValue<global::System.Boolean>("AllowAuditTracking", element.allowAuditTrackingPropertyStorage);
				//return element.allowAuditTrackingPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(EntityBase element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.allowAuditTrackingPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Entity"));
				}
			}
		}
		
		#endregion
		#region AllowCreateAudit domain property code
		
		/// <summary>
		/// AllowCreateAudit domain property Id.
		/// </summary>
		public static readonly global::System.Guid AllowCreateAuditDomainPropertyId = new global::System.Guid(0xe56a3e68, 0x5513, 0x499e, 0xa9, 0x33, 0x51, 0x10, 0x05, 0x7d, 0x2b, 0x1f);
		
		/// <summary>
		/// Storage for AllowCreateAudit
		/// </summary>
		private global::System.Boolean allowCreateAuditPropertyStorage = true;
		
		/// <summary>
		/// Gets or sets the value of AllowCreateAudit domain property.
		/// Determines if the fields 'CreatedBy' and 'CreateDate' are created
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.Entity/AllowCreateAudit.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.Entity/AllowCreateAudit.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.Entity/AllowCreateAudit.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(true)]
		[DslModeling::DomainObjectId("e56a3e68-5513-499e-a933-5110057d2b1f")]
		public virtual global::System.Boolean AllowCreateAudit
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return allowCreateAuditPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				AllowCreateAuditPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Entity.AllowCreateAudit domain property.
		/// </summary>
		internal sealed partial class AllowCreateAuditPropertyHandler : DslModeling::DomainPropertyValueHandler<EntityBase, global::System.Boolean>
		{
			private AllowCreateAuditPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Entity.AllowCreateAudit domain property value handler.
			/// </summary>
			public static readonly AllowCreateAuditPropertyHandler Instance = new AllowCreateAuditPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Entity.AllowCreateAudit domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return AllowCreateAuditDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(EntityBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.AllowCreateAudit;
				//return element.GetValue<global::System.Boolean>("AllowCreateAudit", element.allowCreateAuditPropertyStorage);
				//return element.allowCreateAuditPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(EntityBase element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.allowCreateAuditPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Entity"));
				}
			}
		}
		
		#endregion
		#region AllowModifyAudit domain property code
		
		/// <summary>
		/// AllowModifyAudit domain property Id.
		/// </summary>
		public static readonly global::System.Guid AllowModifyAuditDomainPropertyId = new global::System.Guid(0x50a4b7c2, 0x6a8e, 0x44f3, 0xbb, 0x0b, 0xfc, 0xbf, 0x1f, 0x51, 0xf8, 0x55);
		
		/// <summary>
		/// Storage for AllowModifyAudit
		/// </summary>
		private global::System.Boolean allowModifyAuditPropertyStorage = true;
		
		/// <summary>
		/// Gets or sets the value of AllowModifyAudit domain property.
		/// Determines if the fields 'ModifiedBy' and 'ModifiedDate' are created
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.Entity/AllowModifyAudit.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.Entity/AllowModifyAudit.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.Entity/AllowModifyAudit.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(true)]
		[DslModeling::DomainObjectId("50a4b7c2-6a8e-44f3-bb0b-fcbf1f51f855")]
		public virtual global::System.Boolean AllowModifyAudit
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return allowModifyAuditPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				AllowModifyAuditPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Entity.AllowModifyAudit domain property.
		/// </summary>
		internal sealed partial class AllowModifyAuditPropertyHandler : DslModeling::DomainPropertyValueHandler<EntityBase, global::System.Boolean>
		{
			private AllowModifyAuditPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Entity.AllowModifyAudit domain property value handler.
			/// </summary>
			public static readonly AllowModifyAuditPropertyHandler Instance = new AllowModifyAuditPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Entity.AllowModifyAudit domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return AllowModifyAuditDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(EntityBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.AllowModifyAudit;
				//return element.GetValue<global::System.Boolean>("AllowModifyAudit", element.allowModifyAuditPropertyStorage);
				//return element.allowModifyAuditPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(EntityBase element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.allowModifyAuditPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Entity"));
				}
			}
		}
		
		#endregion
		#region AllowTimestamp domain property code
		
		/// <summary>
		/// AllowTimestamp domain property Id.
		/// </summary>
		public static readonly global::System.Guid AllowTimestampDomainPropertyId = new global::System.Guid(0x9fc4b9f7, 0x6d29, 0x431c, 0x8f, 0x71, 0x6a, 0xc6, 0xa7, 0x4d, 0xa3, 0x70);
		
		/// <summary>
		/// Storage for AllowTimestamp
		/// </summary>
		private global::System.Boolean allowTimestampPropertyStorage = true;
		
		/// <summary>
		/// Gets or sets the value of AllowTimestamp domain property.
		/// Determines if this table will have a timestamp field created and used for
		/// synchronization
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.Entity/AllowTimestamp.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.Entity/AllowTimestamp.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.Entity/AllowTimestamp.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(true)]
		[DslModeling::DomainObjectId("9fc4b9f7-6d29-431c-8f71-6ac6a74da370")]
		public virtual global::System.Boolean AllowTimestamp
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return allowTimestampPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				AllowTimestampPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Entity.AllowTimestamp domain property.
		/// </summary>
		internal sealed partial class AllowTimestampPropertyHandler : DslModeling::DomainPropertyValueHandler<EntityBase, global::System.Boolean>
		{
			private AllowTimestampPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Entity.AllowTimestamp domain property value handler.
			/// </summary>
			public static readonly AllowTimestampPropertyHandler Instance = new AllowTimestampPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Entity.AllowTimestamp domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return AllowTimestampDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(EntityBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.AllowTimestamp;
				//return element.GetValue<global::System.Boolean>("AllowTimestamp", element.allowTimestampPropertyStorage);
				//return element.allowTimestampPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(EntityBase element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.allowTimestampPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Entity"));
				}
			}
		}
		
		#endregion
		#region IsAssociative domain property code
		
		/// <summary>
		/// IsAssociative domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsAssociativeDomainPropertyId = new global::System.Guid(0x06d09cfc, 0x31af, 0x465a, 0xaa, 0x16, 0xf6, 0xea, 0xe9, 0x78, 0xdc, 0x92);
		
		/// <summary>
		/// Storage for IsAssociative
		/// </summary>
		private global::System.Boolean isAssociativePropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of IsAssociative domain property.
		/// Determines if this is an intermediary entity between two other entities
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.Entity/IsAssociative.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.Entity/IsAssociative.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.Entity/IsAssociative.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("06d09cfc-31af-465a-aa16-f6eae978dc92")]
		public virtual global::System.Boolean IsAssociative
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isAssociativePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsAssociativePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Entity.IsAssociative domain property.
		/// </summary>
		internal sealed partial class IsAssociativePropertyHandler : DslModeling::DomainPropertyValueHandler<EntityBase, global::System.Boolean>
		{
			private IsAssociativePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Entity.IsAssociative domain property value handler.
			/// </summary>
			public static readonly IsAssociativePropertyHandler Instance = new IsAssociativePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Entity.IsAssociative domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsAssociativeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(EntityBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.IsAssociative;
				//return element.GetValue<global::System.Boolean>("IsAssociative", element.isAssociativePropertyStorage);
				//return element.isAssociativePropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(EntityBase element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isAssociativePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Entity"));
				}
			}
		}
		
		#endregion
		#region EnforcePrimaryKey domain property code
		
		/// <summary>
		/// EnforcePrimaryKey domain property Id.
		/// </summary>
		public static readonly global::System.Guid EnforcePrimaryKeyDomainPropertyId = new global::System.Guid(0x5ad0492a, 0x2a29, 0x4b84, 0x9d, 0xe9, 0xa0, 0xc1, 0x91, 0x12, 0xd3, 0xf6);
		
		/// <summary>
		/// Storage for EnforcePrimaryKey
		/// </summary>
		private global::System.Boolean enforcePrimaryKeyPropertyStorage = true;
		
		/// <summary>
		/// Gets or sets the value of EnforcePrimaryKey domain property.
		/// Determines if this primary key is enforced in the database
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.Entity/EnforcePrimaryKey.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.Entity/EnforcePrimaryKey.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.Entity/EnforcePrimaryKey.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(true)]
		[DslModeling::DomainObjectId("5ad0492a-2a29-4b84-9de9-a0c19112d3f6")]
		public virtual global::System.Boolean EnforcePrimaryKey
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return enforcePrimaryKeyPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				EnforcePrimaryKeyPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Entity.EnforcePrimaryKey domain property.
		/// </summary>
		internal sealed partial class EnforcePrimaryKeyPropertyHandler : DslModeling::DomainPropertyValueHandler<EntityBase, global::System.Boolean>
		{
			private EnforcePrimaryKeyPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Entity.EnforcePrimaryKey domain property value handler.
			/// </summary>
			public static readonly EnforcePrimaryKeyPropertyHandler Instance = new EnforcePrimaryKeyPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Entity.EnforcePrimaryKey domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return EnforcePrimaryKeyDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(EntityBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.EnforcePrimaryKey;
				//return element.GetValue<global::System.Boolean>("EnforcePrimaryKey", element.enforcePrimaryKeyPropertyStorage);
				//return element.enforcePrimaryKeyPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(EntityBase element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.enforcePrimaryKeyPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Entity"));
				}
			}
		}
		
		#endregion
		#region IsGenerated domain property code
		
		/// <summary>
		/// IsGenerated domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsGeneratedDomainPropertyId = new global::System.Guid(0x5044db17, 0xfb85, 0x4f77, 0xb0, 0x70, 0x27, 0x8f, 0x87, 0xb0, 0x2f, 0x8e);
		
		/// <summary>
		/// Storage for IsGenerated
		/// </summary>
		private global::System.Boolean isGeneratedPropertyStorage = true;
		
		/// <summary>
		/// Gets or sets the value of IsGenerated domain property.
		/// Determines if this item is used when generating
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.Entity/IsGenerated.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.Entity/IsGenerated.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.Entity/IsGenerated.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(true)]
		[DslModeling::DomainObjectId("5044db17-fb85-4f77-b070-278f87b02f8e")]
		public virtual global::System.Boolean IsGenerated
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isGeneratedPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsGeneratedPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Entity.IsGenerated domain property.
		/// </summary>
		internal sealed partial class IsGeneratedPropertyHandler : DslModeling::DomainPropertyValueHandler<EntityBase, global::System.Boolean>
		{
			private IsGeneratedPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Entity.IsGenerated domain property value handler.
			/// </summary>
			public static readonly IsGeneratedPropertyHandler Instance = new IsGeneratedPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Entity.IsGenerated domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsGeneratedDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(EntityBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.IsGenerated;
				//return element.GetValue<global::System.Boolean>("IsGenerated", element.isGeneratedPropertyStorage);
				//return element.isGeneratedPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(EntityBase element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isGeneratedPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Entity"));
				}
			}
		}
		
		#endregion
		#region Immutable domain property code
		
		/// <summary>
		/// Immutable domain property Id.
		/// </summary>
		public static readonly global::System.Guid ImmutableDomainPropertyId = new global::System.Guid(0x7b18441c, 0x79a6, 0x4b6e, 0x9d, 0x2a, 0xb1, 0x55, 0xeb, 0x75, 0xdb, 0xe5);
		
		/// <summary>
		/// Storage for Immutable
		/// </summary>
		private global::System.Boolean immutablePropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of Immutable domain property.
		/// Determines if this entity can be changed
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.Entity/Immutable.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.Entity/Immutable.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.Entity/Immutable.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("7b18441c-79a6-4b6e-9d2a-b155eb75dbe5")]
		public virtual global::System.Boolean Immutable
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return immutablePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ImmutablePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Entity.Immutable domain property.
		/// </summary>
		internal sealed partial class ImmutablePropertyHandler : DslModeling::DomainPropertyValueHandler<EntityBase, global::System.Boolean>
		{
			private ImmutablePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Entity.Immutable domain property value handler.
			/// </summary>
			public static readonly ImmutablePropertyHandler Instance = new ImmutablePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Entity.Immutable domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ImmutableDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(EntityBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.Immutable;
				//return element.GetValue<global::System.Boolean>("Immutable", element.immutablePropertyStorage);
				//return element.immutablePropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(EntityBase element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.immutablePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Entity"));
				}
			}
		}
		
		#endregion
		#region Schema domain property code
		
		/// <summary>
		/// Schema domain property Id.
		/// </summary>
		public static readonly global::System.Guid SchemaDomainPropertyId = new global::System.Guid(0xb6cd65f4, 0x36aa, 0x4ac5, 0xb6, 0x27, 0x43, 0xc8, 0x5f, 0x04, 0x76, 0x26);
		
		/// <summary>
		/// Storage for Schema
		/// </summary>
		private global::System.String schemaPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Schema domain property.
		/// The database schema in which this entity lives
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.Entity/Schema.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.Entity/Schema.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.Entity/Schema.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("b6cd65f4-36aa-4ac5-b627-43c85f047626")]
		public virtual global::System.String Schema
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return schemaPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				SchemaPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Entity.Schema domain property.
		/// </summary>
		internal sealed partial class SchemaPropertyHandler : DslModeling::DomainPropertyValueHandler<EntityBase, global::System.String>
		{
			private SchemaPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Entity.Schema domain property value handler.
			/// </summary>
			public static readonly SchemaPropertyHandler Instance = new SchemaPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Entity.Schema domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return SchemaDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(EntityBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.Schema;
				//return element.GetValue<global::System.String>("Schema", element.schemaPropertyStorage);
				//return element.schemaPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(EntityBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.schemaPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Entity"));
				}
			}
		}
		
		#endregion
		#region CodeFacade domain property code
		
		/// <summary>
		/// CodeFacade domain property Id.
		/// </summary>
		public static readonly global::System.Guid CodeFacadeDomainPropertyId = new global::System.Guid(0xdf8974d7, 0x0da4, 0x49ab, 0xb2, 0x08, 0x1e, 0x5a, 0xca, 0x96, 0xcf, 0x6b);
		
		/// <summary>
		/// Storage for CodeFacade
		/// </summary>
		private global::System.String codeFacadePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of CodeFacade domain property.
		/// Determines the object name used in the API. If this property is blank the 'Name'
		/// property is used in the API. This property can be used to mask the database
		/// identifier.
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.Entity/CodeFacade.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.Entity/CodeFacade.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.Entity/CodeFacade.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("df8974d7-0da4-49ab-b208-1e5aca96cf6b")]
		public virtual global::System.String CodeFacade
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return codeFacadePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				CodeFacadePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Entity.CodeFacade domain property.
		/// </summary>
		internal sealed partial class CodeFacadePropertyHandler : DslModeling::DomainPropertyValueHandler<EntityBase, global::System.String>
		{
			private CodeFacadePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Entity.CodeFacade domain property value handler.
			/// </summary>
			public static readonly CodeFacadePropertyHandler Instance = new CodeFacadePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Entity.CodeFacade domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return CodeFacadeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(EntityBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.CodeFacade;
				//return element.GetValue<global::System.String>("CodeFacade", element.codeFacadePropertyStorage);
				//return element.codeFacadePropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(EntityBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.codeFacadePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Entity"));
				}
			}
		}
		
		#endregion
		#region GeneratesDoubleDerived domain property code
		
		/// <summary>
		/// GeneratesDoubleDerived domain property Id.
		/// </summary>
		public static readonly global::System.Guid GeneratesDoubleDerivedDomainPropertyId = new global::System.Guid(0xa597dfa1, 0xfc68, 0x43e9, 0x85, 0x6f, 0x2e, 0xf8, 0x22, 0x91, 0xea, 0x30);
		
		/// <summary>
		/// Storage for GeneratesDoubleDerived
		/// </summary>
		private global::System.Boolean generatesDoubleDerivedPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of GeneratesDoubleDerived domain property.
		/// If True, will generate both a base class with all functionality and a partial
		/// class to support customization through overrides
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.Entity/GeneratesDoubleDerived.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.Entity/GeneratesDoubleDerived.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.Entity/GeneratesDoubleDerived.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("a597dfa1-fc68-43e9-856f-2ef82291ea30")]
		public virtual global::System.Boolean GeneratesDoubleDerived
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return generatesDoubleDerivedPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				GeneratesDoubleDerivedPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Entity.GeneratesDoubleDerived domain property.
		/// </summary>
		internal sealed partial class GeneratesDoubleDerivedPropertyHandler : DslModeling::DomainPropertyValueHandler<EntityBase, global::System.Boolean>
		{
			private GeneratesDoubleDerivedPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Entity.GeneratesDoubleDerived domain property value handler.
			/// </summary>
			public static readonly GeneratesDoubleDerivedPropertyHandler Instance = new GeneratesDoubleDerivedPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Entity.GeneratesDoubleDerived domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return GeneratesDoubleDerivedDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(EntityBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.GeneratesDoubleDerived;
				//return element.GetValue<global::System.Boolean>("GeneratesDoubleDerived", element.generatesDoubleDerivedPropertyStorage);
				//return element.generatesDoubleDerivedPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(EntityBase element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.generatesDoubleDerivedPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Entity"));
				}
			}
		}
		
		#endregion
		#region TypedEntity domain property code
		
		/// <summary>
		/// TypedEntity domain property Id.
		/// </summary>
		public static readonly global::System.Guid TypedEntityDomainPropertyId = new global::System.Guid(0x4ecb38e6, 0xdacf, 0x439a, 0x84, 0x71, 0x72, 0x63, 0x41, 0x05, 0xdc, 0x80);
		
		/// <summary>
		/// Storage for TypedEntity
		/// </summary>
		private TypedEntityConstants typedEntityPropertyStorage = TypedEntityConstants.None;
		
		/// <summary>
		/// Gets or sets the value of TypedEntity domain property.
		/// Determines if this is a typed entity
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.Entity/TypedEntity.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.Entity/TypedEntity.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.Entity/TypedEntity.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(TypedEntityConstants.None)]
		[DslModeling::DomainObjectId("4ecb38e6-dacf-439a-8471-72634105dc80")]
		public virtual TypedEntityConstants TypedEntity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return typedEntityPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TypedEntityPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Entity.TypedEntity domain property.
		/// </summary>
		internal sealed partial class TypedEntityPropertyHandler : DslModeling::DomainPropertyValueHandler<EntityBase, TypedEntityConstants>
		{
			private TypedEntityPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Entity.TypedEntity domain property value handler.
			/// </summary>
			public static readonly TypedEntityPropertyHandler Instance = new TypedEntityPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Entity.TypedEntity domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TypedEntityDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed TypedEntityConstants GetValue(EntityBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.TypedEntity;
				//return element.GetValue<TypedEntityConstants>("TypedEntity", element.typedEntityPropertyStorage);
				//return element.typedEntityPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(EntityBase element, TypedEntityConstants newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				TypedEntityConstants oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.typedEntityPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Entity"));
				}
			}
		}
		
		#endregion
		#region IsTenant domain property code
		
		/// <summary>
		/// IsTenant domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsTenantDomainPropertyId = new global::System.Guid(0xec18a590, 0x98a8, 0x4f16, 0xa4, 0xc0, 0xad, 0xac, 0x33, 0x77, 0xeb, 0x56);
		
		/// <summary>
		/// Storage for IsTenant
		/// </summary>
		private global::System.Boolean isTenantPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of IsTenant domain property.
		/// Determines if the table is tenant based
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.Entity/IsTenant.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.Entity/IsTenant.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.Entity/IsTenant.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("ec18a590-98a8-4f16-a4c0-adac3377eb56")]
		public virtual global::System.Boolean IsTenant
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isTenantPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsTenantPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Entity.IsTenant domain property.
		/// </summary>
		internal sealed partial class IsTenantPropertyHandler : DslModeling::DomainPropertyValueHandler<EntityBase, global::System.Boolean>
		{
			private IsTenantPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Entity.IsTenant domain property value handler.
			/// </summary>
			public static readonly IsTenantPropertyHandler Instance = new IsTenantPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Entity.IsTenant domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsTenantDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(EntityBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.IsTenant;
				//return element.GetValue<global::System.Boolean>("IsTenant", element.isTenantPropertyStorage);
				//return element.isTenantPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(EntityBase element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isTenantPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Entity"));
				}
			}
		}
		
		#endregion
		#region nHydrateModel opposite domain role accessor
		/// <summary>
		/// Gets or sets nHydrateModel.
		/// </summary>
		public virtual nHydrateModel nHydrateModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::nHydrate2.Dsl.nHydrateModelHasEntities.EntityDomainRoleId) as nHydrateModel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::nHydrate2.Dsl.nHydrateModelHasEntities.EntityDomainRoleId, value);
			}
		}
		#endregion
		#region ChildEntities opposite domain role accessor
		
		/// <summary>
		/// Gets a list of ChildEntities.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Entity> ChildEntities
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Entity>, Entity>(global::nHydrate2.Dsl.EntityHasEntities.ParentEntityDomainRoleId);
			}
		}
		#endregion
		#region ParentEntity opposite domain role accessor
		
		/// <summary>
		/// Gets a list of ParentEntity.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Entity> ParentEntity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Entity>, Entity>(global::nHydrate2.Dsl.EntityHasEntities.ChildEntityDomainRoleId);
			}
		}
		#endregion
		#region Fields opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Fields.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Field> Fields
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Field>, Field>(global::nHydrate2.Dsl.EntityHasFields.EntityDomainRoleId);
			}
		}
		#endregion
		#region StaticDatum opposite domain role accessor
		
		/// <summary>
		/// Gets a list of StaticDatum.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<StaticData> StaticDatum
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<StaticData>, StaticData>(global::nHydrate2.Dsl.EntityHasStaticDatum.EntityDomainRoleId);
			}
		}
		#endregion
		#region ParentInheritedEntity opposite domain role accessor
		/// <summary>
		/// Gets or sets ParentInheritedEntity.
		/// </summary>
		public virtual Entity ParentInheritedEntity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::nHydrate2.Dsl.EntityInheritsEntity.ParentInheritedEntityDomainRoleId) as Entity;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::nHydrate2.Dsl.EntityInheritsEntity.ParentInheritedEntityDomainRoleId, value);
			}
		}
		#endregion
		#region ChildDerivedEntities opposite domain role accessor
		
		/// <summary>
		/// Gets a list of ChildDerivedEntities.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Entity> ChildDerivedEntities
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Entity>, Entity>(global::nHydrate2.Dsl.EntityInheritsEntity.ChildDerivedEntitiesDomainRoleId);
			}
		}
		#endregion
		#region Composites opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Composites.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Composite> Composites
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Composite>, Composite>(global::nHydrate2.Dsl.EntityHasComposites.EntityDomainRoleId);
			}
		}
		#endregion
		#region EntityMetadata opposite domain role accessor
		
		/// <summary>
		/// Gets a list of EntityMetadata.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<EntityMetadata> EntityMetadata
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<EntityMetadata>, EntityMetadata>(global::nHydrate2.Dsl.EntityHasMetadata.EntityDomainRoleId);
			}
		}
		#endregion
		#region Modules opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Modules.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Module> Modules
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Module>, Module>(global::nHydrate2.Dsl.EntityReferencesModules.EntityDomainRoleId);
			}
		}
		#endregion
		#region Indexes opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Indexes.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Index> Indexes
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Index>, Index>(global::nHydrate2.Dsl.EntityHasIndexes.EntityDomainRoleId);
			}
		}
		#endregion
		#region ChildViews opposite domain role accessor
		
		/// <summary>
		/// Gets a list of ChildViews.
		/// Description for nHydrate2.Dsl.EntityHasViews.ParentEntity
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<View> ChildViews
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<View>, View>(global::nHydrate2.Dsl.EntityHasViews.ParentEntityDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::nHydrate2.Dsl.EntityMetadata.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::nHydrate2.Dsl.Index.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::nHydrate2.Dsl.Composite.DomainClassId)) 
				{
					// Call custom method implemented in partial class
					return this.CanMergeComposite(rootElement, elementGroupPrototype);
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::nHydrate2.Dsl.Field.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::nHydrate2.Dsl.StaticData.DomainClassId)) 
				{
					// Call custom method implemented in partial class
					return this.CanMergeStaticData(rootElement, elementGroupPrototype);
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::nHydrate2.Dsl.EntityMetadata sourceEntityMetadata1 = sourceElement as global::nHydrate2.Dsl.EntityMetadata;
			if (sourceEntityMetadata1 != null)
			{
				// Create link for path EntityHasMetadata.EntityMetadata
				this.EntityMetadata.Add(sourceEntityMetadata1);

				return;
			}
				
			global::nHydrate2.Dsl.Index sourceIndex2 = sourceElement as global::nHydrate2.Dsl.Index;
			if (sourceIndex2 != null)
			{
				// Create link for path EntityHasIndexes.Indexes
				this.Indexes.Add(sourceIndex2);

				return;
			}
				
			global::nHydrate2.Dsl.Composite sourceComposite3 = sourceElement as global::nHydrate2.Dsl.Composite;
			if (sourceComposite3 != null)
			{
				// Create link for path EntityHasComposites.Composites
				this.Composites.Add(sourceComposite3);

				return;
			}
				
			global::nHydrate2.Dsl.Field sourceField4 = sourceElement as global::nHydrate2.Dsl.Field;
			if (sourceField4 != null)
			{
				// Create link for path EntityHasFields.Fields
				this.Fields.Add(sourceField4);

				return;
			}
				
			global::nHydrate2.Dsl.StaticData sourceStaticData5 = sourceElement as global::nHydrate2.Dsl.StaticData;
			if (sourceStaticData5 != null)
			{
				// Create link for path EntityHasStaticDatum.StaticDatum
				this.StaticDatum.Add(sourceStaticData5);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::nHydrate2.Dsl.EntityMetadata sourceEntityMetadata1 = sourceElement as global::nHydrate2.Dsl.EntityMetadata;
			if (sourceEntityMetadata1 != null)
			{
				// Delete link for path EntityHasMetadata.EntityMetadata
				
				foreach (DslModeling::ElementLink link in global::nHydrate2.Dsl.EntityHasMetadata.GetLinks((global::nHydrate2.Dsl.Entity)this, sourceEntityMetadata1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::nHydrate2.Dsl.EntityHasMetadata.EntityDomainRoleId, global::nHydrate2.Dsl.EntityHasMetadata.EntityMetadataDomainRoleId);
				}

				return;
			}
				
			global::nHydrate2.Dsl.Index sourceIndex2 = sourceElement as global::nHydrate2.Dsl.Index;
			if (sourceIndex2 != null)
			{
				// Delete link for path EntityHasIndexes.Indexes
				
				foreach (DslModeling::ElementLink link in global::nHydrate2.Dsl.EntityHasIndexes.GetLinks((global::nHydrate2.Dsl.Entity)this, sourceIndex2))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::nHydrate2.Dsl.EntityHasIndexes.EntityDomainRoleId, global::nHydrate2.Dsl.EntityHasIndexes.IndexDomainRoleId);
				}

				return;
			}
				
			global::nHydrate2.Dsl.Composite sourceComposite3 = sourceElement as global::nHydrate2.Dsl.Composite;
			if (sourceComposite3 != null)
			{
				// Delete link for path EntityHasComposites.Composites
				
				foreach (DslModeling::ElementLink link in global::nHydrate2.Dsl.EntityHasComposites.GetLinks((global::nHydrate2.Dsl.Entity)this, sourceComposite3))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::nHydrate2.Dsl.EntityHasComposites.EntityDomainRoleId, global::nHydrate2.Dsl.EntityHasComposites.CompositeDomainRoleId);
				}

				return;
			}
				
			global::nHydrate2.Dsl.Field sourceField4 = sourceElement as global::nHydrate2.Dsl.Field;
			if (sourceField4 != null)
			{
				// Delete link for path EntityHasFields.Fields
				
				foreach (DslModeling::ElementLink link in global::nHydrate2.Dsl.EntityHasFields.GetLinks((global::nHydrate2.Dsl.Entity)this, sourceField4))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::nHydrate2.Dsl.EntityHasFields.EntityDomainRoleId, global::nHydrate2.Dsl.EntityHasFields.FieldDomainRoleId);
				}

				return;
			}
				
			global::nHydrate2.Dsl.StaticData sourceStaticData5 = sourceElement as global::nHydrate2.Dsl.StaticData;
			if (sourceStaticData5 != null)
			{
				// Delete link for path EntityHasStaticDatum.StaticDatum
				
				foreach (DslModeling::ElementLink link in global::nHydrate2.Dsl.EntityHasStaticDatum.GetLinks((global::nHydrate2.Dsl.Entity)this, sourceStaticData5))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::nHydrate2.Dsl.EntityHasStaticDatum.EntityDomainRoleId, global::nHydrate2.Dsl.EntityHasStaticDatum.StaticDataDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
	/// <summary>
	/// DomainClass Entity
	/// This object represents a database table
	/// </summary>
	[global::System.CLSCompliant(true)]
			
	public partial class Entity : EntityBase
	{
		#region Constructors
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Entity(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Entity(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace nHydrate2.Dsl
{
	/// <summary>
	/// Double-derived base class for DomainClass Field
	/// </summary>
	[DslDesign::DisplayNameResource("nHydrate2.Dsl.Field.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("nHydrate2.Dsl.Field.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::nHydrate2.Dsl.nHydrate2DomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("6e74a55a-de35-41e1-b542-908a20112a5d")]
	public abstract partial class FieldBase : DslModeling::ModelElement, System.ComponentModel.INotifyPropertyChanged
	{
		#region INotifyPropertyChanged
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs e)
		{
			if (this.PropertyChanged != null)
				this.PropertyChanged(this, e);
		}
		#endregion
	
		#region Constructors, domain class Id
	
		/// <summary>
		/// Field domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x6e74a55a, 0xde35, 0x41e1, 0xb5, 0x42, 0x90, 0x8a, 0x20, 0x11, 0x2a, 0x5d);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected FieldBase(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0xf7eaaafb, 0xaddf, 0x4cae, 0x89, 0x26, 0xb8, 0xda, 0x16, 0xde, 0x5e, 0x62);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Determines the name of this field
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.Field/Name.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.Field/Name.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.Field/Name.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("f7eaaafb-addf-4cae-8926-b8da16de5e62")]
		public virtual global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Field.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<FieldBase, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Field.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Field.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(FieldBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.Name;
				//return element.GetValue<global::System.String>("Name", element.namePropertyStorage);
				//return element.namePropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(FieldBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Field"));
				}
			}
		}
		
		#endregion
		#region FriendlyName domain property code
		
		/// <summary>
		/// FriendlyName domain property Id.
		/// </summary>
		public static readonly global::System.Guid FriendlyNameDomainPropertyId = new global::System.Guid(0xafae6e3a, 0x195e, 0x4510, 0xb2, 0xd2, 0x0f, 0xe9, 0xfd, 0x27, 0x38, 0xb7);
		
		/// <summary>
		/// Storage for FriendlyName
		/// </summary>
		private global::System.String friendlyNamePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of FriendlyName domain property.
		/// Determines a prompt that can be displayed in the UI
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.Field/FriendlyName.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.Field/FriendlyName.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.Field/FriendlyName.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("afae6e3a-195e-4510-b2d2-0fe9fd2738b7")]
		public virtual global::System.String FriendlyName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return friendlyNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				FriendlyNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Field.FriendlyName domain property.
		/// </summary>
		internal sealed partial class FriendlyNamePropertyHandler : DslModeling::DomainPropertyValueHandler<FieldBase, global::System.String>
		{
			private FriendlyNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Field.FriendlyName domain property value handler.
			/// </summary>
			public static readonly FriendlyNamePropertyHandler Instance = new FriendlyNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Field.FriendlyName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return FriendlyNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(FieldBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.FriendlyName;
				//return element.GetValue<global::System.String>("FriendlyName", element.friendlyNamePropertyStorage);
				//return element.friendlyNamePropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(FieldBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.friendlyNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Field"));
				}
			}
		}
		
		#endregion
		#region Nullable domain property code
		
		/// <summary>
		/// Nullable domain property Id.
		/// </summary>
		public static readonly global::System.Guid NullableDomainPropertyId = new global::System.Guid(0xf990fadc, 0x0b79, 0x46b2, 0x8a, 0xfc, 0xb8, 0x31, 0x82, 0xfb, 0xe1, 0xcc);
		
		/// <summary>
		/// Storage for Nullable
		/// </summary>
		private global::System.Boolean nullablePropertyStorage = true;
		
		/// <summary>
		/// Gets or sets the value of Nullable domain property.
		/// Determines if this item allows null values
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.Field/Nullable.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.Field/Nullable.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.Field/Nullable.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(true)]
		[DslModeling::DomainObjectId("f990fadc-0b79-46b2-8afc-b83182fbe1cc")]
		public virtual global::System.Boolean Nullable
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return nullablePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NullablePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Field.Nullable domain property.
		/// </summary>
		internal sealed partial class NullablePropertyHandler : DslModeling::DomainPropertyValueHandler<FieldBase, global::System.Boolean>
		{
			private NullablePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Field.Nullable domain property value handler.
			/// </summary>
			public static readonly NullablePropertyHandler Instance = new NullablePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Field.Nullable domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NullableDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(FieldBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.Nullable;
				//return element.GetValue<global::System.Boolean>("Nullable", element.nullablePropertyStorage);
				//return element.nullablePropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(FieldBase element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.nullablePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Field"));
				}
			}
		}
		
		#endregion
		#region Collate domain property code
		
		/// <summary>
		/// Collate domain property Id.
		/// </summary>
		public static readonly global::System.Guid CollateDomainPropertyId = new global::System.Guid(0x893044a6, 0xae4a, 0x4ec8, 0x9e, 0x29, 0xbd, 0xe5, 0xc4, 0x97, 0xf3, 0xe3);
		
		/// <summary>
		/// Storage for Collate
		/// </summary>
		private global::System.String collatePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Collate domain property.
		/// Determines the field collation
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.Field/Collate.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.Field/Collate.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.Field/Collate.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("893044a6-ae4a-4ec8-9e29-bde5c497f3e3")]
		public virtual global::System.String Collate
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return collatePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				CollatePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Field.Collate domain property.
		/// </summary>
		internal sealed partial class CollatePropertyHandler : DslModeling::DomainPropertyValueHandler<FieldBase, global::System.String>
		{
			private CollatePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Field.Collate domain property value handler.
			/// </summary>
			public static readonly CollatePropertyHandler Instance = new CollatePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Field.Collate domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return CollateDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(FieldBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.Collate;
				//return element.GetValue<global::System.String>("Collate", element.collatePropertyStorage);
				//return element.collatePropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(FieldBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.collatePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Field"));
				}
			}
		}
		
		#endregion
		#region IsCalculated domain property code
		
		/// <summary>
		/// IsCalculated domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsCalculatedDomainPropertyId = new global::System.Guid(0x9c86b99a, 0x81ab, 0x4d2d, 0x80, 0xf5, 0xdf, 0xcb, 0xa4, 0x1f, 0x42, 0xbe);
		
		/// <summary>
		/// Storage for IsCalculated
		/// </summary>
		private global::System.Boolean isCalculatedPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of IsCalculated domain property.
		/// Determines if this field is based on a calculated database column
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.Field/IsCalculated.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.Field/IsCalculated.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.Field/IsCalculated.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("9c86b99a-81ab-4d2d-80f5-dfcba41f42be")]
		public virtual global::System.Boolean IsCalculated
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isCalculatedPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsCalculatedPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Field.IsCalculated domain property.
		/// </summary>
		internal sealed partial class IsCalculatedPropertyHandler : DslModeling::DomainPropertyValueHandler<FieldBase, global::System.Boolean>
		{
			private IsCalculatedPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Field.IsCalculated domain property value handler.
			/// </summary>
			public static readonly IsCalculatedPropertyHandler Instance = new IsCalculatedPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Field.IsCalculated domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsCalculatedDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(FieldBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.IsCalculated;
				//return element.GetValue<global::System.Boolean>("IsCalculated", element.isCalculatedPropertyStorage);
				//return element.isCalculatedPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(FieldBase element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isCalculatedPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Field"));
				}
			}
		}
		
		#endregion
		#region DataType domain property code
		
		/// <summary>
		/// DataType domain property Id.
		/// </summary>
		public static readonly global::System.Guid DataTypeDomainPropertyId = new global::System.Guid(0xaccd89d9, 0x66da, 0x4ff0, 0x8d, 0x2e, 0xa2, 0xe8, 0xd7, 0xff, 0x7a, 0x6c);
		
		/// <summary>
		/// Storage for DataType
		/// </summary>
		private DataTypeConstants dataTypePropertyStorage = DataTypeConstants.VarChar;
		
		/// <summary>
		/// Gets or sets the value of DataType domain property.
		/// Determines the data type of this field
		/// </summary>
		[System.ComponentModel.TypeConverter(typeof(nHydrate2.Dsl.Design.Converters.DatatypeConverter))]
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.Field/DataType.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.Field/DataType.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.Field/DataType.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(DataTypeConstants.VarChar)]
		[DslModeling::DomainObjectId("accd89d9-66da-4ff0-8d2e-a2e8d7ff7a6c")]
		public virtual DataTypeConstants DataType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return dataTypePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DataTypePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Field.DataType domain property.
		/// </summary>
		internal sealed partial class DataTypePropertyHandler : DslModeling::DomainPropertyValueHandler<FieldBase, DataTypeConstants>
		{
			private DataTypePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Field.DataType domain property value handler.
			/// </summary>
			public static readonly DataTypePropertyHandler Instance = new DataTypePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Field.DataType domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DataTypeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed DataTypeConstants GetValue(FieldBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.DataType;
				//return element.GetValue<DataTypeConstants>("DataType", element.dataTypePropertyStorage);
				//return element.dataTypePropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(FieldBase element, DataTypeConstants newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				DataTypeConstants oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.dataTypePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Field"));
				}
			}
		}
		
		#endregion
		#region Default domain property code
		
		/// <summary>
		/// Default domain property Id.
		/// </summary>
		public static readonly global::System.Guid DefaultDomainPropertyId = new global::System.Guid(0x78416a86, 0x37eb, 0x4d7a, 0xa3, 0x9e, 0xe2, 0x31, 0x1c, 0x32, 0xe1, 0x45);
		
		/// <summary>
		/// Storage for Default
		/// </summary>
		private global::System.String defaultPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Default domain property.
		/// Determines the default value of this field
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.Field/Default.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.Field/Default.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.Field/Default.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("78416a86-37eb-4d7a-a39e-e2311c32e145")]
		public virtual global::System.String Default
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return defaultPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DefaultPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Field.Default domain property.
		/// </summary>
		internal sealed partial class DefaultPropertyHandler : DslModeling::DomainPropertyValueHandler<FieldBase, global::System.String>
		{
			private DefaultPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Field.Default domain property value handler.
			/// </summary>
			public static readonly DefaultPropertyHandler Instance = new DefaultPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Field.Default domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DefaultDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(FieldBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.Default;
				//return element.GetValue<global::System.String>("Default", element.defaultPropertyStorage);
				//return element.defaultPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(FieldBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.defaultPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Field"));
				}
			}
		}
		
		#endregion
		#region Summary domain property code
		
		/// <summary>
		/// Summary domain property Id.
		/// </summary>
		public static readonly global::System.Guid SummaryDomainPropertyId = new global::System.Guid(0xac63ac37, 0xd989, 0x4ca7, 0xa4, 0xcd, 0x93, 0xd7, 0xbd, 0x06, 0xfb, 0x26);
		
		/// <summary>
		/// Storage for Summary
		/// </summary>
		private global::System.String summaryPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Summary domain property.
		/// Determines summary text were applicable
		/// </summary>
		[System.ComponentModel.Editor(typeof(System.ComponentModel.Design.MultilineStringEditor), typeof(System.Drawing.Design.UITypeEditor))]
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.Field/Summary.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.Field/Summary.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.Field/Summary.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("ac63ac37-d989-4ca7-a4cd-93d7bd06fb26")]
		public virtual global::System.String Summary
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return summaryPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				SummaryPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Field.Summary domain property.
		/// </summary>
		internal sealed partial class SummaryPropertyHandler : DslModeling::DomainPropertyValueHandler<FieldBase, global::System.String>
		{
			private SummaryPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Field.Summary domain property value handler.
			/// </summary>
			public static readonly SummaryPropertyHandler Instance = new SummaryPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Field.Summary domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return SummaryDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(FieldBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.Summary;
				//return element.GetValue<global::System.String>("Summary", element.summaryPropertyStorage);
				//return element.summaryPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(FieldBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.summaryPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Field"));
				}
			}
		}
		
		#endregion
		#region Formula domain property code
		
		/// <summary>
		/// Formula domain property Id.
		/// </summary>
		public static readonly global::System.Guid FormulaDomainPropertyId = new global::System.Guid(0x3dcfa810, 0x4d71, 0x4d08, 0xaf, 0x7d, 0xe3, 0xf5, 0x23, 0xd8, 0xfe, 0xa6);
		
		/// <summary>
		/// Storage for Formula
		/// </summary>
		private global::System.String formulaPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Formula domain property.
		/// The formula for a computed field
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.Field/Formula.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.Field/Formula.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.Field/Formula.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("3dcfa810-4d71-4d08-af7d-e3f523d8fea6")]
		public virtual global::System.String Formula
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return formulaPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				FormulaPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Field.Formula domain property.
		/// </summary>
		internal sealed partial class FormulaPropertyHandler : DslModeling::DomainPropertyValueHandler<FieldBase, global::System.String>
		{
			private FormulaPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Field.Formula domain property value handler.
			/// </summary>
			public static readonly FormulaPropertyHandler Instance = new FormulaPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Field.Formula domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return FormulaDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(FieldBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.Formula;
				//return element.GetValue<global::System.String>("Formula", element.formulaPropertyStorage);
				//return element.formulaPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(FieldBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.formulaPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Field"));
				}
			}
		}
		
		#endregion
		#region IsGenerated domain property code
		
		/// <summary>
		/// IsGenerated domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsGeneratedDomainPropertyId = new global::System.Guid(0x76a59bb8, 0x81b0, 0x4459, 0x82, 0xfe, 0xe6, 0x04, 0x38, 0x72, 0x15, 0xbf);
		
		/// <summary>
		/// Storage for IsGenerated
		/// </summary>
		private global::System.Boolean isGeneratedPropertyStorage = true;
		
		/// <summary>
		/// Gets or sets the value of IsGenerated domain property.
		/// Determines if this item is used when generating
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.Field/IsGenerated.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.Field/IsGenerated.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.Field/IsGenerated.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(true)]
		[DslModeling::DomainObjectId("76a59bb8-81b0-4459-82fe-e604387215bf")]
		public virtual global::System.Boolean IsGenerated
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isGeneratedPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsGeneratedPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Field.IsGenerated domain property.
		/// </summary>
		internal sealed partial class IsGeneratedPropertyHandler : DslModeling::DomainPropertyValueHandler<FieldBase, global::System.Boolean>
		{
			private IsGeneratedPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Field.IsGenerated domain property value handler.
			/// </summary>
			public static readonly IsGeneratedPropertyHandler Instance = new IsGeneratedPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Field.IsGenerated domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsGeneratedDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(FieldBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.IsGenerated;
				//return element.GetValue<global::System.Boolean>("IsGenerated", element.isGeneratedPropertyStorage);
				//return element.isGeneratedPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(FieldBase element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isGeneratedPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Field"));
				}
			}
		}
		
		#endregion
		#region Identity domain property code
		
		/// <summary>
		/// Identity domain property Id.
		/// </summary>
		public static readonly global::System.Guid IdentityDomainPropertyId = new global::System.Guid(0x29e9a228, 0x046e, 0x468d, 0x93, 0x0d, 0xeb, 0xca, 0xac, 0x1c, 0x04, 0x18);
		
		/// <summary>
		/// Storage for Identity
		/// </summary>
		private IdentityTypeConstants identityPropertyStorage = IdentityTypeConstants.None;
		
		/// <summary>
		/// Gets or sets the value of Identity domain property.
		/// Determines the type of identity for this column
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.Field/Identity.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.Field/Identity.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.Field/Identity.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(IdentityTypeConstants.None)]
		[DslModeling::DomainObjectId("29e9a228-046e-468d-930d-ebcaac1c0418")]
		public virtual IdentityTypeConstants Identity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return identityPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IdentityPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Field.Identity domain property.
		/// </summary>
		internal sealed partial class IdentityPropertyHandler : DslModeling::DomainPropertyValueHandler<FieldBase, IdentityTypeConstants>
		{
			private IdentityPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Field.Identity domain property value handler.
			/// </summary>
			public static readonly IdentityPropertyHandler Instance = new IdentityPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Field.Identity domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IdentityDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed IdentityTypeConstants GetValue(FieldBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.Identity;
				//return element.GetValue<IdentityTypeConstants>("Identity", element.identityPropertyStorage);
				//return element.identityPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(FieldBase element, IdentityTypeConstants newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				IdentityTypeConstants oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.identityPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Field"));
				}
			}
		}
		
		#endregion
		#region IsIndexed domain property code
		
		/// <summary>
		/// IsIndexed domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsIndexedDomainPropertyId = new global::System.Guid(0xd5ad0098, 0x1d8a, 0x4873, 0xa3, 0x70, 0xe2, 0x60, 0xa2, 0x04, 0xaf, 0x50);
		
		/// <summary>
		/// Storage for IsIndexed
		/// </summary>
		private global::System.Boolean isIndexedPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of IsIndexed domain property.
		/// Determines if this field has an associated database index
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.Field/IsIndexed.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.Field/IsIndexed.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.Field/IsIndexed.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("d5ad0098-1d8a-4873-a370-e260a204af50")]
		public virtual global::System.Boolean IsIndexed
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isIndexedPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsIndexedPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Field.IsIndexed domain property.
		/// </summary>
		internal sealed partial class IsIndexedPropertyHandler : DslModeling::DomainPropertyValueHandler<FieldBase, global::System.Boolean>
		{
			private IsIndexedPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Field.IsIndexed domain property value handler.
			/// </summary>
			public static readonly IsIndexedPropertyHandler Instance = new IsIndexedPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Field.IsIndexed domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsIndexedDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(FieldBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.IsIndexed;
				//return element.GetValue<global::System.Boolean>("IsIndexed", element.isIndexedPropertyStorage);
				//return element.isIndexedPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(FieldBase element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isIndexedPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Field"));
				}
			}
		}
		
		#endregion
		#region IsUnique domain property code
		
		/// <summary>
		/// IsUnique domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsUniqueDomainPropertyId = new global::System.Guid(0xd99371ef, 0xdd34, 0x4b20, 0xb5, 0xba, 0xde, 0x15, 0x96, 0x03, 0x98, 0x2c);
		
		/// <summary>
		/// Storage for IsUnique
		/// </summary>
		private global::System.Boolean isUniquePropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of IsUnique domain property.
		/// Determines if this field is marked as unique
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.Field/IsUnique.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.Field/IsUnique.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.Field/IsUnique.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("d99371ef-dd34-4b20-b5ba-de159603982c")]
		public virtual global::System.Boolean IsUnique
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isUniquePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsUniquePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Field.IsUnique domain property.
		/// </summary>
		internal sealed partial class IsUniquePropertyHandler : DslModeling::DomainPropertyValueHandler<FieldBase, global::System.Boolean>
		{
			private IsUniquePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Field.IsUnique domain property value handler.
			/// </summary>
			public static readonly IsUniquePropertyHandler Instance = new IsUniquePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Field.IsUnique domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsUniqueDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(FieldBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.IsUnique;
				//return element.GetValue<global::System.Boolean>("IsUnique", element.isUniquePropertyStorage);
				//return element.isUniquePropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(FieldBase element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isUniquePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Field"));
				}
			}
		}
		
		#endregion
		#region Length domain property code
		
		/// <summary>
		/// Length domain property Id.
		/// </summary>
		public static readonly global::System.Guid LengthDomainPropertyId = new global::System.Guid(0x84851d5c, 0x4f27, 0x4464, 0x8a, 0x10, 0x22, 0x19, 0x08, 0x86, 0x08, 0xe2);
		
		/// <summary>
		/// Storage for Length
		/// </summary>
		private global::System.Int32 lengthPropertyStorage = 50;
		
		/// <summary>
		/// Gets or sets the value of Length domain property.
		/// Determines the size of this column in bytes
		/// </summary>
		[System.ComponentModel.TypeConverter(typeof(nHydrate2.Dsl.Design.Converters.TextLengthConverter))]
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.Field/Length.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.Field/Length.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.Field/Length.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(50)]
		[DslModeling::DomainObjectId("84851d5c-4f27-4464-8a10-2219088608e2")]
		public virtual global::System.Int32 Length
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return lengthPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				LengthPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Field.Length domain property.
		/// </summary>
		internal sealed partial class LengthPropertyHandler : DslModeling::DomainPropertyValueHandler<FieldBase, global::System.Int32>
		{
			private LengthPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Field.Length domain property value handler.
			/// </summary>
			public static readonly LengthPropertyHandler Instance = new LengthPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Field.Length domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return LengthDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Int32 GetValue(FieldBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.Length;
				//return element.GetValue<global::System.Int32>("Length", element.lengthPropertyStorage);
				//return element.lengthPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(FieldBase element, global::System.Int32 newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Int32 oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.lengthPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Field"));
				}
			}
		}
		
		#endregion
		#region Min domain property code
		
		/// <summary>
		/// Min domain property Id.
		/// </summary>
		public static readonly global::System.Guid MinDomainPropertyId = new global::System.Guid(0x1681175c, 0x090d, 0x404f, 0xa7, 0x76, 0x08, 0x6c, 0x6d, 0x44, 0x46, 0x72);
		
		/// <summary>
		/// Storage for Min
		/// </summary>
		private global::System.Double minPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of Min domain property.
		/// Determines the minimum value for a int, long, float value
		/// </summary>
		[System.ComponentModel.TypeConverter(typeof(nHydrate2.Dsl.Design.Converters.RangeMinConverter))]
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.Field/Min.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.Field/Min.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.Field/Min.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("1681175c-090d-404f-a776-086c6d444672")]
		public virtual global::System.Double Min
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return minPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				MinPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Field.Min domain property.
		/// </summary>
		internal sealed partial class MinPropertyHandler : DslModeling::DomainPropertyValueHandler<FieldBase, global::System.Double>
		{
			private MinPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Field.Min domain property value handler.
			/// </summary>
			public static readonly MinPropertyHandler Instance = new MinPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Field.Min domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return MinDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Double GetValue(FieldBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.Min;
				//return element.GetValue<global::System.Double>("Min", element.minPropertyStorage);
				//return element.minPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(FieldBase element, global::System.Double newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Double oldValue = GetValue(element);
				// double type precision is guaranteed only to 15th digit.
				//if (global::System.Math.Abs(newValue - oldValue) > 1e-15) //OLD CODE
				if (true)
				{
					ValueChanging(element, oldValue, newValue);
					element.minPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Field"));
				}
			}
		}
		
		#endregion
		#region Max domain property code
		
		/// <summary>
		/// Max domain property Id.
		/// </summary>
		public static readonly global::System.Guid MaxDomainPropertyId = new global::System.Guid(0x7be3e16a, 0x8034, 0x41e2, 0x87, 0x2e, 0x75, 0xea, 0x86, 0xac, 0xbe, 0xb9);
		
		/// <summary>
		/// Storage for Max
		/// </summary>
		private global::System.Double maxPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of Max domain property.
		/// Determines the maximum value for a int, long, float value
		/// </summary>
		[System.ComponentModel.TypeConverter(typeof(nHydrate2.Dsl.Design.Converters.RangeMaxConverter))]
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.Field/Max.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.Field/Max.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.Field/Max.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("7be3e16a-8034-41e2-872e-75ea86acbeb9")]
		public virtual global::System.Double Max
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return maxPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				MaxPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Field.Max domain property.
		/// </summary>
		internal sealed partial class MaxPropertyHandler : DslModeling::DomainPropertyValueHandler<FieldBase, global::System.Double>
		{
			private MaxPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Field.Max domain property value handler.
			/// </summary>
			public static readonly MaxPropertyHandler Instance = new MaxPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Field.Max domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return MaxDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Double GetValue(FieldBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.Max;
				//return element.GetValue<global::System.Double>("Max", element.maxPropertyStorage);
				//return element.maxPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(FieldBase element, global::System.Double newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Double oldValue = GetValue(element);
				// double type precision is guaranteed only to 15th digit.
				//if (global::System.Math.Abs(newValue - oldValue) > 1e-15) //OLD CODE
				if (true)
				{
					ValueChanging(element, oldValue, newValue);
					element.maxPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Field"));
				}
			}
		}
		
		#endregion
		#region IsPrimaryKey domain property code
		
		/// <summary>
		/// IsPrimaryKey domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsPrimaryKeyDomainPropertyId = new global::System.Guid(0x658312f1, 0x4067, 0x4791, 0x9c, 0x8e, 0x81, 0x8d, 0x08, 0x6c, 0x10, 0x8e);
		
		/// <summary>
		/// Storage for IsPrimaryKey
		/// </summary>
		private global::System.Boolean isPrimaryKeyPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of IsPrimaryKey domain property.
		/// Determine if this field is the entity primary key
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.Field/IsPrimaryKey.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.Field/IsPrimaryKey.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.Field/IsPrimaryKey.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("658312f1-4067-4791-9c8e-818d086c108e")]
		public virtual global::System.Boolean IsPrimaryKey
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isPrimaryKeyPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsPrimaryKeyPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Field.IsPrimaryKey domain property.
		/// </summary>
		internal sealed partial class IsPrimaryKeyPropertyHandler : DslModeling::DomainPropertyValueHandler<FieldBase, global::System.Boolean>
		{
			private IsPrimaryKeyPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Field.IsPrimaryKey domain property value handler.
			/// </summary>
			public static readonly IsPrimaryKeyPropertyHandler Instance = new IsPrimaryKeyPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Field.IsPrimaryKey domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsPrimaryKeyDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(FieldBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.IsPrimaryKey;
				//return element.GetValue<global::System.Boolean>("IsPrimaryKey", element.isPrimaryKeyPropertyStorage);
				//return element.isPrimaryKeyPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(FieldBase element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isPrimaryKeyPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Field"));
				}
			}
		}
		
		#endregion
		#region Scale domain property code
		
		/// <summary>
		/// Scale domain property Id.
		/// </summary>
		public static readonly global::System.Guid ScaleDomainPropertyId = new global::System.Guid(0x6ebe23fb, 0x3b81, 0x433b, 0xa8, 0x78, 0x0c, 0xfd, 0x9d, 0x4a, 0xa4, 0xa5);
		
		/// <summary>
		/// Storage for Scale
		/// </summary>
		private global::System.Int32 scalePropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of Scale domain property.
		/// Determines the scale of some data types
		/// </summary>
		[System.ComponentModel.TypeConverter(typeof(nHydrate2.Dsl.Design.Converters.TextDecimalScaleConverter))]
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.Field/Scale.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.Field/Scale.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.Field/Scale.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("6ebe23fb-3b81-433b-a878-0cfd9d4aa4a5")]
		public virtual global::System.Int32 Scale
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return scalePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ScalePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Field.Scale domain property.
		/// </summary>
		internal sealed partial class ScalePropertyHandler : DslModeling::DomainPropertyValueHandler<FieldBase, global::System.Int32>
		{
			private ScalePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Field.Scale domain property value handler.
			/// </summary>
			public static readonly ScalePropertyHandler Instance = new ScalePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Field.Scale domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ScaleDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Int32 GetValue(FieldBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.Scale;
				//return element.GetValue<global::System.Int32>("Scale", element.scalePropertyStorage);
				//return element.scalePropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(FieldBase element, global::System.Int32 newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Int32 oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.scalePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Field"));
				}
			}
		}
		
		#endregion
		#region ValidationExpression domain property code
		
		/// <summary>
		/// ValidationExpression domain property Id.
		/// </summary>
		public static readonly global::System.Guid ValidationExpressionDomainPropertyId = new global::System.Guid(0x69413108, 0x0594, 0x46d1, 0xa2, 0x23, 0x61, 0x54, 0x8d, 0xe5, 0xdf, 0xf6);
		
		/// <summary>
		/// Storage for ValidationExpression
		/// </summary>
		private global::System.String validationExpressionPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of ValidationExpression domain property.
		/// The validation pattern used for UI controls to validate this field value
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.Field/ValidationExpression.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.Field/ValidationExpression.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.Field/ValidationExpression.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("69413108-0594-46d1-a223-61548de5dff6")]
		public virtual global::System.String ValidationExpression
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return validationExpressionPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ValidationExpressionPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Field.ValidationExpression domain property.
		/// </summary>
		internal sealed partial class ValidationExpressionPropertyHandler : DslModeling::DomainPropertyValueHandler<FieldBase, global::System.String>
		{
			private ValidationExpressionPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Field.ValidationExpression domain property value handler.
			/// </summary>
			public static readonly ValidationExpressionPropertyHandler Instance = new ValidationExpressionPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Field.ValidationExpression domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ValidationExpressionDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(FieldBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.ValidationExpression;
				//return element.GetValue<global::System.String>("ValidationExpression", element.validationExpressionPropertyStorage);
				//return element.validationExpressionPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(FieldBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.validationExpressionPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Field"));
				}
			}
		}
		
		#endregion
		#region CodeFacade domain property code
		
		/// <summary>
		/// CodeFacade domain property Id.
		/// </summary>
		public static readonly global::System.Guid CodeFacadeDomainPropertyId = new global::System.Guid(0x6bb3c3d0, 0xf62d, 0x46cb, 0x90, 0xc6, 0x9e, 0x64, 0x70, 0x9c, 0xb1, 0x3a);
		
		/// <summary>
		/// Storage for CodeFacade
		/// </summary>
		private global::System.String codeFacadePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of CodeFacade domain property.
		/// Determines the object name used in the API. If this property is blank the 'Name'
		/// property is used in the API. This property can be used to mask the database
		/// identifier.
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.Field/CodeFacade.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.Field/CodeFacade.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.Field/CodeFacade.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("6bb3c3d0-f62d-46cb-90c6-9e64709cb13a")]
		public virtual global::System.String CodeFacade
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return codeFacadePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				CodeFacadePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Field.CodeFacade domain property.
		/// </summary>
		internal sealed partial class CodeFacadePropertyHandler : DslModeling::DomainPropertyValueHandler<FieldBase, global::System.String>
		{
			private CodeFacadePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Field.CodeFacade domain property value handler.
			/// </summary>
			public static readonly CodeFacadePropertyHandler Instance = new CodeFacadePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Field.CodeFacade domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return CodeFacadeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(FieldBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.CodeFacade;
				//return element.GetValue<global::System.String>("CodeFacade", element.codeFacadePropertyStorage);
				//return element.codeFacadePropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(FieldBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.codeFacadePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Field"));
				}
			}
		}
		
		#endregion
		#region IsReadOnly domain property code
		
		/// <summary>
		/// IsReadOnly domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsReadOnlyDomainPropertyId = new global::System.Guid(0x232598d5, 0x1d67, 0x46f0, 0x8f, 0x5f, 0x63, 0x57, 0xb9, 0x0e, 0xaa, 0x38);
		
		/// <summary>
		/// Storage for IsReadOnly
		/// </summary>
		private global::System.Boolean isReadOnlyPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of IsReadOnly domain property.
		/// Determines if the property can be set in code
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.Field/IsReadOnly.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.Field/IsReadOnly.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.Field/IsReadOnly.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("232598d5-1d67-46f0-8f5f-6357b90eaa38")]
		public virtual global::System.Boolean IsReadOnly
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isReadOnlyPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsReadOnlyPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Field.IsReadOnly domain property.
		/// </summary>
		internal sealed partial class IsReadOnlyPropertyHandler : DslModeling::DomainPropertyValueHandler<FieldBase, global::System.Boolean>
		{
			private IsReadOnlyPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Field.IsReadOnly domain property value handler.
			/// </summary>
			public static readonly IsReadOnlyPropertyHandler Instance = new IsReadOnlyPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Field.IsReadOnly domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsReadOnlyDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(FieldBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.IsReadOnly;
				//return element.GetValue<global::System.Boolean>("IsReadOnly", element.isReadOnlyPropertyStorage);
				//return element.isReadOnlyPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(FieldBase element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isReadOnlyPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Field"));
				}
			}
		}
		
		#endregion
		#region IsBrowsable domain property code
		
		/// <summary>
		/// IsBrowsable domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsBrowsableDomainPropertyId = new global::System.Guid(0x9a782fd3, 0x4f83, 0x4f26, 0xb3, 0xa6, 0xa5, 0xba, 0x71, 0x53, 0x42, 0xaa);
		
		/// <summary>
		/// Storage for IsBrowsable
		/// </summary>
		private global::System.Boolean isBrowsablePropertyStorage = true;
		
		/// <summary>
		/// Gets or sets the value of IsBrowsable domain property.
		/// Determines if this property is browsable in the UI
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.Field/IsBrowsable.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.Field/IsBrowsable.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.Field/IsBrowsable.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(true)]
		[DslModeling::DomainObjectId("9a782fd3-4f83-4f26-b3a6-a5ba715342aa")]
		public virtual global::System.Boolean IsBrowsable
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isBrowsablePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsBrowsablePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Field.IsBrowsable domain property.
		/// </summary>
		internal sealed partial class IsBrowsablePropertyHandler : DslModeling::DomainPropertyValueHandler<FieldBase, global::System.Boolean>
		{
			private IsBrowsablePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Field.IsBrowsable domain property value handler.
			/// </summary>
			public static readonly IsBrowsablePropertyHandler Instance = new IsBrowsablePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Field.IsBrowsable domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsBrowsableDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(FieldBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.IsBrowsable;
				//return element.GetValue<global::System.Boolean>("IsBrowsable", element.isBrowsablePropertyStorage);
				//return element.isBrowsablePropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(FieldBase element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isBrowsablePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Field"));
				}
			}
		}
		
		#endregion
		#region Category domain property code
		
		/// <summary>
		/// Category domain property Id.
		/// </summary>
		public static readonly global::System.Guid CategoryDomainPropertyId = new global::System.Guid(0x7ebd917a, 0x67bb, 0x45c4, 0x93, 0xb7, 0x06, 0x69, 0x20, 0x65, 0x8f, 0x80);
		
		/// <summary>
		/// Storage for Category
		/// </summary>
		private global::System.String categoryPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Category domain property.
		/// Determines the property grid category of this item
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.Field/Category.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.Field/Category.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.Field/Category.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("7ebd917a-67bb-45c4-93b7-066920658f80")]
		public virtual global::System.String Category
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return categoryPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				CategoryPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Field.Category domain property.
		/// </summary>
		internal sealed partial class CategoryPropertyHandler : DslModeling::DomainPropertyValueHandler<FieldBase, global::System.String>
		{
			private CategoryPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Field.Category domain property value handler.
			/// </summary>
			public static readonly CategoryPropertyHandler Instance = new CategoryPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Field.Category domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return CategoryDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(FieldBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.Category;
				//return element.GetValue<global::System.String>("Category", element.categoryPropertyStorage);
				//return element.categoryPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(FieldBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.categoryPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Field"));
				}
			}
		}
		
		#endregion
		#region SortOrder domain property code
		
		/// <summary>
		/// SortOrder domain property Id.
		/// </summary>
		public static readonly global::System.Guid SortOrderDomainPropertyId = new global::System.Guid(0x2078ed80, 0xab07, 0x48a9, 0x82, 0x6b, 0xbd, 0x2f, 0xe6, 0x94, 0x2a, 0x70);
		
		/// <summary>
		/// Storage for SortOrder
		/// </summary>
		private global::System.Int32 sortOrderPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of SortOrder domain property.
		/// Order Entered/Database order
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.Field/SortOrder.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.Field/SortOrder.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("2078ed80-ab07-48a9-826b-bd2fe6942a70")]
		public virtual global::System.Int32 SortOrder
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return sortOrderPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				SortOrderPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Field.SortOrder domain property.
		/// </summary>
		internal sealed partial class SortOrderPropertyHandler : DslModeling::DomainPropertyValueHandler<FieldBase, global::System.Int32>
		{
			private SortOrderPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Field.SortOrder domain property value handler.
			/// </summary>
			public static readonly SortOrderPropertyHandler Instance = new SortOrderPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Field.SortOrder domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return SortOrderDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Int32 GetValue(FieldBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.SortOrder;
				//return element.GetValue<global::System.Int32>("SortOrder", element.sortOrderPropertyStorage);
				//return element.sortOrderPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(FieldBase element, global::System.Int32 newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Int32 oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.sortOrderPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Field"));
				}
			}
		}
		
		#endregion
		#region DataFormatString domain property code
		
		/// <summary>
		/// DataFormatString domain property Id.
		/// </summary>
		public static readonly global::System.Guid DataFormatStringDomainPropertyId = new global::System.Guid(0xa9a73844, 0x38f5, 0x4261, 0xbd, 0x5c, 0xaa, 0x8b, 0x86, 0x3b, 0xab, 0x7b);
		
		/// <summary>
		/// Storage for DataFormatString
		/// </summary>
		private global::System.String dataFormatStringPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of DataFormatString domain property.
		/// Identifies the format string for data input and presentation
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.Field/DataFormatString.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.Field/DataFormatString.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.Field/DataFormatString.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("a9a73844-38f5-4261-bd5c-aa8b863bab7b")]
		public virtual global::System.String DataFormatString
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return dataFormatStringPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DataFormatStringPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Field.DataFormatString domain property.
		/// </summary>
		internal sealed partial class DataFormatStringPropertyHandler : DslModeling::DomainPropertyValueHandler<FieldBase, global::System.String>
		{
			private DataFormatStringPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Field.DataFormatString domain property value handler.
			/// </summary>
			public static readonly DataFormatStringPropertyHandler Instance = new DataFormatStringPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Field.DataFormatString domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DataFormatStringDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(FieldBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.DataFormatString;
				//return element.GetValue<global::System.String>("DataFormatString", element.dataFormatStringPropertyStorage);
				//return element.dataFormatStringPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(FieldBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.dataFormatStringPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Field"));
				}
			}
		}
		
		#endregion
		#region UIDataType domain property code
		
		/// <summary>
		/// UIDataType domain property Id.
		/// </summary>
		public static readonly global::System.Guid UIDataTypeDomainPropertyId = new global::System.Guid(0xbd854f61, 0x0c58, 0x4072, 0xbc, 0x5f, 0x6f, 0xe9, 0xd4, 0x0c, 0xd6, 0xa5);
		
		/// <summary>
		/// Storage for UIDataType
		/// </summary>
		private UIDataTypeConstants uIDataTypePropertyStorage = UIDataTypeConstants.Custom;
		
		/// <summary>
		/// Gets or sets the value of UIDataType domain property.
		/// Determines formatting information for the UI
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.Field/UIDataType.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.Field/UIDataType.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.Field/UIDataType.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(UIDataTypeConstants.Custom)]
		[DslModeling::DomainObjectId("bd854f61-0c58-4072-bc5f-6fe9d40cd6a5")]
		public virtual UIDataTypeConstants UIDataType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return uIDataTypePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				UIDataTypePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Field.UIDataType domain property.
		/// </summary>
		internal sealed partial class UIDataTypePropertyHandler : DslModeling::DomainPropertyValueHandler<FieldBase, UIDataTypeConstants>
		{
			private UIDataTypePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Field.UIDataType domain property value handler.
			/// </summary>
			public static readonly UIDataTypePropertyHandler Instance = new UIDataTypePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Field.UIDataType domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return UIDataTypeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed UIDataTypeConstants GetValue(FieldBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.UIDataType;
				//return element.GetValue<UIDataTypeConstants>("UIDataType", element.uIDataTypePropertyStorage);
				//return element.uIDataTypePropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(FieldBase element, UIDataTypeConstants newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				UIDataTypeConstants oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.uIDataTypePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Field"));
				}
			}
		}
		
		#endregion
		#region DefaultIsFunc domain property code
		
		/// <summary>
		/// DefaultIsFunc domain property Id.
		/// </summary>
		public static readonly global::System.Guid DefaultIsFuncDomainPropertyId = new global::System.Guid(0x46c0c3a4, 0x3a50, 0x41c2, 0x84, 0x93, 0xc8, 0x52, 0xec, 0x9a, 0x9e, 0x41);
		
		/// <summary>
		/// Storage for DefaultIsFunc
		/// </summary>
		private global::System.Boolean defaultIsFuncPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of DefaultIsFunc domain property.
		/// Determines if the default value is a function
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.Field/DefaultIsFunc.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.Field/DefaultIsFunc.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.Field/DefaultIsFunc.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("46c0c3a4-3a50-41c2-8493-c852ec9a9e41")]
		public virtual global::System.Boolean DefaultIsFunc
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return defaultIsFuncPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DefaultIsFuncPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Field.DefaultIsFunc domain property.
		/// </summary>
		internal sealed partial class DefaultIsFuncPropertyHandler : DslModeling::DomainPropertyValueHandler<FieldBase, global::System.Boolean>
		{
			private DefaultIsFuncPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Field.DefaultIsFunc domain property value handler.
			/// </summary>
			public static readonly DefaultIsFuncPropertyHandler Instance = new DefaultIsFuncPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Field.DefaultIsFunc domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DefaultIsFuncDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(FieldBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.DefaultIsFunc;
				//return element.GetValue<global::System.Boolean>("DefaultIsFunc", element.defaultIsFuncPropertyStorage);
				//return element.defaultIsFuncPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(FieldBase element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.defaultIsFuncPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Field"));
				}
			}
		}
		
		#endregion
		#region ImportedDefaultName domain property code
		
		/// <summary>
		/// ImportedDefaultName domain property Id.
		/// </summary>
		public static readonly global::System.Guid ImportedDefaultNameDomainPropertyId = new global::System.Guid(0x3122c386, 0xbdd3, 0x49ff, 0xa1, 0xef, 0x40, 0xaa, 0xc8, 0xb4, 0x80, 0x3d);
		
		/// <summary>
		/// Storage for ImportedDefaultName
		/// </summary>
		private global::System.String importedDefaultNamePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of ImportedDefaultName domain property.
		/// The imported database default name
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.Field/ImportedDefaultName.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.Field/ImportedDefaultName.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("3122c386-bdd3-49ff-a1ef-40aac8b4803d")]
		public virtual global::System.String ImportedDefaultName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return importedDefaultNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ImportedDefaultNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Field.ImportedDefaultName domain property.
		/// </summary>
		internal sealed partial class ImportedDefaultNamePropertyHandler : DslModeling::DomainPropertyValueHandler<FieldBase, global::System.String>
		{
			private ImportedDefaultNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Field.ImportedDefaultName domain property value handler.
			/// </summary>
			public static readonly ImportedDefaultNamePropertyHandler Instance = new ImportedDefaultNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Field.ImportedDefaultName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ImportedDefaultNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(FieldBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.ImportedDefaultName;
				//return element.GetValue<global::System.String>("ImportedDefaultName", element.importedDefaultNamePropertyStorage);
				//return element.importedDefaultNamePropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(FieldBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.importedDefaultNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Field"));
				}
			}
		}
		
		#endregion
		#region Entity opposite domain role accessor
		/// <summary>
		/// Gets or sets Entity.
		/// </summary>
		public virtual Entity Entity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::nHydrate2.Dsl.EntityHasFields.FieldDomainRoleId) as Entity;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::nHydrate2.Dsl.EntityHasFields.FieldDomainRoleId, value);
			}
		}
		#endregion
		#region FieldMetadata opposite domain role accessor
		
		/// <summary>
		/// Gets a list of FieldMetadata.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<FieldMetadata> FieldMetadata
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<FieldMetadata>, FieldMetadata>(global::nHydrate2.Dsl.FieldHasMetadata.FieldDomainRoleId);
			}
		}
		#endregion
		#region Modules opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Modules.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Module> Modules
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Module>, Module>(global::nHydrate2.Dsl.FieldReferencesModules.FieldDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::nHydrate2.Dsl.FieldMetadata.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::nHydrate2.Dsl.FieldMetadata sourceFieldMetadata1 = sourceElement as global::nHydrate2.Dsl.FieldMetadata;
			if (sourceFieldMetadata1 != null)
			{
				// Create link for path FieldHasMetadata.FieldMetadata
				this.FieldMetadata.Add(sourceFieldMetadata1);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::nHydrate2.Dsl.FieldMetadata sourceFieldMetadata1 = sourceElement as global::nHydrate2.Dsl.FieldMetadata;
			if (sourceFieldMetadata1 != null)
			{
				// Delete link for path FieldHasMetadata.FieldMetadata
				
				foreach (DslModeling::ElementLink link in global::nHydrate2.Dsl.FieldHasMetadata.GetLinks((global::nHydrate2.Dsl.Field)this, sourceFieldMetadata1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::nHydrate2.Dsl.FieldHasMetadata.FieldDomainRoleId, global::nHydrate2.Dsl.FieldHasMetadata.FieldMetadataDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
	/// <summary>
	/// DomainClass Field
	/// This is a field in a database table
	/// </summary>
	[global::System.CLSCompliant(true)]
			
	public partial class Field : FieldBase
	{
		#region Constructors
		// Constructors were not generated for this class because it had HasCustomConstructor
		// set to true. Please provide the constructors below in a partial class.
		///// <summary>
		///// Constructor
		///// </summary>
		///// <param name="store">Store where new element is to be created.</param>
		///// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		//public Field(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
		//	: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		//{
		//}
		//
		///// <summary>
		///// Constructor
		///// </summary>
		///// <param name="partition">Partition where new element is to be created.</param>
		///// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		//public Field(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
		//	: base(partition, propertyAssignments)
		//{
		//}
		#endregion
	}
}
namespace nHydrate2.Dsl
{
	/// <summary>
	/// Double-derived base class for DomainClass StoredProcedure
	/// </summary>
	[DslDesign::DisplayNameResource("nHydrate2.Dsl.StoredProcedure.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("nHydrate2.Dsl.StoredProcedure.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::nHydrate2.Dsl.nHydrate2DomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("e32474f5-b350-4120-9e62-0790cd4b3f90")]
	public abstract partial class StoredProcedureBase : DslModeling::ModelElement, System.ComponentModel.INotifyPropertyChanged
	{
		#region INotifyPropertyChanged
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs e)
		{
			if (this.PropertyChanged != null)
				this.PropertyChanged(this, e);
		}
		#endregion
	
		#region Constructors, domain class Id
	
		/// <summary>
		/// StoredProcedure domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xe32474f5, 0xb350, 0x4120, 0x9e, 0x62, 0x07, 0x90, 0xcd, 0x4b, 0x3f, 0x90);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected StoredProcedureBase(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region SQL domain property code
		
		/// <summary>
		/// SQL domain property Id.
		/// </summary>
		public static readonly global::System.Guid SQLDomainPropertyId = new global::System.Guid(0x3a65566b, 0x2e97, 0x446b, 0xab, 0xee, 0xda, 0x73, 0xd0, 0x30, 0x9a, 0x06);
		
		/// <summary>
		/// Storage for SQL
		/// </summary>
		private global::System.String sQLPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of SQL domain property.
		/// Determines SQL statement used to create the database stored procedure object
		/// </summary>
		[System.ComponentModel.Editor(typeof(nHydrate2.Dsl.Design.Editors.SQLEditor), typeof(System.Drawing.Design.UITypeEditor))]
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.StoredProcedure/SQL.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.StoredProcedure/SQL.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.StoredProcedure/SQL.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("3a65566b-2e97-446b-abee-da73d0309a06")]
		public virtual global::System.String SQL
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return sQLPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				SQLPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the StoredProcedure.SQL domain property.
		/// </summary>
		internal sealed partial class SQLPropertyHandler : DslModeling::DomainPropertyValueHandler<StoredProcedureBase, global::System.String>
		{
			private SQLPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the StoredProcedure.SQL domain property value handler.
			/// </summary>
			public static readonly SQLPropertyHandler Instance = new SQLPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the StoredProcedure.SQL domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return SQLDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(StoredProcedureBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.SQL;
				//return element.GetValue<global::System.String>("SQL", element.sQLPropertyStorage);
				//return element.sQLPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(StoredProcedureBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.sQLPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("StoredProcedure"));
				}
			}
		}
		
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x045175eb, 0x9128, 0x4491, 0x86, 0x4d, 0x00, 0xe8, 0xd1, 0xfd, 0xb1, 0x07);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Determines the name of this object
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.StoredProcedure/Name.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.StoredProcedure/Name.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.StoredProcedure/Name.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("045175eb-9128-4491-864d-00e8d1fdb107")]
		public virtual global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the StoredProcedure.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<StoredProcedureBase, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the StoredProcedure.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the StoredProcedure.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(StoredProcedureBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.Name;
				//return element.GetValue<global::System.String>("Name", element.namePropertyStorage);
				//return element.namePropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(StoredProcedureBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("StoredProcedure"));
				}
			}
		}
		
		#endregion
		#region IsGenerated domain property code
		
		/// <summary>
		/// IsGenerated domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsGeneratedDomainPropertyId = new global::System.Guid(0x41ba3b0e, 0x81bc, 0x4fa0, 0x97, 0x7e, 0x51, 0x9f, 0xb6, 0x09, 0xa1, 0x78);
		
		/// <summary>
		/// Storage for IsGenerated
		/// </summary>
		private global::System.Boolean isGeneratedPropertyStorage = true;
		
		/// <summary>
		/// Gets or sets the value of IsGenerated domain property.
		/// Determines if this item is used when generating
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.StoredProcedure/IsGenerated.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.StoredProcedure/IsGenerated.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.StoredProcedure/IsGenerated.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(true)]
		[DslModeling::DomainObjectId("41ba3b0e-81bc-4fa0-977e-519fb609a178")]
		public virtual global::System.Boolean IsGenerated
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isGeneratedPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsGeneratedPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the StoredProcedure.IsGenerated domain property.
		/// </summary>
		internal sealed partial class IsGeneratedPropertyHandler : DslModeling::DomainPropertyValueHandler<StoredProcedureBase, global::System.Boolean>
		{
			private IsGeneratedPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the StoredProcedure.IsGenerated domain property value handler.
			/// </summary>
			public static readonly IsGeneratedPropertyHandler Instance = new IsGeneratedPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the StoredProcedure.IsGenerated domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsGeneratedDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(StoredProcedureBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.IsGenerated;
				//return element.GetValue<global::System.Boolean>("IsGenerated", element.isGeneratedPropertyStorage);
				//return element.isGeneratedPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(StoredProcedureBase element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isGeneratedPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("StoredProcedure"));
				}
			}
		}
		
		#endregion
		#region CodeFacade domain property code
		
		/// <summary>
		/// CodeFacade domain property Id.
		/// </summary>
		public static readonly global::System.Guid CodeFacadeDomainPropertyId = new global::System.Guid(0x9252ed3a, 0x0e26, 0x4bef, 0xb1, 0x14, 0x0e, 0xe1, 0xdd, 0x2b, 0x70, 0xba);
		
		/// <summary>
		/// Storage for CodeFacade
		/// </summary>
		private global::System.String codeFacadePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of CodeFacade domain property.
		/// Determines the object name used in the API. If this property is blank the 'Name'
		/// property is used in the API. This property can be used to mask the database
		/// identifier.
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.StoredProcedure/CodeFacade.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.StoredProcedure/CodeFacade.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.StoredProcedure/CodeFacade.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("9252ed3a-0e26-4bef-b114-0ee1dd2b70ba")]
		public virtual global::System.String CodeFacade
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return codeFacadePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				CodeFacadePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the StoredProcedure.CodeFacade domain property.
		/// </summary>
		internal sealed partial class CodeFacadePropertyHandler : DslModeling::DomainPropertyValueHandler<StoredProcedureBase, global::System.String>
		{
			private CodeFacadePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the StoredProcedure.CodeFacade domain property value handler.
			/// </summary>
			public static readonly CodeFacadePropertyHandler Instance = new CodeFacadePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the StoredProcedure.CodeFacade domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return CodeFacadeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(StoredProcedureBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.CodeFacade;
				//return element.GetValue<global::System.String>("CodeFacade", element.codeFacadePropertyStorage);
				//return element.codeFacadePropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(StoredProcedureBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.codeFacadePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("StoredProcedure"));
				}
			}
		}
		
		#endregion
		#region Summary domain property code
		
		/// <summary>
		/// Summary domain property Id.
		/// </summary>
		public static readonly global::System.Guid SummaryDomainPropertyId = new global::System.Guid(0x61da569b, 0x9110, 0x46e4, 0x99, 0xb9, 0x1c, 0x0a, 0x7f, 0xae, 0xe7, 0x9e);
		
		/// <summary>
		/// Storage for Summary
		/// </summary>
		private global::System.String summaryPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Summary domain property.
		/// Determines the summary of this object
		/// </summary>
		[System.ComponentModel.Editor(typeof(System.ComponentModel.Design.MultilineStringEditor), typeof(System.Drawing.Design.UITypeEditor))]
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.StoredProcedure/Summary.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.StoredProcedure/Summary.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.StoredProcedure/Summary.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("61da569b-9110-46e4-99b9-1c0a7faee79e")]
		public virtual global::System.String Summary
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return summaryPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				SummaryPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the StoredProcedure.Summary domain property.
		/// </summary>
		internal sealed partial class SummaryPropertyHandler : DslModeling::DomainPropertyValueHandler<StoredProcedureBase, global::System.String>
		{
			private SummaryPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the StoredProcedure.Summary domain property value handler.
			/// </summary>
			public static readonly SummaryPropertyHandler Instance = new SummaryPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the StoredProcedure.Summary domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return SummaryDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(StoredProcedureBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.Summary;
				//return element.GetValue<global::System.String>("Summary", element.summaryPropertyStorage);
				//return element.summaryPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(StoredProcedureBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.summaryPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("StoredProcedure"));
				}
			}
		}
		
		#endregion
		#region Schema domain property code
		
		/// <summary>
		/// Schema domain property Id.
		/// </summary>
		public static readonly global::System.Guid SchemaDomainPropertyId = new global::System.Guid(0x1c8ece9a, 0x182f, 0x4210, 0xa3, 0x6a, 0x34, 0x4d, 0x7d, 0x07, 0x71, 0xb2);
		
		/// <summary>
		/// Storage for Schema
		/// </summary>
		private global::System.String schemaPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Schema domain property.
		/// Determines the parent schema for this object
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.StoredProcedure/Schema.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.StoredProcedure/Schema.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.StoredProcedure/Schema.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("1c8ece9a-182f-4210-a36a-344d7d0771b2")]
		public virtual global::System.String Schema
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return schemaPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				SchemaPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the StoredProcedure.Schema domain property.
		/// </summary>
		internal sealed partial class SchemaPropertyHandler : DslModeling::DomainPropertyValueHandler<StoredProcedureBase, global::System.String>
		{
			private SchemaPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the StoredProcedure.Schema domain property value handler.
			/// </summary>
			public static readonly SchemaPropertyHandler Instance = new SchemaPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the StoredProcedure.Schema domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return SchemaDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(StoredProcedureBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.Schema;
				//return element.GetValue<global::System.String>("Schema", element.schemaPropertyStorage);
				//return element.schemaPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(StoredProcedureBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.schemaPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("StoredProcedure"));
				}
			}
		}
		
		#endregion
		#region IsExisting domain property code
		
		/// <summary>
		/// IsExisting domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsExistingDomainPropertyId = new global::System.Guid(0x2083b2fd, 0xc2b3, 0x4fd5, 0x82, 0x66, 0x35, 0x72, 0xb5, 0x71, 0x24, 0xa0);
		
		/// <summary>
		/// Storage for IsExisting
		/// </summary>
		private global::System.Boolean isExistingPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of IsExisting domain property.
		/// Determines the this stored procedure is a pre-existing one and should not be
		/// overwritten.
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.StoredProcedure/IsExisting.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.StoredProcedure/IsExisting.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.StoredProcedure/IsExisting.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("2083b2fd-c2b3-4fd5-8266-3572b57124a0")]
		public virtual global::System.Boolean IsExisting
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isExistingPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsExistingPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the StoredProcedure.IsExisting domain property.
		/// </summary>
		internal sealed partial class IsExistingPropertyHandler : DslModeling::DomainPropertyValueHandler<StoredProcedureBase, global::System.Boolean>
		{
			private IsExistingPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the StoredProcedure.IsExisting domain property value handler.
			/// </summary>
			public static readonly IsExistingPropertyHandler Instance = new IsExistingPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the StoredProcedure.IsExisting domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsExistingDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(StoredProcedureBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.IsExisting;
				//return element.GetValue<global::System.Boolean>("IsExisting", element.isExistingPropertyStorage);
				//return element.isExistingPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(StoredProcedureBase element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isExistingPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("StoredProcedure"));
				}
			}
		}
		
		#endregion
		#region DatabaseObjectName domain property code
		
		/// <summary>
		/// DatabaseObjectName domain property Id.
		/// </summary>
		public static readonly global::System.Guid DatabaseObjectNameDomainPropertyId = new global::System.Guid(0x293cecfe, 0xcfe0, 0x462e, 0x99, 0x03, 0x53, 0x8c, 0x43, 0x16, 0x2e, 0xef);
		
		/// <summary>
		/// Storage for DatabaseObjectName
		/// </summary>
		private global::System.String databaseObjectNamePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of DatabaseObjectName domain property.
		/// Determines the name of this stored procedure in the database. Leave empty to
		/// auto-generate.
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.StoredProcedure/DatabaseObjectName.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.StoredProcedure/DatabaseObjectName.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.StoredProcedure/DatabaseObjectName.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("293cecfe-cfe0-462e-9903-538c43162eef")]
		public virtual global::System.String DatabaseObjectName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return databaseObjectNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DatabaseObjectNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the StoredProcedure.DatabaseObjectName domain property.
		/// </summary>
		internal sealed partial class DatabaseObjectNamePropertyHandler : DslModeling::DomainPropertyValueHandler<StoredProcedureBase, global::System.String>
		{
			private DatabaseObjectNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the StoredProcedure.DatabaseObjectName domain property value handler.
			/// </summary>
			public static readonly DatabaseObjectNamePropertyHandler Instance = new DatabaseObjectNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the StoredProcedure.DatabaseObjectName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DatabaseObjectNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(StoredProcedureBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.DatabaseObjectName;
				//return element.GetValue<global::System.String>("DatabaseObjectName", element.databaseObjectNamePropertyStorage);
				//return element.databaseObjectNamePropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(StoredProcedureBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.databaseObjectNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("StoredProcedure"));
				}
			}
		}
		
		#endregion
		#region GeneratesDoubleDerived domain property code
		
		/// <summary>
		/// GeneratesDoubleDerived domain property Id.
		/// </summary>
		public static readonly global::System.Guid GeneratesDoubleDerivedDomainPropertyId = new global::System.Guid(0xe12501b1, 0x2015, 0x49e6, 0xa3, 0xae, 0xe6, 0xac, 0x38, 0x7f, 0x9c, 0xb3);
		
		/// <summary>
		/// Storage for GeneratesDoubleDerived
		/// </summary>
		private global::System.Boolean generatesDoubleDerivedPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of GeneratesDoubleDerived domain property.
		/// If True, will generate both a base class with all functionality and a partial
		/// class to support customization through overrides
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.StoredProcedure/GeneratesDoubleDerived.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.StoredProcedure/GeneratesDoubleDerived.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.StoredProcedure/GeneratesDoubleDerived.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("e12501b1-2015-49e6-a3ae-e6ac387f9cb3")]
		public virtual global::System.Boolean GeneratesDoubleDerived
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return generatesDoubleDerivedPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				GeneratesDoubleDerivedPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the StoredProcedure.GeneratesDoubleDerived domain property.
		/// </summary>
		internal sealed partial class GeneratesDoubleDerivedPropertyHandler : DslModeling::DomainPropertyValueHandler<StoredProcedureBase, global::System.Boolean>
		{
			private GeneratesDoubleDerivedPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the StoredProcedure.GeneratesDoubleDerived domain property value handler.
			/// </summary>
			public static readonly GeneratesDoubleDerivedPropertyHandler Instance = new GeneratesDoubleDerivedPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the StoredProcedure.GeneratesDoubleDerived domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return GeneratesDoubleDerivedDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(StoredProcedureBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.GeneratesDoubleDerived;
				//return element.GetValue<global::System.Boolean>("GeneratesDoubleDerived", element.generatesDoubleDerivedPropertyStorage);
				//return element.generatesDoubleDerivedPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(StoredProcedureBase element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.generatesDoubleDerivedPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("StoredProcedure"));
				}
			}
		}
		
		#endregion
		#region PrecedenceOrder domain property code
		
		/// <summary>
		/// PrecedenceOrder domain property Id.
		/// </summary>
		public static readonly global::System.Guid PrecedenceOrderDomainPropertyId = new global::System.Guid(0x5d5f712c, 0xbc88, 0x4720, 0x89, 0x5a, 0xd5, 0x50, 0xd3, 0x2f, 0x5d, 0x61);
		
		/// <summary>
		/// Storage for PrecedenceOrder
		/// </summary>
		private global::System.Int32 precedenceOrderPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of PrecedenceOrder domain property.
		/// Determines the order generated scripts are run
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.StoredProcedure/PrecedenceOrder.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.StoredProcedure/PrecedenceOrder.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("5d5f712c-bc88-4720-895a-d550d32f5d61")]
		public virtual global::System.Int32 PrecedenceOrder
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return precedenceOrderPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				PrecedenceOrderPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the StoredProcedure.PrecedenceOrder domain property.
		/// </summary>
		internal sealed partial class PrecedenceOrderPropertyHandler : DslModeling::DomainPropertyValueHandler<StoredProcedureBase, global::System.Int32>
		{
			private PrecedenceOrderPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the StoredProcedure.PrecedenceOrder domain property value handler.
			/// </summary>
			public static readonly PrecedenceOrderPropertyHandler Instance = new PrecedenceOrderPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the StoredProcedure.PrecedenceOrder domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return PrecedenceOrderDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Int32 GetValue(StoredProcedureBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.PrecedenceOrder;
				//return element.GetValue<global::System.Int32>("PrecedenceOrder", element.precedenceOrderPropertyStorage);
				//return element.precedenceOrderPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(StoredProcedureBase element, global::System.Int32 newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Int32 oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.precedenceOrderPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("StoredProcedure"));
				}
			}
		}
		
		#endregion
		#region nHydrateModel opposite domain role accessor
		/// <summary>
		/// Gets or sets nHydrateModel.
		/// </summary>
		public virtual nHydrateModel nHydrateModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::nHydrate2.Dsl.nHydrateModelHasStoredProcedures.StoredProcedureDomainRoleId) as nHydrateModel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::nHydrate2.Dsl.nHydrateModelHasStoredProcedures.StoredProcedureDomainRoleId, value);
			}
		}
		#endregion
		#region Fields opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Fields.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<StoredProcedureField> Fields
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<StoredProcedureField>, StoredProcedureField>(global::nHydrate2.Dsl.StoredProcedureHasFields.StoredProcedureDomainRoleId);
			}
		}
		#endregion
		#region Parameters opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Parameters.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<StoredProcedureParameter> Parameters
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<StoredProcedureParameter>, StoredProcedureParameter>(global::nHydrate2.Dsl.StoredProcedureHasParameters.StoredProcedureDomainRoleId);
			}
		}
		#endregion
		#region Modules opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Modules.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Module> Modules
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Module>, Module>(global::nHydrate2.Dsl.StoredProcedureReferencesModules.StoredProcedureDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::nHydrate2.Dsl.StoredProcedureParameter.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::nHydrate2.Dsl.StoredProcedureField.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::nHydrate2.Dsl.StoredProcedureParameter sourceStoredProcedureParameter1 = sourceElement as global::nHydrate2.Dsl.StoredProcedureParameter;
			if (sourceStoredProcedureParameter1 != null)
			{
				// Create link for path StoredProcedureHasParameters.Parameters
				this.Parameters.Add(sourceStoredProcedureParameter1);

				return;
			}
				
			global::nHydrate2.Dsl.StoredProcedureField sourceStoredProcedureField2 = sourceElement as global::nHydrate2.Dsl.StoredProcedureField;
			if (sourceStoredProcedureField2 != null)
			{
				// Create link for path StoredProcedureHasFields.Fields
				this.Fields.Add(sourceStoredProcedureField2);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::nHydrate2.Dsl.StoredProcedureParameter sourceStoredProcedureParameter1 = sourceElement as global::nHydrate2.Dsl.StoredProcedureParameter;
			if (sourceStoredProcedureParameter1 != null)
			{
				// Delete link for path StoredProcedureHasParameters.Parameters
				
				foreach (DslModeling::ElementLink link in global::nHydrate2.Dsl.StoredProcedureHasParameters.GetLinks((global::nHydrate2.Dsl.StoredProcedure)this, sourceStoredProcedureParameter1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::nHydrate2.Dsl.StoredProcedureHasParameters.StoredProcedureDomainRoleId, global::nHydrate2.Dsl.StoredProcedureHasParameters.StoredProcedureParameterDomainRoleId);
				}

				return;
			}
				
			global::nHydrate2.Dsl.StoredProcedureField sourceStoredProcedureField2 = sourceElement as global::nHydrate2.Dsl.StoredProcedureField;
			if (sourceStoredProcedureField2 != null)
			{
				// Delete link for path StoredProcedureHasFields.Fields
				
				foreach (DslModeling::ElementLink link in global::nHydrate2.Dsl.StoredProcedureHasFields.GetLinks((global::nHydrate2.Dsl.StoredProcedure)this, sourceStoredProcedureField2))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::nHydrate2.Dsl.StoredProcedureHasFields.StoredProcedureDomainRoleId, global::nHydrate2.Dsl.StoredProcedureHasFields.StoredProcedureFieldDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
	/// <summary>
	/// DomainClass StoredProcedure
	/// This is a custom database stored procedure
	/// </summary>
	[global::System.CLSCompliant(true)]
			
	public partial class StoredProcedure : StoredProcedureBase
	{
		#region Constructors
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public StoredProcedure(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public StoredProcedure(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace nHydrate2.Dsl
{
	/// <summary>
	/// Double-derived base class for DomainClass StoredProcedureField
	/// </summary>
	[DslDesign::DisplayNameResource("nHydrate2.Dsl.StoredProcedureField.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("nHydrate2.Dsl.StoredProcedureField.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::nHydrate2.Dsl.nHydrate2DomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("09f86d91-8e2f-4a68-a738-8ab1855656d7")]
	public abstract partial class StoredProcedureFieldBase : DslModeling::ModelElement, System.ComponentModel.INotifyPropertyChanged
	{
		#region INotifyPropertyChanged
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs e)
		{
			if (this.PropertyChanged != null)
				this.PropertyChanged(this, e);
		}
		#endregion
	
		#region Constructors, domain class Id
	
		/// <summary>
		/// StoredProcedureField domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x09f86d91, 0x8e2f, 0x4a68, 0xa7, 0x38, 0x8a, 0xb1, 0x85, 0x56, 0x56, 0xd7);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected StoredProcedureFieldBase(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x27eac854, 0x6501, 0x4f02, 0x8c, 0x85, 0x11, 0x34, 0x09, 0x24, 0x63, 0x94);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Determines the name of this object
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.StoredProcedureField/Name.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.StoredProcedureField/Name.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.StoredProcedureField/Name.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("27eac854-6501-4f02-8c85-113409246394")]
		public virtual global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the StoredProcedureField.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<StoredProcedureFieldBase, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the StoredProcedureField.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the StoredProcedureField.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(StoredProcedureFieldBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.Name;
				//return element.GetValue<global::System.String>("Name", element.namePropertyStorage);
				//return element.namePropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(StoredProcedureFieldBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("StoredProcedureField"));
				}
			}
		}
		
		#endregion
		#region FriendlyName domain property code
		
		/// <summary>
		/// FriendlyName domain property Id.
		/// </summary>
		public static readonly global::System.Guid FriendlyNameDomainPropertyId = new global::System.Guid(0x58043103, 0x5d33, 0x4dd8, 0x88, 0xdf, 0x03, 0x2f, 0xf7, 0x98, 0xf2, 0x2d);
		
		/// <summary>
		/// Storage for FriendlyName
		/// </summary>
		private global::System.String friendlyNamePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of FriendlyName domain property.
		/// Determines a friend name to display to users
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.StoredProcedureField/FriendlyName.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.StoredProcedureField/FriendlyName.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.StoredProcedureField/FriendlyName.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("58043103-5d33-4dd8-88df-032ff798f22d")]
		public virtual global::System.String FriendlyName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return friendlyNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				FriendlyNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the StoredProcedureField.FriendlyName domain property.
		/// </summary>
		internal sealed partial class FriendlyNamePropertyHandler : DslModeling::DomainPropertyValueHandler<StoredProcedureFieldBase, global::System.String>
		{
			private FriendlyNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the StoredProcedureField.FriendlyName domain property value handler.
			/// </summary>
			public static readonly FriendlyNamePropertyHandler Instance = new FriendlyNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the StoredProcedureField.FriendlyName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return FriendlyNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(StoredProcedureFieldBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.FriendlyName;
				//return element.GetValue<global::System.String>("FriendlyName", element.friendlyNamePropertyStorage);
				//return element.friendlyNamePropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(StoredProcedureFieldBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.friendlyNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("StoredProcedureField"));
				}
			}
		}
		
		#endregion
		#region CodeFacade domain property code
		
		/// <summary>
		/// CodeFacade domain property Id.
		/// </summary>
		public static readonly global::System.Guid CodeFacadeDomainPropertyId = new global::System.Guid(0xfe26f5f8, 0x58d8, 0x48fd, 0xb6, 0x44, 0x9d, 0x77, 0x70, 0x4f, 0xf8, 0x55);
		
		/// <summary>
		/// Storage for CodeFacade
		/// </summary>
		private global::System.String codeFacadePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of CodeFacade domain property.
		/// Determines the object name used in the API. If this property is blank the 'Name'
		/// property is used in the API. This property can be used to mask the database
		/// identifier.
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.StoredProcedureField/CodeFacade.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.StoredProcedureField/CodeFacade.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.StoredProcedureField/CodeFacade.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("fe26f5f8-58d8-48fd-b644-9d77704ff855")]
		public virtual global::System.String CodeFacade
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return codeFacadePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				CodeFacadePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the StoredProcedureField.CodeFacade domain property.
		/// </summary>
		internal sealed partial class CodeFacadePropertyHandler : DslModeling::DomainPropertyValueHandler<StoredProcedureFieldBase, global::System.String>
		{
			private CodeFacadePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the StoredProcedureField.CodeFacade domain property value handler.
			/// </summary>
			public static readonly CodeFacadePropertyHandler Instance = new CodeFacadePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the StoredProcedureField.CodeFacade domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return CodeFacadeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(StoredProcedureFieldBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.CodeFacade;
				//return element.GetValue<global::System.String>("CodeFacade", element.codeFacadePropertyStorage);
				//return element.codeFacadePropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(StoredProcedureFieldBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.codeFacadePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("StoredProcedureField"));
				}
			}
		}
		
		#endregion
		#region Nullable domain property code
		
		/// <summary>
		/// Nullable domain property Id.
		/// </summary>
		public static readonly global::System.Guid NullableDomainPropertyId = new global::System.Guid(0x06f88333, 0xb7c4, 0x43cf, 0x89, 0xe5, 0xef, 0xfd, 0x8b, 0xf9, 0x49, 0x85);
		
		/// <summary>
		/// Storage for Nullable
		/// </summary>
		private global::System.Boolean nullablePropertyStorage = true;
		
		/// <summary>
		/// Gets or sets the value of Nullable domain property.
		/// Determines if this item allows null values
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.StoredProcedureField/Nullable.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.StoredProcedureField/Nullable.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.StoredProcedureField/Nullable.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(true)]
		[DslModeling::DomainObjectId("06f88333-b7c4-43cf-89e5-effd8bf94985")]
		public virtual global::System.Boolean Nullable
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return nullablePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NullablePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the StoredProcedureField.Nullable domain property.
		/// </summary>
		internal sealed partial class NullablePropertyHandler : DslModeling::DomainPropertyValueHandler<StoredProcedureFieldBase, global::System.Boolean>
		{
			private NullablePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the StoredProcedureField.Nullable domain property value handler.
			/// </summary>
			public static readonly NullablePropertyHandler Instance = new NullablePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the StoredProcedureField.Nullable domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NullableDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(StoredProcedureFieldBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.Nullable;
				//return element.GetValue<global::System.Boolean>("Nullable", element.nullablePropertyStorage);
				//return element.nullablePropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(StoredProcedureFieldBase element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.nullablePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("StoredProcedureField"));
				}
			}
		}
		
		#endregion
		#region DataType domain property code
		
		/// <summary>
		/// DataType domain property Id.
		/// </summary>
		public static readonly global::System.Guid DataTypeDomainPropertyId = new global::System.Guid(0x49c40309, 0x92a6, 0x4d7d, 0x87, 0xbc, 0x0c, 0xec, 0x2e, 0x05, 0xd7, 0xa5);
		
		/// <summary>
		/// Storage for DataType
		/// </summary>
		private DataTypeConstants dataTypePropertyStorage = DataTypeConstants.VarChar;
		
		/// <summary>
		/// Gets or sets the value of DataType domain property.
		/// Determines the data type of this field
		/// </summary>
		[System.ComponentModel.TypeConverter(typeof(nHydrate2.Dsl.Design.Converters.DatatypeConverter))]
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.StoredProcedureField/DataType.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.StoredProcedureField/DataType.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.StoredProcedureField/DataType.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(DataTypeConstants.VarChar)]
		[DslModeling::DomainObjectId("49c40309-92a6-4d7d-87bc-0cec2e05d7a5")]
		public virtual DataTypeConstants DataType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return dataTypePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DataTypePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the StoredProcedureField.DataType domain property.
		/// </summary>
		internal sealed partial class DataTypePropertyHandler : DslModeling::DomainPropertyValueHandler<StoredProcedureFieldBase, DataTypeConstants>
		{
			private DataTypePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the StoredProcedureField.DataType domain property value handler.
			/// </summary>
			public static readonly DataTypePropertyHandler Instance = new DataTypePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the StoredProcedureField.DataType domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DataTypeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed DataTypeConstants GetValue(StoredProcedureFieldBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.DataType;
				//return element.GetValue<DataTypeConstants>("DataType", element.dataTypePropertyStorage);
				//return element.dataTypePropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(StoredProcedureFieldBase element, DataTypeConstants newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				DataTypeConstants oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.dataTypePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("StoredProcedureField"));
				}
			}
		}
		
		#endregion
		#region Summary domain property code
		
		/// <summary>
		/// Summary domain property Id.
		/// </summary>
		public static readonly global::System.Guid SummaryDomainPropertyId = new global::System.Guid(0xbf7c1328, 0xc7bf, 0x480b, 0x80, 0x7e, 0xc7, 0xfc, 0x6e, 0xdd, 0x39, 0xfb);
		
		/// <summary>
		/// Storage for Summary
		/// </summary>
		private global::System.String summaryPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Summary domain property.
		/// Determines the summary of this object
		/// </summary>
		[System.ComponentModel.Editor(typeof(System.ComponentModel.Design.MultilineStringEditor), typeof(System.Drawing.Design.UITypeEditor))]
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.StoredProcedureField/Summary.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.StoredProcedureField/Summary.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.StoredProcedureField/Summary.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("bf7c1328-c7bf-480b-807e-c7fc6edd39fb")]
		public virtual global::System.String Summary
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return summaryPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				SummaryPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the StoredProcedureField.Summary domain property.
		/// </summary>
		internal sealed partial class SummaryPropertyHandler : DslModeling::DomainPropertyValueHandler<StoredProcedureFieldBase, global::System.String>
		{
			private SummaryPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the StoredProcedureField.Summary domain property value handler.
			/// </summary>
			public static readonly SummaryPropertyHandler Instance = new SummaryPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the StoredProcedureField.Summary domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return SummaryDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(StoredProcedureFieldBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.Summary;
				//return element.GetValue<global::System.String>("Summary", element.summaryPropertyStorage);
				//return element.summaryPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(StoredProcedureFieldBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.summaryPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("StoredProcedureField"));
				}
			}
		}
		
		#endregion
		#region Default domain property code
		
		/// <summary>
		/// Default domain property Id.
		/// </summary>
		public static readonly global::System.Guid DefaultDomainPropertyId = new global::System.Guid(0x3601215e, 0x78bc, 0x4e3e, 0xb2, 0x98, 0xb1, 0x80, 0x5f, 0x51, 0x52, 0xa9);
		
		/// <summary>
		/// Storage for Default
		/// </summary>
		private global::System.String defaultPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Default domain property.
		/// Determines the default value of this object
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.StoredProcedureField/Default.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.StoredProcedureField/Default.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.StoredProcedureField/Default.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("3601215e-78bc-4e3e-b298-b1805f5152a9")]
		public virtual global::System.String Default
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return defaultPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DefaultPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the StoredProcedureField.Default domain property.
		/// </summary>
		internal sealed partial class DefaultPropertyHandler : DslModeling::DomainPropertyValueHandler<StoredProcedureFieldBase, global::System.String>
		{
			private DefaultPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the StoredProcedureField.Default domain property value handler.
			/// </summary>
			public static readonly DefaultPropertyHandler Instance = new DefaultPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the StoredProcedureField.Default domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DefaultDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(StoredProcedureFieldBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.Default;
				//return element.GetValue<global::System.String>("Default", element.defaultPropertyStorage);
				//return element.defaultPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(StoredProcedureFieldBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.defaultPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("StoredProcedureField"));
				}
			}
		}
		
		#endregion
		#region IsGenerated domain property code
		
		/// <summary>
		/// IsGenerated domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsGeneratedDomainPropertyId = new global::System.Guid(0x2a8e214f, 0x140c, 0x4483, 0xac, 0x4f, 0xe7, 0x9a, 0x2d, 0x4c, 0xf1, 0xcb);
		
		/// <summary>
		/// Storage for IsGenerated
		/// </summary>
		private global::System.Boolean isGeneratedPropertyStorage = true;
		
		/// <summary>
		/// Gets or sets the value of IsGenerated domain property.
		/// Determines if this item is used when generating
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.StoredProcedureField/IsGenerated.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.StoredProcedureField/IsGenerated.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.StoredProcedureField/IsGenerated.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(true)]
		[DslModeling::DomainObjectId("2a8e214f-140c-4483-ac4f-e79a2d4cf1cb")]
		public virtual global::System.Boolean IsGenerated
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isGeneratedPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsGeneratedPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the StoredProcedureField.IsGenerated domain property.
		/// </summary>
		internal sealed partial class IsGeneratedPropertyHandler : DslModeling::DomainPropertyValueHandler<StoredProcedureFieldBase, global::System.Boolean>
		{
			private IsGeneratedPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the StoredProcedureField.IsGenerated domain property value handler.
			/// </summary>
			public static readonly IsGeneratedPropertyHandler Instance = new IsGeneratedPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the StoredProcedureField.IsGenerated domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsGeneratedDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(StoredProcedureFieldBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.IsGenerated;
				//return element.GetValue<global::System.Boolean>("IsGenerated", element.isGeneratedPropertyStorage);
				//return element.isGeneratedPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(StoredProcedureFieldBase element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isGeneratedPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("StoredProcedureField"));
				}
			}
		}
		
		#endregion
		#region Length domain property code
		
		/// <summary>
		/// Length domain property Id.
		/// </summary>
		public static readonly global::System.Guid LengthDomainPropertyId = new global::System.Guid(0x4aba4368, 0x723c, 0x47c8, 0x80, 0xba, 0xdc, 0x03, 0xf2, 0xbf, 0xcc, 0x10);
		
		/// <summary>
		/// Storage for Length
		/// </summary>
		private global::System.Int32 lengthPropertyStorage = 50;
		
		/// <summary>
		/// Gets or sets the value of Length domain property.
		/// Determines the size of this field in bytes
		/// </summary>
		[System.ComponentModel.TypeConverter(typeof(nHydrate2.Dsl.Design.Converters.TextLengthConverter))]
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.StoredProcedureField/Length.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.StoredProcedureField/Length.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.StoredProcedureField/Length.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(50)]
		[DslModeling::DomainObjectId("4aba4368-723c-47c8-80ba-dc03f2bfcc10")]
		public virtual global::System.Int32 Length
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return lengthPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				LengthPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the StoredProcedureField.Length domain property.
		/// </summary>
		internal sealed partial class LengthPropertyHandler : DslModeling::DomainPropertyValueHandler<StoredProcedureFieldBase, global::System.Int32>
		{
			private LengthPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the StoredProcedureField.Length domain property value handler.
			/// </summary>
			public static readonly LengthPropertyHandler Instance = new LengthPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the StoredProcedureField.Length domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return LengthDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Int32 GetValue(StoredProcedureFieldBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.Length;
				//return element.GetValue<global::System.Int32>("Length", element.lengthPropertyStorage);
				//return element.lengthPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(StoredProcedureFieldBase element, global::System.Int32 newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Int32 oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.lengthPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("StoredProcedureField"));
				}
			}
		}
		
		#endregion
		#region Scale domain property code
		
		/// <summary>
		/// Scale domain property Id.
		/// </summary>
		public static readonly global::System.Guid ScaleDomainPropertyId = new global::System.Guid(0x85262f34, 0x778c, 0x441b, 0xb6, 0xd2, 0xe4, 0x1a, 0xe8, 0x4e, 0x9e, 0x97);
		
		/// <summary>
		/// Storage for Scale
		/// </summary>
		private global::System.Int32 scalePropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of Scale domain property.
		/// Determines the scale of some data types
		/// </summary>
		[System.ComponentModel.TypeConverter(typeof(nHydrate2.Dsl.Design.Converters.TextDecimalScaleConverter))]
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.StoredProcedureField/Scale.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.StoredProcedureField/Scale.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.StoredProcedureField/Scale.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("85262f34-778c-441b-b6d2-e41ae84e9e97")]
		public virtual global::System.Int32 Scale
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return scalePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ScalePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the StoredProcedureField.Scale domain property.
		/// </summary>
		internal sealed partial class ScalePropertyHandler : DslModeling::DomainPropertyValueHandler<StoredProcedureFieldBase, global::System.Int32>
		{
			private ScalePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the StoredProcedureField.Scale domain property value handler.
			/// </summary>
			public static readonly ScalePropertyHandler Instance = new ScalePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the StoredProcedureField.Scale domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ScaleDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Int32 GetValue(StoredProcedureFieldBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.Scale;
				//return element.GetValue<global::System.Int32>("Scale", element.scalePropertyStorage);
				//return element.scalePropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(StoredProcedureFieldBase element, global::System.Int32 newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Int32 oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.scalePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("StoredProcedureField"));
				}
			}
		}
		
		#endregion
		#region StoredProcedure opposite domain role accessor
		/// <summary>
		/// Gets or sets StoredProcedure.
		/// </summary>
		public virtual StoredProcedure StoredProcedure
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::nHydrate2.Dsl.StoredProcedureHasFields.StoredProcedureFieldDomainRoleId) as StoredProcedure;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::nHydrate2.Dsl.StoredProcedureHasFields.StoredProcedureFieldDomainRoleId, value);
			}
		}
		#endregion
	}
	/// <summary>
	/// DomainClass StoredProcedureField
	/// </summary>
	[global::System.CLSCompliant(true)]
			
	public partial class StoredProcedureField : StoredProcedureFieldBase
	{
		#region Constructors
		// Constructors were not generated for this class because it had HasCustomConstructor
		// set to true. Please provide the constructors below in a partial class.
		///// <summary>
		///// Constructor
		///// </summary>
		///// <param name="store">Store where new element is to be created.</param>
		///// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		//public StoredProcedureField(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
		//	: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		//{
		//}
		//
		///// <summary>
		///// Constructor
		///// </summary>
		///// <param name="partition">Partition where new element is to be created.</param>
		///// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		//public StoredProcedureField(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
		//	: base(partition, propertyAssignments)
		//{
		//}
		#endregion
	}
}
namespace nHydrate2.Dsl
{
	/// <summary>
	/// Double-derived base class for DomainClass StoredProcedureParameter
	/// </summary>
	[DslDesign::DisplayNameResource("nHydrate2.Dsl.StoredProcedureParameter.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("nHydrate2.Dsl.StoredProcedureParameter.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::nHydrate2.Dsl.nHydrate2DomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("66aa7115-e9ae-425a-86fe-31630cf78b3a")]
	public abstract partial class StoredProcedureParameterBase : DslModeling::ModelElement, System.ComponentModel.INotifyPropertyChanged
	{
		#region INotifyPropertyChanged
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs e)
		{
			if (this.PropertyChanged != null)
				this.PropertyChanged(this, e);
		}
		#endregion
	
		#region Constructors, domain class Id
	
		/// <summary>
		/// StoredProcedureParameter domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x66aa7115, 0xe9ae, 0x425a, 0x86, 0xfe, 0x31, 0x63, 0x0c, 0xf7, 0x8b, 0x3a);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected StoredProcedureParameterBase(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0xec1e37ad, 0x4fe1, 0x47eb, 0xa8, 0xcb, 0x6d, 0xf7, 0x02, 0x66, 0x0b, 0xa4);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Determines the name of this object
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.StoredProcedureParameter/Name.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.StoredProcedureParameter/Name.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.StoredProcedureParameter/Name.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("ec1e37ad-4fe1-47eb-a8cb-6df702660ba4")]
		public virtual global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the StoredProcedureParameter.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<StoredProcedureParameterBase, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the StoredProcedureParameter.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the StoredProcedureParameter.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(StoredProcedureParameterBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.Name;
				//return element.GetValue<global::System.String>("Name", element.namePropertyStorage);
				//return element.namePropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(StoredProcedureParameterBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("StoredProcedureParameter"));
				}
			}
		}
		
		#endregion
		#region CodeFacade domain property code
		
		/// <summary>
		/// CodeFacade domain property Id.
		/// </summary>
		public static readonly global::System.Guid CodeFacadeDomainPropertyId = new global::System.Guid(0x08f89366, 0xba85, 0x4629, 0xbc, 0x3b, 0x31, 0x12, 0x15, 0x00, 0x15, 0xcf);
		
		/// <summary>
		/// Storage for CodeFacade
		/// </summary>
		private global::System.String codeFacadePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of CodeFacade domain property.
		/// Determines the object name used in the API. If this property is blank the 'Name'
		/// property is used in the API. This property can be used to mask the database
		/// identifier.
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.StoredProcedureParameter/CodeFacade.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.StoredProcedureParameter/CodeFacade.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.StoredProcedureParameter/CodeFacade.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("08f89366-ba85-4629-bc3b-3112150015cf")]
		public virtual global::System.String CodeFacade
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return codeFacadePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				CodeFacadePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the StoredProcedureParameter.CodeFacade domain property.
		/// </summary>
		internal sealed partial class CodeFacadePropertyHandler : DslModeling::DomainPropertyValueHandler<StoredProcedureParameterBase, global::System.String>
		{
			private CodeFacadePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the StoredProcedureParameter.CodeFacade domain property value handler.
			/// </summary>
			public static readonly CodeFacadePropertyHandler Instance = new CodeFacadePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the StoredProcedureParameter.CodeFacade domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return CodeFacadeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(StoredProcedureParameterBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.CodeFacade;
				//return element.GetValue<global::System.String>("CodeFacade", element.codeFacadePropertyStorage);
				//return element.codeFacadePropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(StoredProcedureParameterBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.codeFacadePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("StoredProcedureParameter"));
				}
			}
		}
		
		#endregion
		#region Nullable domain property code
		
		/// <summary>
		/// Nullable domain property Id.
		/// </summary>
		public static readonly global::System.Guid NullableDomainPropertyId = new global::System.Guid(0x76c1a180, 0x9b5a, 0x4415, 0xac, 0xbe, 0xb1, 0x9b, 0xcd, 0xd7, 0xf4, 0x91);
		
		/// <summary>
		/// Storage for Nullable
		/// </summary>
		private global::System.Boolean nullablePropertyStorage = true;
		
		/// <summary>
		/// Gets or sets the value of Nullable domain property.
		/// Determines if this item allows null values
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.StoredProcedureParameter/Nullable.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.StoredProcedureParameter/Nullable.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.StoredProcedureParameter/Nullable.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(true)]
		[DslModeling::DomainObjectId("76c1a180-9b5a-4415-acbe-b19bcdd7f491")]
		public virtual global::System.Boolean Nullable
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return nullablePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NullablePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the StoredProcedureParameter.Nullable domain property.
		/// </summary>
		internal sealed partial class NullablePropertyHandler : DslModeling::DomainPropertyValueHandler<StoredProcedureParameterBase, global::System.Boolean>
		{
			private NullablePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the StoredProcedureParameter.Nullable domain property value handler.
			/// </summary>
			public static readonly NullablePropertyHandler Instance = new NullablePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the StoredProcedureParameter.Nullable domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NullableDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(StoredProcedureParameterBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.Nullable;
				//return element.GetValue<global::System.Boolean>("Nullable", element.nullablePropertyStorage);
				//return element.nullablePropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(StoredProcedureParameterBase element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.nullablePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("StoredProcedureParameter"));
				}
			}
		}
		
		#endregion
		#region DataType domain property code
		
		/// <summary>
		/// DataType domain property Id.
		/// </summary>
		public static readonly global::System.Guid DataTypeDomainPropertyId = new global::System.Guid(0xf1c3aea3, 0xa10c, 0x4a29, 0xa3, 0x83, 0x50, 0x13, 0xfa, 0xfd, 0xf7, 0x30);
		
		/// <summary>
		/// Storage for DataType
		/// </summary>
		private DataTypeConstants dataTypePropertyStorage = DataTypeConstants.VarChar;
		
		/// <summary>
		/// Gets or sets the value of DataType domain property.
		/// Determines the data type of this field
		/// </summary>
		[System.ComponentModel.TypeConverter(typeof(nHydrate2.Dsl.Design.Converters.DatatypeConverter))]
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.StoredProcedureParameter/DataType.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.StoredProcedureParameter/DataType.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.StoredProcedureParameter/DataType.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(DataTypeConstants.VarChar)]
		[DslModeling::DomainObjectId("f1c3aea3-a10c-4a29-a383-5013fafdf730")]
		public virtual DataTypeConstants DataType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return dataTypePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DataTypePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the StoredProcedureParameter.DataType domain property.
		/// </summary>
		internal sealed partial class DataTypePropertyHandler : DslModeling::DomainPropertyValueHandler<StoredProcedureParameterBase, DataTypeConstants>
		{
			private DataTypePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the StoredProcedureParameter.DataType domain property value handler.
			/// </summary>
			public static readonly DataTypePropertyHandler Instance = new DataTypePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the StoredProcedureParameter.DataType domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DataTypeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed DataTypeConstants GetValue(StoredProcedureParameterBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.DataType;
				//return element.GetValue<DataTypeConstants>("DataType", element.dataTypePropertyStorage);
				//return element.dataTypePropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(StoredProcedureParameterBase element, DataTypeConstants newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				DataTypeConstants oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.dataTypePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("StoredProcedureParameter"));
				}
			}
		}
		
		#endregion
		#region Summary domain property code
		
		/// <summary>
		/// Summary domain property Id.
		/// </summary>
		public static readonly global::System.Guid SummaryDomainPropertyId = new global::System.Guid(0x768fd231, 0xe0eb, 0x418f, 0xa9, 0xb3, 0x08, 0xed, 0x27, 0xdd, 0x8b, 0xaf);
		
		/// <summary>
		/// Storage for Summary
		/// </summary>
		private global::System.String summaryPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Summary domain property.
		/// Determines the summary of this object
		/// </summary>
		[System.ComponentModel.Editor(typeof(System.ComponentModel.Design.MultilineStringEditor), typeof(System.Drawing.Design.UITypeEditor))]
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.StoredProcedureParameter/Summary.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.StoredProcedureParameter/Summary.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.StoredProcedureParameter/Summary.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("768fd231-e0eb-418f-a9b3-08ed27dd8baf")]
		public virtual global::System.String Summary
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return summaryPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				SummaryPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the StoredProcedureParameter.Summary domain property.
		/// </summary>
		internal sealed partial class SummaryPropertyHandler : DslModeling::DomainPropertyValueHandler<StoredProcedureParameterBase, global::System.String>
		{
			private SummaryPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the StoredProcedureParameter.Summary domain property value handler.
			/// </summary>
			public static readonly SummaryPropertyHandler Instance = new SummaryPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the StoredProcedureParameter.Summary domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return SummaryDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(StoredProcedureParameterBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.Summary;
				//return element.GetValue<global::System.String>("Summary", element.summaryPropertyStorage);
				//return element.summaryPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(StoredProcedureParameterBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.summaryPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("StoredProcedureParameter"));
				}
			}
		}
		
		#endregion
		#region Default domain property code
		
		/// <summary>
		/// Default domain property Id.
		/// </summary>
		public static readonly global::System.Guid DefaultDomainPropertyId = new global::System.Guid(0x22beb39b, 0x2b29, 0x4dd1, 0x94, 0xc1, 0xbf, 0xef, 0x53, 0x1b, 0xa5, 0x45);
		
		/// <summary>
		/// Storage for Default
		/// </summary>
		private global::System.String defaultPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Default domain property.
		/// Determines the default value of this object
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.StoredProcedureParameter/Default.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.StoredProcedureParameter/Default.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.StoredProcedureParameter/Default.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("22beb39b-2b29-4dd1-94c1-bfef531ba545")]
		public virtual global::System.String Default
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return defaultPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DefaultPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the StoredProcedureParameter.Default domain property.
		/// </summary>
		internal sealed partial class DefaultPropertyHandler : DslModeling::DomainPropertyValueHandler<StoredProcedureParameterBase, global::System.String>
		{
			private DefaultPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the StoredProcedureParameter.Default domain property value handler.
			/// </summary>
			public static readonly DefaultPropertyHandler Instance = new DefaultPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the StoredProcedureParameter.Default domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DefaultDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(StoredProcedureParameterBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.Default;
				//return element.GetValue<global::System.String>("Default", element.defaultPropertyStorage);
				//return element.defaultPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(StoredProcedureParameterBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.defaultPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("StoredProcedureParameter"));
				}
			}
		}
		
		#endregion
		#region IsGenerated domain property code
		
		/// <summary>
		/// IsGenerated domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsGeneratedDomainPropertyId = new global::System.Guid(0x68eb3263, 0x0a8f, 0x4793, 0xb6, 0x37, 0x6d, 0x62, 0x2c, 0xc7, 0x52, 0x2f);
		
		/// <summary>
		/// Storage for IsGenerated
		/// </summary>
		private global::System.Boolean isGeneratedPropertyStorage = true;
		
		/// <summary>
		/// Gets or sets the value of IsGenerated domain property.
		/// Determines if this item is used when generating
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.StoredProcedureParameter/IsGenerated.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.StoredProcedureParameter/IsGenerated.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.StoredProcedureParameter/IsGenerated.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(true)]
		[DslModeling::DomainObjectId("68eb3263-0a8f-4793-b637-6d622cc7522f")]
		public virtual global::System.Boolean IsGenerated
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isGeneratedPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsGeneratedPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the StoredProcedureParameter.IsGenerated domain property.
		/// </summary>
		internal sealed partial class IsGeneratedPropertyHandler : DslModeling::DomainPropertyValueHandler<StoredProcedureParameterBase, global::System.Boolean>
		{
			private IsGeneratedPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the StoredProcedureParameter.IsGenerated domain property value handler.
			/// </summary>
			public static readonly IsGeneratedPropertyHandler Instance = new IsGeneratedPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the StoredProcedureParameter.IsGenerated domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsGeneratedDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(StoredProcedureParameterBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.IsGenerated;
				//return element.GetValue<global::System.Boolean>("IsGenerated", element.isGeneratedPropertyStorage);
				//return element.isGeneratedPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(StoredProcedureParameterBase element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isGeneratedPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("StoredProcedureParameter"));
				}
			}
		}
		
		#endregion
		#region Length domain property code
		
		/// <summary>
		/// Length domain property Id.
		/// </summary>
		public static readonly global::System.Guid LengthDomainPropertyId = new global::System.Guid(0xb106a032, 0x1d57, 0x4532, 0x8f, 0xd6, 0x8f, 0x37, 0x0e, 0x28, 0x1f, 0xe5);
		
		/// <summary>
		/// Storage for Length
		/// </summary>
		private global::System.Int32 lengthPropertyStorage = 50;
		
		/// <summary>
		/// Gets or sets the value of Length domain property.
		/// Determines the size of this field in bytes
		/// </summary>
		[System.ComponentModel.TypeConverter(typeof(nHydrate2.Dsl.Design.Converters.TextLengthConverter))]
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.StoredProcedureParameter/Length.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.StoredProcedureParameter/Length.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.StoredProcedureParameter/Length.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(50)]
		[DslModeling::DomainObjectId("b106a032-1d57-4532-8fd6-8f370e281fe5")]
		public virtual global::System.Int32 Length
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return lengthPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				LengthPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the StoredProcedureParameter.Length domain property.
		/// </summary>
		internal sealed partial class LengthPropertyHandler : DslModeling::DomainPropertyValueHandler<StoredProcedureParameterBase, global::System.Int32>
		{
			private LengthPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the StoredProcedureParameter.Length domain property value handler.
			/// </summary>
			public static readonly LengthPropertyHandler Instance = new LengthPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the StoredProcedureParameter.Length domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return LengthDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Int32 GetValue(StoredProcedureParameterBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.Length;
				//return element.GetValue<global::System.Int32>("Length", element.lengthPropertyStorage);
				//return element.lengthPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(StoredProcedureParameterBase element, global::System.Int32 newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Int32 oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.lengthPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("StoredProcedureParameter"));
				}
			}
		}
		
		#endregion
		#region IsOutputParameter domain property code
		
		/// <summary>
		/// IsOutputParameter domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsOutputParameterDomainPropertyId = new global::System.Guid(0x53998728, 0x8e93, 0x4dc5, 0xa4, 0xcc, 0x32, 0xae, 0x81, 0x4f, 0x5d, 0xd5);
		
		/// <summary>
		/// Storage for IsOutputParameter
		/// </summary>
		private global::System.Boolean isOutputParameterPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of IsOutputParameter domain property.
		/// Determines if this is an output parameter for the mapped stored proc
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.StoredProcedureParameter/IsOutputParameter.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.StoredProcedureParameter/IsOutputParameter.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.StoredProcedureParameter/IsOutputParameter.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("53998728-8e93-4dc5-a4cc-32ae814f5dd5")]
		public virtual global::System.Boolean IsOutputParameter
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isOutputParameterPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsOutputParameterPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the StoredProcedureParameter.IsOutputParameter domain property.
		/// </summary>
		internal sealed partial class IsOutputParameterPropertyHandler : DslModeling::DomainPropertyValueHandler<StoredProcedureParameterBase, global::System.Boolean>
		{
			private IsOutputParameterPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the StoredProcedureParameter.IsOutputParameter domain property value handler.
			/// </summary>
			public static readonly IsOutputParameterPropertyHandler Instance = new IsOutputParameterPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the StoredProcedureParameter.IsOutputParameter domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsOutputParameterDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(StoredProcedureParameterBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.IsOutputParameter;
				//return element.GetValue<global::System.Boolean>("IsOutputParameter", element.isOutputParameterPropertyStorage);
				//return element.isOutputParameterPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(StoredProcedureParameterBase element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isOutputParameterPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("StoredProcedureParameter"));
				}
			}
		}
		
		#endregion
		#region Scale domain property code
		
		/// <summary>
		/// Scale domain property Id.
		/// </summary>
		public static readonly global::System.Guid ScaleDomainPropertyId = new global::System.Guid(0xa9a2eda9, 0x591f, 0x4f17, 0xb1, 0x9f, 0x0f, 0x0b, 0xa4, 0x95, 0xdd, 0xa1);
		
		/// <summary>
		/// Storage for Scale
		/// </summary>
		private global::System.Int32 scalePropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of Scale domain property.
		/// Determines the scale of some data types
		/// </summary>
		[System.ComponentModel.TypeConverter(typeof(nHydrate2.Dsl.Design.Converters.TextDecimalScaleConverter))]
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.StoredProcedureParameter/Scale.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.StoredProcedureParameter/Scale.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.StoredProcedureParameter/Scale.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("a9a2eda9-591f-4f17-b19f-0f0ba495dda1")]
		public virtual global::System.Int32 Scale
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return scalePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ScalePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the StoredProcedureParameter.Scale domain property.
		/// </summary>
		internal sealed partial class ScalePropertyHandler : DslModeling::DomainPropertyValueHandler<StoredProcedureParameterBase, global::System.Int32>
		{
			private ScalePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the StoredProcedureParameter.Scale domain property value handler.
			/// </summary>
			public static readonly ScalePropertyHandler Instance = new ScalePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the StoredProcedureParameter.Scale domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ScaleDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Int32 GetValue(StoredProcedureParameterBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.Scale;
				//return element.GetValue<global::System.Int32>("Scale", element.scalePropertyStorage);
				//return element.scalePropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(StoredProcedureParameterBase element, global::System.Int32 newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Int32 oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.scalePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("StoredProcedureParameter"));
				}
			}
		}
		
		#endregion
		#region SortOrder domain property code
		
		/// <summary>
		/// SortOrder domain property Id.
		/// </summary>
		public static readonly global::System.Guid SortOrderDomainPropertyId = new global::System.Guid(0x19673ffc, 0x7726, 0x4fbb, 0xbd, 0xe6, 0x3f, 0xf4, 0x06, 0xd4, 0xb3, 0xd8);
		
		/// <summary>
		/// Storage for SortOrder
		/// </summary>
		private global::System.Int32 sortOrderPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of SortOrder domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.StoredProcedureParameter/SortOrder.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.StoredProcedureParameter/SortOrder.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("19673ffc-7726-4fbb-bde6-3ff406d4b3d8")]
		public virtual global::System.Int32 SortOrder
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return sortOrderPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				SortOrderPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the StoredProcedureParameter.SortOrder domain property.
		/// </summary>
		internal sealed partial class SortOrderPropertyHandler : DslModeling::DomainPropertyValueHandler<StoredProcedureParameterBase, global::System.Int32>
		{
			private SortOrderPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the StoredProcedureParameter.SortOrder domain property value handler.
			/// </summary>
			public static readonly SortOrderPropertyHandler Instance = new SortOrderPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the StoredProcedureParameter.SortOrder domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return SortOrderDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Int32 GetValue(StoredProcedureParameterBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.SortOrder;
				//return element.GetValue<global::System.Int32>("SortOrder", element.sortOrderPropertyStorage);
				//return element.sortOrderPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(StoredProcedureParameterBase element, global::System.Int32 newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Int32 oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.sortOrderPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("StoredProcedureParameter"));
				}
			}
		}
		
		#endregion
		#region StoredProcedure opposite domain role accessor
		/// <summary>
		/// Gets or sets StoredProcedure.
		/// </summary>
		public virtual StoredProcedure StoredProcedure
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::nHydrate2.Dsl.StoredProcedureHasParameters.StoredProcedureParameterDomainRoleId) as StoredProcedure;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::nHydrate2.Dsl.StoredProcedureHasParameters.StoredProcedureParameterDomainRoleId, value);
			}
		}
		#endregion
	}
	/// <summary>
	/// DomainClass StoredProcedureParameter
	/// </summary>
	[global::System.CLSCompliant(true)]
			
	public partial class StoredProcedureParameter : StoredProcedureParameterBase
	{
		#region Constructors
		// Constructors were not generated for this class because it had HasCustomConstructor
		// set to true. Please provide the constructors below in a partial class.
		///// <summary>
		///// Constructor
		///// </summary>
		///// <param name="store">Store where new element is to be created.</param>
		///// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		//public StoredProcedureParameter(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
		//	: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		//{
		//}
		//
		///// <summary>
		///// Constructor
		///// </summary>
		///// <param name="partition">Partition where new element is to be created.</param>
		///// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		//public StoredProcedureParameter(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
		//	: base(partition, propertyAssignments)
		//{
		//}
		#endregion
	}
}
namespace nHydrate2.Dsl
{
	/// <summary>
	/// Double-derived base class for DomainClass View
	/// </summary>
	[DslDesign::DisplayNameResource("nHydrate2.Dsl.View.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("nHydrate2.Dsl.View.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::nHydrate2.Dsl.nHydrate2DomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("fcb76b2a-6488-4578-a99b-451bd16ff1b8")]
	public abstract partial class ViewBase : DslModeling::ModelElement, System.ComponentModel.INotifyPropertyChanged
	{
		#region INotifyPropertyChanged
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs e)
		{
			if (this.PropertyChanged != null)
				this.PropertyChanged(this, e);
		}
		#endregion
	
		#region Constructors, domain class Id
	
		/// <summary>
		/// View domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xfcb76b2a, 0x6488, 0x4578, 0xa9, 0x9b, 0x45, 0x1b, 0xd1, 0x6f, 0xf1, 0xb8);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected ViewBase(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region SQL domain property code
		
		/// <summary>
		/// SQL domain property Id.
		/// </summary>
		public static readonly global::System.Guid SQLDomainPropertyId = new global::System.Guid(0x1b837a3a, 0xd7a9, 0x4fe4, 0x89, 0x7b, 0xf0, 0xb6, 0x9b, 0x89, 0xf6, 0x4e);
		
		/// <summary>
		/// Storage for SQL
		/// </summary>
		private global::System.String sQLPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of SQL domain property.
		/// Determines SQL statement used to create the database view object
		/// </summary>
		[System.ComponentModel.Editor(typeof(nHydrate2.Dsl.Design.Editors.SQLEditor), typeof(System.Drawing.Design.UITypeEditor))]
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.View/SQL.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.View/SQL.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.View/SQL.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("1b837a3a-d7a9-4fe4-897b-f0b69b89f64e")]
		public virtual global::System.String SQL
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return sQLPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				SQLPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the View.SQL domain property.
		/// </summary>
		internal sealed partial class SQLPropertyHandler : DslModeling::DomainPropertyValueHandler<ViewBase, global::System.String>
		{
			private SQLPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the View.SQL domain property value handler.
			/// </summary>
			public static readonly SQLPropertyHandler Instance = new SQLPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the View.SQL domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return SQLDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ViewBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.SQL;
				//return element.GetValue<global::System.String>("SQL", element.sQLPropertyStorage);
				//return element.sQLPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ViewBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.sQLPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("View"));
				}
			}
		}
		
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x270471bd, 0x00cc, 0x4dae, 0xb6, 0xd2, 0x02, 0x53, 0xf4, 0x27, 0x08, 0xa4);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Determines the name of this object
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.View/Name.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.View/Name.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.View/Name.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("270471bd-00cc-4dae-b6d2-0253f42708a4")]
		public virtual global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the View.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<ViewBase, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the View.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the View.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ViewBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.Name;
				//return element.GetValue<global::System.String>("Name", element.namePropertyStorage);
				//return element.namePropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ViewBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("View"));
				}
			}
		}
		
		#endregion
		#region IsGenerated domain property code
		
		/// <summary>
		/// IsGenerated domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsGeneratedDomainPropertyId = new global::System.Guid(0xa6ee4a71, 0x3972, 0x4a41, 0x83, 0x0d, 0xdf, 0xe4, 0x7c, 0xe7, 0xa8, 0x07);
		
		/// <summary>
		/// Storage for IsGenerated
		/// </summary>
		private global::System.Boolean isGeneratedPropertyStorage = true;
		
		/// <summary>
		/// Gets or sets the value of IsGenerated domain property.
		/// Determines if this item is used when generating
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.View/IsGenerated.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.View/IsGenerated.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.View/IsGenerated.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(true)]
		[DslModeling::DomainObjectId("a6ee4a71-3972-4a41-830d-dfe47ce7a807")]
		public virtual global::System.Boolean IsGenerated
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isGeneratedPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsGeneratedPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the View.IsGenerated domain property.
		/// </summary>
		internal sealed partial class IsGeneratedPropertyHandler : DslModeling::DomainPropertyValueHandler<ViewBase, global::System.Boolean>
		{
			private IsGeneratedPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the View.IsGenerated domain property value handler.
			/// </summary>
			public static readonly IsGeneratedPropertyHandler Instance = new IsGeneratedPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the View.IsGenerated domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsGeneratedDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(ViewBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.IsGenerated;
				//return element.GetValue<global::System.Boolean>("IsGenerated", element.isGeneratedPropertyStorage);
				//return element.isGeneratedPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ViewBase element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isGeneratedPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("View"));
				}
			}
		}
		
		#endregion
		#region CodeFacade domain property code
		
		/// <summary>
		/// CodeFacade domain property Id.
		/// </summary>
		public static readonly global::System.Guid CodeFacadeDomainPropertyId = new global::System.Guid(0xb955fb42, 0x785a, 0x4b07, 0x80, 0xfd, 0x9b, 0x5d, 0xc8, 0x16, 0xcb, 0x14);
		
		/// <summary>
		/// Storage for CodeFacade
		/// </summary>
		private global::System.String codeFacadePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of CodeFacade domain property.
		/// Determines the object name used in the API. If this property is blank the 'Name'
		/// property is used in the API. This property can be used to mask the database
		/// identifier.
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.View/CodeFacade.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.View/CodeFacade.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.View/CodeFacade.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("b955fb42-785a-4b07-80fd-9b5dc816cb14")]
		public virtual global::System.String CodeFacade
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return codeFacadePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				CodeFacadePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the View.CodeFacade domain property.
		/// </summary>
		internal sealed partial class CodeFacadePropertyHandler : DslModeling::DomainPropertyValueHandler<ViewBase, global::System.String>
		{
			private CodeFacadePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the View.CodeFacade domain property value handler.
			/// </summary>
			public static readonly CodeFacadePropertyHandler Instance = new CodeFacadePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the View.CodeFacade domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return CodeFacadeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ViewBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.CodeFacade;
				//return element.GetValue<global::System.String>("CodeFacade", element.codeFacadePropertyStorage);
				//return element.codeFacadePropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ViewBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.codeFacadePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("View"));
				}
			}
		}
		
		#endregion
		#region Summary domain property code
		
		/// <summary>
		/// Summary domain property Id.
		/// </summary>
		public static readonly global::System.Guid SummaryDomainPropertyId = new global::System.Guid(0x794adbbd, 0x5a98, 0x4ee5, 0xb2, 0x2c, 0x77, 0xc5, 0x16, 0x85, 0x67, 0x61);
		
		/// <summary>
		/// Storage for Summary
		/// </summary>
		private global::System.String summaryPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Summary domain property.
		/// Determines the summary of this object
		/// </summary>
		[System.ComponentModel.Editor(typeof(System.ComponentModel.Design.MultilineStringEditor), typeof(System.Drawing.Design.UITypeEditor))]
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.View/Summary.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.View/Summary.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.View/Summary.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("794adbbd-5a98-4ee5-b22c-77c516856761")]
		public virtual global::System.String Summary
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return summaryPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				SummaryPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the View.Summary domain property.
		/// </summary>
		internal sealed partial class SummaryPropertyHandler : DslModeling::DomainPropertyValueHandler<ViewBase, global::System.String>
		{
			private SummaryPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the View.Summary domain property value handler.
			/// </summary>
			public static readonly SummaryPropertyHandler Instance = new SummaryPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the View.Summary domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return SummaryDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ViewBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.Summary;
				//return element.GetValue<global::System.String>("Summary", element.summaryPropertyStorage);
				//return element.summaryPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ViewBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.summaryPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("View"));
				}
			}
		}
		
		#endregion
		#region Schema domain property code
		
		/// <summary>
		/// Schema domain property Id.
		/// </summary>
		public static readonly global::System.Guid SchemaDomainPropertyId = new global::System.Guid(0x63f73103, 0x5ced, 0x4d51, 0x9c, 0x6c, 0x14, 0x88, 0x06, 0x71, 0x11, 0x62);
		
		/// <summary>
		/// Storage for Schema
		/// </summary>
		private global::System.String schemaPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Schema domain property.
		/// Determines the parent schema for this object
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.View/Schema.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.View/Schema.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.View/Schema.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("63f73103-5ced-4d51-9c6c-148806711162")]
		public virtual global::System.String Schema
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return schemaPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				SchemaPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the View.Schema domain property.
		/// </summary>
		internal sealed partial class SchemaPropertyHandler : DslModeling::DomainPropertyValueHandler<ViewBase, global::System.String>
		{
			private SchemaPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the View.Schema domain property value handler.
			/// </summary>
			public static readonly SchemaPropertyHandler Instance = new SchemaPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the View.Schema domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return SchemaDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ViewBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.Schema;
				//return element.GetValue<global::System.String>("Schema", element.schemaPropertyStorage);
				//return element.schemaPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ViewBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.schemaPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("View"));
				}
			}
		}
		
		#endregion
		#region GeneratesDoubleDerived domain property code
		
		/// <summary>
		/// GeneratesDoubleDerived domain property Id.
		/// </summary>
		public static readonly global::System.Guid GeneratesDoubleDerivedDomainPropertyId = new global::System.Guid(0xdfeb167d, 0xe6f0, 0x4275, 0xa8, 0x26, 0x83, 0xac, 0x31, 0x4d, 0x81, 0x4f);
		
		/// <summary>
		/// Storage for GeneratesDoubleDerived
		/// </summary>
		private global::System.Boolean generatesDoubleDerivedPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of GeneratesDoubleDerived domain property.
		/// If True, will generate both a base class with all functionality and a partial
		/// class to support customization through overrides
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.View/GeneratesDoubleDerived.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.View/GeneratesDoubleDerived.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.View/GeneratesDoubleDerived.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("dfeb167d-e6f0-4275-a826-83ac314d814f")]
		public virtual global::System.Boolean GeneratesDoubleDerived
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return generatesDoubleDerivedPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				GeneratesDoubleDerivedPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the View.GeneratesDoubleDerived domain property.
		/// </summary>
		internal sealed partial class GeneratesDoubleDerivedPropertyHandler : DslModeling::DomainPropertyValueHandler<ViewBase, global::System.Boolean>
		{
			private GeneratesDoubleDerivedPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the View.GeneratesDoubleDerived domain property value handler.
			/// </summary>
			public static readonly GeneratesDoubleDerivedPropertyHandler Instance = new GeneratesDoubleDerivedPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the View.GeneratesDoubleDerived domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return GeneratesDoubleDerivedDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(ViewBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.GeneratesDoubleDerived;
				//return element.GetValue<global::System.Boolean>("GeneratesDoubleDerived", element.generatesDoubleDerivedPropertyStorage);
				//return element.generatesDoubleDerivedPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ViewBase element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.generatesDoubleDerivedPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("View"));
				}
			}
		}
		
		#endregion
		#region PrecedenceOrder domain property code
		
		/// <summary>
		/// PrecedenceOrder domain property Id.
		/// </summary>
		public static readonly global::System.Guid PrecedenceOrderDomainPropertyId = new global::System.Guid(0x9f1807fb, 0x1e99, 0x4ce6, 0x80, 0x52, 0x44, 0xc9, 0x4e, 0x07, 0x29, 0x30);
		
		/// <summary>
		/// Storage for PrecedenceOrder
		/// </summary>
		private global::System.Int32 precedenceOrderPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of PrecedenceOrder domain property.
		/// Determines the order generated scripts are run
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.View/PrecedenceOrder.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.View/PrecedenceOrder.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("9f1807fb-1e99-4ce6-8052-44c94e072930")]
		public virtual global::System.Int32 PrecedenceOrder
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return precedenceOrderPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				PrecedenceOrderPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the View.PrecedenceOrder domain property.
		/// </summary>
		internal sealed partial class PrecedenceOrderPropertyHandler : DslModeling::DomainPropertyValueHandler<ViewBase, global::System.Int32>
		{
			private PrecedenceOrderPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the View.PrecedenceOrder domain property value handler.
			/// </summary>
			public static readonly PrecedenceOrderPropertyHandler Instance = new PrecedenceOrderPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the View.PrecedenceOrder domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return PrecedenceOrderDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Int32 GetValue(ViewBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.PrecedenceOrder;
				//return element.GetValue<global::System.Int32>("PrecedenceOrder", element.precedenceOrderPropertyStorage);
				//return element.precedenceOrderPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ViewBase element, global::System.Int32 newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Int32 oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.precedenceOrderPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("View"));
				}
			}
		}
		
		#endregion
		#region nHydrateModel opposite domain role accessor
		/// <summary>
		/// Gets or sets nHydrateModel.
		/// </summary>
		public virtual nHydrateModel nHydrateModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::nHydrate2.Dsl.nHydrateModelHasViews.ViewDomainRoleId) as nHydrateModel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::nHydrate2.Dsl.nHydrateModelHasViews.ViewDomainRoleId, value);
			}
		}
		#endregion
		#region Fields opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Fields.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ViewField> Fields
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ViewField>, ViewField>(global::nHydrate2.Dsl.ViewHasFields.ViewDomainRoleId);
			}
		}
		#endregion
		#region Modules opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Modules.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Module> Modules
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Module>, Module>(global::nHydrate2.Dsl.ViewReferencesModules.ViewDomainRoleId);
			}
		}
		#endregion
		#region ParentEntity opposite domain role accessor
		
		/// <summary>
		/// Gets a list of ParentEntity.
		/// Description for nHydrate2.Dsl.EntityHasViews.ChildView
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Entity> ParentEntity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Entity>, Entity>(global::nHydrate2.Dsl.EntityHasViews.ChildViewDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::nHydrate2.Dsl.ViewField.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::nHydrate2.Dsl.ViewField sourceViewField1 = sourceElement as global::nHydrate2.Dsl.ViewField;
			if (sourceViewField1 != null)
			{
				// Create link for path ViewHasFields.Fields
				this.Fields.Add(sourceViewField1);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::nHydrate2.Dsl.ViewField sourceViewField1 = sourceElement as global::nHydrate2.Dsl.ViewField;
			if (sourceViewField1 != null)
			{
				// Delete link for path ViewHasFields.Fields
				
				foreach (DslModeling::ElementLink link in global::nHydrate2.Dsl.ViewHasFields.GetLinks((global::nHydrate2.Dsl.View)this, sourceViewField1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::nHydrate2.Dsl.ViewHasFields.ViewDomainRoleId, global::nHydrate2.Dsl.ViewHasFields.ViewFieldDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
	/// <summary>
	/// DomainClass View
	/// This is a custom database view
	/// </summary>
	[global::System.CLSCompliant(true)]
			
	public partial class View : ViewBase
	{
		#region Constructors
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public View(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public View(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace nHydrate2.Dsl
{
	/// <summary>
	/// Double-derived base class for DomainClass ViewField
	/// </summary>
	[DslDesign::DisplayNameResource("nHydrate2.Dsl.ViewField.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("nHydrate2.Dsl.ViewField.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::nHydrate2.Dsl.nHydrate2DomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("84ea79b9-c696-4742-873b-6d31ce2ae2fb")]
	public abstract partial class ViewFieldBase : DslModeling::ModelElement, System.ComponentModel.INotifyPropertyChanged
	{
		#region INotifyPropertyChanged
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs e)
		{
			if (this.PropertyChanged != null)
				this.PropertyChanged(this, e);
		}
		#endregion
	
		#region Constructors, domain class Id
	
		/// <summary>
		/// ViewField domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x84ea79b9, 0xc696, 0x4742, 0x87, 0x3b, 0x6d, 0x31, 0xce, 0x2a, 0xe2, 0xfb);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected ViewFieldBase(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x893f6809, 0x7dc3, 0x47ab, 0x8a, 0xfd, 0x8f, 0x3b, 0x0b, 0x0d, 0xf7, 0xaa);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Determines the name of this object
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.ViewField/Name.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.ViewField/Name.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.ViewField/Name.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("893f6809-7dc3-47ab-8afd-8f3b0b0df7aa")]
		public virtual global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ViewField.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<ViewFieldBase, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ViewField.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ViewField.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ViewFieldBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.Name;
				//return element.GetValue<global::System.String>("Name", element.namePropertyStorage);
				//return element.namePropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ViewFieldBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("ViewField"));
				}
			}
		}
		
		#endregion
		#region FriendlyName domain property code
		
		/// <summary>
		/// FriendlyName domain property Id.
		/// </summary>
		public static readonly global::System.Guid FriendlyNameDomainPropertyId = new global::System.Guid(0x7948a8f4, 0x56b0, 0x4e24, 0x9f, 0x24, 0x9d, 0x1b, 0xea, 0x97, 0x32, 0x02);
		
		/// <summary>
		/// Storage for FriendlyName
		/// </summary>
		private global::System.String friendlyNamePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of FriendlyName domain property.
		/// Determines a friend name to display to users
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.ViewField/FriendlyName.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.ViewField/FriendlyName.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.ViewField/FriendlyName.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("7948a8f4-56b0-4e24-9f24-9d1bea973202")]
		public virtual global::System.String FriendlyName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return friendlyNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				FriendlyNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ViewField.FriendlyName domain property.
		/// </summary>
		internal sealed partial class FriendlyNamePropertyHandler : DslModeling::DomainPropertyValueHandler<ViewFieldBase, global::System.String>
		{
			private FriendlyNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ViewField.FriendlyName domain property value handler.
			/// </summary>
			public static readonly FriendlyNamePropertyHandler Instance = new FriendlyNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ViewField.FriendlyName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return FriendlyNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ViewFieldBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.FriendlyName;
				//return element.GetValue<global::System.String>("FriendlyName", element.friendlyNamePropertyStorage);
				//return element.friendlyNamePropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ViewFieldBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.friendlyNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("ViewField"));
				}
			}
		}
		
		#endregion
		#region Nullable domain property code
		
		/// <summary>
		/// Nullable domain property Id.
		/// </summary>
		public static readonly global::System.Guid NullableDomainPropertyId = new global::System.Guid(0x93151f66, 0x2435, 0x4f5a, 0x8b, 0x8b, 0x0b, 0x57, 0xea, 0x65, 0xe1, 0x2e);
		
		/// <summary>
		/// Storage for Nullable
		/// </summary>
		private global::System.Boolean nullablePropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of Nullable domain property.
		/// Determines if this item allows null values
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.ViewField/Nullable.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.ViewField/Nullable.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.ViewField/Nullable.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("93151f66-2435-4f5a-8b8b-0b57ea65e12e")]
		public virtual global::System.Boolean Nullable
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return nullablePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NullablePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ViewField.Nullable domain property.
		/// </summary>
		internal sealed partial class NullablePropertyHandler : DslModeling::DomainPropertyValueHandler<ViewFieldBase, global::System.Boolean>
		{
			private NullablePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ViewField.Nullable domain property value handler.
			/// </summary>
			public static readonly NullablePropertyHandler Instance = new NullablePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ViewField.Nullable domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NullableDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(ViewFieldBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.Nullable;
				//return element.GetValue<global::System.Boolean>("Nullable", element.nullablePropertyStorage);
				//return element.nullablePropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ViewFieldBase element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.nullablePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("ViewField"));
				}
			}
		}
		
		#endregion
		#region DataType domain property code
		
		/// <summary>
		/// DataType domain property Id.
		/// </summary>
		public static readonly global::System.Guid DataTypeDomainPropertyId = new global::System.Guid(0xafc810ea, 0x82b0, 0x4d4c, 0xba, 0x44, 0x4f, 0xdc, 0x3c, 0x2e, 0x28, 0xc4);
		
		/// <summary>
		/// Storage for DataType
		/// </summary>
		private DataTypeConstants dataTypePropertyStorage = DataTypeConstants.VarChar;
		
		/// <summary>
		/// Gets or sets the value of DataType domain property.
		/// Determines the data type of this field
		/// </summary>
		[System.ComponentModel.TypeConverter(typeof(nHydrate2.Dsl.Design.Converters.DatatypeConverter))]
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.ViewField/DataType.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.ViewField/DataType.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.ViewField/DataType.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(DataTypeConstants.VarChar)]
		[DslModeling::DomainObjectId("afc810ea-82b0-4d4c-ba44-4fdc3c2e28c4")]
		public virtual DataTypeConstants DataType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return dataTypePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DataTypePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ViewField.DataType domain property.
		/// </summary>
		internal sealed partial class DataTypePropertyHandler : DslModeling::DomainPropertyValueHandler<ViewFieldBase, DataTypeConstants>
		{
			private DataTypePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ViewField.DataType domain property value handler.
			/// </summary>
			public static readonly DataTypePropertyHandler Instance = new DataTypePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ViewField.DataType domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DataTypeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed DataTypeConstants GetValue(ViewFieldBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.DataType;
				//return element.GetValue<DataTypeConstants>("DataType", element.dataTypePropertyStorage);
				//return element.dataTypePropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ViewFieldBase element, DataTypeConstants newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				DataTypeConstants oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.dataTypePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("ViewField"));
				}
			}
		}
		
		#endregion
		#region Default domain property code
		
		/// <summary>
		/// Default domain property Id.
		/// </summary>
		public static readonly global::System.Guid DefaultDomainPropertyId = new global::System.Guid(0x53ad9f4d, 0xd0c1, 0x4aaa, 0xb5, 0x49, 0x0b, 0x73, 0xa4, 0x7d, 0xd9, 0x83);
		
		/// <summary>
		/// Storage for Default
		/// </summary>
		private global::System.String defaultPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Default domain property.
		/// Determines the default value of this object
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.ViewField/Default.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.ViewField/Default.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.ViewField/Default.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("53ad9f4d-d0c1-4aaa-b549-0b73a47dd983")]
		public virtual global::System.String Default
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return defaultPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DefaultPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ViewField.Default domain property.
		/// </summary>
		internal sealed partial class DefaultPropertyHandler : DslModeling::DomainPropertyValueHandler<ViewFieldBase, global::System.String>
		{
			private DefaultPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ViewField.Default domain property value handler.
			/// </summary>
			public static readonly DefaultPropertyHandler Instance = new DefaultPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ViewField.Default domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DefaultDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ViewFieldBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.Default;
				//return element.GetValue<global::System.String>("Default", element.defaultPropertyStorage);
				//return element.defaultPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ViewFieldBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.defaultPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("ViewField"));
				}
			}
		}
		
		#endregion
		#region Summary domain property code
		
		/// <summary>
		/// Summary domain property Id.
		/// </summary>
		public static readonly global::System.Guid SummaryDomainPropertyId = new global::System.Guid(0xda986d57, 0x440b, 0x4fbb, 0xaf, 0x35, 0xcb, 0x5c, 0x10, 0x38, 0xf6, 0x9b);
		
		/// <summary>
		/// Storage for Summary
		/// </summary>
		private global::System.String summaryPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Summary domain property.
		/// Determines the summary of this object
		/// </summary>
		[System.ComponentModel.Editor(typeof(System.ComponentModel.Design.MultilineStringEditor), typeof(System.Drawing.Design.UITypeEditor))]
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.ViewField/Summary.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.ViewField/Summary.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.ViewField/Summary.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("da986d57-440b-4fbb-af35-cb5c1038f69b")]
		public virtual global::System.String Summary
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return summaryPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				SummaryPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ViewField.Summary domain property.
		/// </summary>
		internal sealed partial class SummaryPropertyHandler : DslModeling::DomainPropertyValueHandler<ViewFieldBase, global::System.String>
		{
			private SummaryPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ViewField.Summary domain property value handler.
			/// </summary>
			public static readonly SummaryPropertyHandler Instance = new SummaryPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ViewField.Summary domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return SummaryDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ViewFieldBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.Summary;
				//return element.GetValue<global::System.String>("Summary", element.summaryPropertyStorage);
				//return element.summaryPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ViewFieldBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.summaryPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("ViewField"));
				}
			}
		}
		
		#endregion
		#region IsGenerated domain property code
		
		/// <summary>
		/// IsGenerated domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsGeneratedDomainPropertyId = new global::System.Guid(0xee7d6ca9, 0x883e, 0x4d34, 0x94, 0x44, 0x18, 0xb3, 0xea, 0x9c, 0x7c, 0x6b);
		
		/// <summary>
		/// Storage for IsGenerated
		/// </summary>
		private global::System.Boolean isGeneratedPropertyStorage = true;
		
		/// <summary>
		/// Gets or sets the value of IsGenerated domain property.
		/// Determines if this item is used when generating
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.ViewField/IsGenerated.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.ViewField/IsGenerated.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.ViewField/IsGenerated.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(true)]
		[DslModeling::DomainObjectId("ee7d6ca9-883e-4d34-9444-18b3ea9c7c6b")]
		public virtual global::System.Boolean IsGenerated
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isGeneratedPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsGeneratedPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ViewField.IsGenerated domain property.
		/// </summary>
		internal sealed partial class IsGeneratedPropertyHandler : DslModeling::DomainPropertyValueHandler<ViewFieldBase, global::System.Boolean>
		{
			private IsGeneratedPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ViewField.IsGenerated domain property value handler.
			/// </summary>
			public static readonly IsGeneratedPropertyHandler Instance = new IsGeneratedPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ViewField.IsGenerated domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsGeneratedDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(ViewFieldBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.IsGenerated;
				//return element.GetValue<global::System.Boolean>("IsGenerated", element.isGeneratedPropertyStorage);
				//return element.isGeneratedPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ViewFieldBase element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isGeneratedPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("ViewField"));
				}
			}
		}
		
		#endregion
		#region Length domain property code
		
		/// <summary>
		/// Length domain property Id.
		/// </summary>
		public static readonly global::System.Guid LengthDomainPropertyId = new global::System.Guid(0x6ab91e23, 0xbe5f, 0x4ff9, 0xb1, 0x97, 0xed, 0xc5, 0xca, 0x1e, 0xa9, 0x70);
		
		/// <summary>
		/// Storage for Length
		/// </summary>
		private global::System.Int32 lengthPropertyStorage = 50;
		
		/// <summary>
		/// Gets or sets the value of Length domain property.
		/// Determines the size of this field in bytes
		/// </summary>
		[System.ComponentModel.TypeConverter(typeof(nHydrate2.Dsl.Design.Converters.TextLengthConverter))]
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.ViewField/Length.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.ViewField/Length.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.ViewField/Length.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(50)]
		[DslModeling::DomainObjectId("6ab91e23-be5f-4ff9-b197-edc5ca1ea970")]
		public virtual global::System.Int32 Length
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return lengthPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				LengthPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ViewField.Length domain property.
		/// </summary>
		internal sealed partial class LengthPropertyHandler : DslModeling::DomainPropertyValueHandler<ViewFieldBase, global::System.Int32>
		{
			private LengthPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ViewField.Length domain property value handler.
			/// </summary>
			public static readonly LengthPropertyHandler Instance = new LengthPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ViewField.Length domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return LengthDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Int32 GetValue(ViewFieldBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.Length;
				//return element.GetValue<global::System.Int32>("Length", element.lengthPropertyStorage);
				//return element.lengthPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ViewFieldBase element, global::System.Int32 newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Int32 oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.lengthPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("ViewField"));
				}
			}
		}
		
		#endregion
		#region Scale domain property code
		
		/// <summary>
		/// Scale domain property Id.
		/// </summary>
		public static readonly global::System.Guid ScaleDomainPropertyId = new global::System.Guid(0x2ea4b05a, 0x3fa9, 0x4cee, 0x89, 0x5e, 0x57, 0xcd, 0xf0, 0x05, 0x79, 0xf7);
		
		/// <summary>
		/// Storage for Scale
		/// </summary>
		private global::System.Int32 scalePropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of Scale domain property.
		/// Determines the scale of some data types
		/// </summary>
		[System.ComponentModel.TypeConverter(typeof(nHydrate2.Dsl.Design.Converters.TextDecimalScaleConverter))]
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.ViewField/Scale.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.ViewField/Scale.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.ViewField/Scale.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("2ea4b05a-3fa9-4cee-895e-57cdf00579f7")]
		public virtual global::System.Int32 Scale
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return scalePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ScalePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ViewField.Scale domain property.
		/// </summary>
		internal sealed partial class ScalePropertyHandler : DslModeling::DomainPropertyValueHandler<ViewFieldBase, global::System.Int32>
		{
			private ScalePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ViewField.Scale domain property value handler.
			/// </summary>
			public static readonly ScalePropertyHandler Instance = new ScalePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ViewField.Scale domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ScaleDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Int32 GetValue(ViewFieldBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.Scale;
				//return element.GetValue<global::System.Int32>("Scale", element.scalePropertyStorage);
				//return element.scalePropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ViewFieldBase element, global::System.Int32 newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Int32 oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.scalePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("ViewField"));
				}
			}
		}
		
		#endregion
		#region CodeFacade domain property code
		
		/// <summary>
		/// CodeFacade domain property Id.
		/// </summary>
		public static readonly global::System.Guid CodeFacadeDomainPropertyId = new global::System.Guid(0x7afe7e0d, 0x867c, 0x4db3, 0xaa, 0xe3, 0xad, 0xb3, 0xf4, 0xbd, 0x84, 0x8e);
		
		/// <summary>
		/// Storage for CodeFacade
		/// </summary>
		private global::System.String codeFacadePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of CodeFacade domain property.
		/// Determines the object name used in the API. If this property is blank the 'Name'
		/// property is used in the API. This property can be used to mask the database
		/// identifier.
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.ViewField/CodeFacade.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.ViewField/CodeFacade.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.ViewField/CodeFacade.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("7afe7e0d-867c-4db3-aae3-adb3f4bd848e")]
		public virtual global::System.String CodeFacade
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return codeFacadePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				CodeFacadePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ViewField.CodeFacade domain property.
		/// </summary>
		internal sealed partial class CodeFacadePropertyHandler : DslModeling::DomainPropertyValueHandler<ViewFieldBase, global::System.String>
		{
			private CodeFacadePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ViewField.CodeFacade domain property value handler.
			/// </summary>
			public static readonly CodeFacadePropertyHandler Instance = new CodeFacadePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ViewField.CodeFacade domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return CodeFacadeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ViewFieldBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.CodeFacade;
				//return element.GetValue<global::System.String>("CodeFacade", element.codeFacadePropertyStorage);
				//return element.codeFacadePropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ViewFieldBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.codeFacadePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("ViewField"));
				}
			}
		}
		
		#endregion
		#region View opposite domain role accessor
		/// <summary>
		/// Gets or sets View.
		/// </summary>
		public virtual View View
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::nHydrate2.Dsl.ViewHasFields.ViewFieldDomainRoleId) as View;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::nHydrate2.Dsl.ViewHasFields.ViewFieldDomainRoleId, value);
			}
		}
		#endregion
	}
	/// <summary>
	/// DomainClass ViewField
	/// </summary>
	[global::System.CLSCompliant(true)]
			
	public partial class ViewField : ViewFieldBase
	{
		#region Constructors
		// Constructors were not generated for this class because it had HasCustomConstructor
		// set to true. Please provide the constructors below in a partial class.
		///// <summary>
		///// Constructor
		///// </summary>
		///// <param name="store">Store where new element is to be created.</param>
		///// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		//public ViewField(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
		//	: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		//{
		//}
		//
		///// <summary>
		///// Constructor
		///// </summary>
		///// <param name="partition">Partition where new element is to be created.</param>
		///// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		//public ViewField(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
		//	: base(partition, propertyAssignments)
		//{
		//}
		#endregion
	}
}
namespace nHydrate2.Dsl
{
	/// <summary>
	/// DomainClass RelationField
	/// </summary>
	[DslDesign::DisplayNameResource("nHydrate2.Dsl.RelationField.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("nHydrate2.Dsl.RelationField.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::nHydrate2.Dsl.nHydrate2DomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("fddfb133-1223-4aed-8861-2d4c0553e79a")]
	public partial class RelationField : DslModeling::ModelElement, System.ComponentModel.INotifyPropertyChanged
	{
		#region INotifyPropertyChanged
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs e)
		{
			if (this.PropertyChanged != null)
				this.PropertyChanged(this, e);
		}
		#endregion
	
		#region Constructors, domain class Id
	
		/// <summary>
		/// RelationField domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xfddfb133, 0x1223, 0x4aed, 0x88, 0x61, 0x2d, 0x4c, 0x05, 0x53, 0xe7, 0x9a);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public RelationField(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public RelationField(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region SourceFieldId domain property code
		
		/// <summary>
		/// SourceFieldId domain property Id.
		/// </summary>
		public static readonly global::System.Guid SourceFieldIdDomainPropertyId = new global::System.Guid(0xbabfbaaa, 0xebc3, 0x4b53, 0x9e, 0xd8, 0x5e, 0x7b, 0x5a, 0x2c, 0xd6, 0xa0);
		
		/// <summary>
		/// Storage for SourceFieldId
		/// </summary>
		private global::System.Guid sourceFieldIdPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of SourceFieldId domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.RelationField/SourceFieldId.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.RelationField/SourceFieldId.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("babfbaaa-ebc3-4b53-9ed8-5e7b5a2cd6a0")]
		public virtual global::System.Guid SourceFieldId
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return sourceFieldIdPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				SourceFieldIdPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the RelationField.SourceFieldId domain property.
		/// </summary>
		internal sealed partial class SourceFieldIdPropertyHandler : DslModeling::DomainPropertyValueHandler<RelationField, global::System.Guid>
		{
			private SourceFieldIdPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the RelationField.SourceFieldId domain property value handler.
			/// </summary>
			public static readonly SourceFieldIdPropertyHandler Instance = new SourceFieldIdPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the RelationField.SourceFieldId domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return SourceFieldIdDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Guid GetValue(RelationField element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.SourceFieldId;
				//return element.GetValue<global::System.Guid>("SourceFieldId", element.sourceFieldIdPropertyStorage);
				//return element.sourceFieldIdPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(RelationField element, global::System.Guid newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Guid oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.sourceFieldIdPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("RelationField"));
				}
			}
		}
		
		#endregion
		#region TargetFieldId domain property code
		
		/// <summary>
		/// TargetFieldId domain property Id.
		/// </summary>
		public static readonly global::System.Guid TargetFieldIdDomainPropertyId = new global::System.Guid(0x34a6d2cf, 0xfc80, 0x4e78, 0x95, 0x99, 0xbd, 0x82, 0x16, 0x17, 0x52, 0xc1);
		
		/// <summary>
		/// Storage for TargetFieldId
		/// </summary>
		private global::System.Guid targetFieldIdPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of TargetFieldId domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.RelationField/TargetFieldId.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.RelationField/TargetFieldId.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("34a6d2cf-fc80-4e78-9599-bd82161752c1")]
		public virtual global::System.Guid TargetFieldId
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return targetFieldIdPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TargetFieldIdPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the RelationField.TargetFieldId domain property.
		/// </summary>
		internal sealed partial class TargetFieldIdPropertyHandler : DslModeling::DomainPropertyValueHandler<RelationField, global::System.Guid>
		{
			private TargetFieldIdPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the RelationField.TargetFieldId domain property value handler.
			/// </summary>
			public static readonly TargetFieldIdPropertyHandler Instance = new TargetFieldIdPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the RelationField.TargetFieldId domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TargetFieldIdDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Guid GetValue(RelationField element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.TargetFieldId;
				//return element.GetValue<global::System.Guid>("TargetFieldId", element.targetFieldIdPropertyStorage);
				//return element.targetFieldIdPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(RelationField element, global::System.Guid newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Guid oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.targetFieldIdPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("RelationField"));
				}
			}
		}
		
		#endregion
		#region RelationID domain property code
		
		/// <summary>
		/// RelationID domain property Id.
		/// </summary>
		public static readonly global::System.Guid RelationIDDomainPropertyId = new global::System.Guid(0xdae4f7d7, 0xb925, 0x4215, 0x9d, 0xec, 0xd8, 0x11, 0x82, 0xa7, 0x44, 0xa4);
		
		/// <summary>
		/// Storage for RelationID
		/// </summary>
		private global::System.Guid relationIDPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of RelationID domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.RelationField/RelationID.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.RelationField/RelationID.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("dae4f7d7-b925-4215-9dec-d81182a744a4")]
		public virtual global::System.Guid RelationID
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return relationIDPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				RelationIDPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the RelationField.RelationID domain property.
		/// </summary>
		internal sealed partial class RelationIDPropertyHandler : DslModeling::DomainPropertyValueHandler<RelationField, global::System.Guid>
		{
			private RelationIDPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the RelationField.RelationID domain property value handler.
			/// </summary>
			public static readonly RelationIDPropertyHandler Instance = new RelationIDPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the RelationField.RelationID domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return RelationIDDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Guid GetValue(RelationField element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.RelationID;
				//return element.GetValue<global::System.Guid>("RelationID", element.relationIDPropertyStorage);
				//return element.relationIDPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(RelationField element, global::System.Guid newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Guid oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.relationIDPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("RelationField"));
				}
			}
		}
		
		#endregion
		#region nHydrateModel opposite domain role accessor
		/// <summary>
		/// Gets or sets nHydrateModel.
		/// </summary>
		public virtual nHydrateModel nHydrateModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::nHydrate2.Dsl.nHydrateModelHasRelationFields.RelationFieldDomainRoleId) as nHydrateModel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::nHydrate2.Dsl.nHydrateModelHasRelationFields.RelationFieldDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace nHydrate2.Dsl
{
	/// <summary>
	/// DomainClass StaticData
	/// </summary>
	[DslDesign::DisplayNameResource("nHydrate2.Dsl.StaticData.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("nHydrate2.Dsl.StaticData.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::nHydrate2.Dsl.nHydrate2DomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("30d62f0d-4b1e-4c95-b75b-c2b775dd98a3")]
	public partial class StaticData : DslModeling::ModelElement, System.ComponentModel.INotifyPropertyChanged
	{
		#region INotifyPropertyChanged
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs e)
		{
			if (this.PropertyChanged != null)
				this.PropertyChanged(this, e);
		}
		#endregion
	
		#region Constructors, domain class Id
	
		/// <summary>
		/// StaticData domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x30d62f0d, 0x4b1e, 0x4c95, 0xb7, 0x5b, 0xc2, 0xb7, 0x75, 0xdd, 0x98, 0xa3);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public StaticData(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public StaticData(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region ColumnKey domain property code
		
		/// <summary>
		/// ColumnKey domain property Id.
		/// </summary>
		public static readonly global::System.Guid ColumnKeyDomainPropertyId = new global::System.Guid(0x268d4928, 0xffa6, 0x46ca, 0x95, 0x58, 0xb2, 0xa2, 0x8b, 0x04, 0xf8, 0xc0);
		
		/// <summary>
		/// Storage for ColumnKey
		/// </summary>
		private global::System.Guid columnKeyPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of ColumnKey domain property.
		/// The column identifier for the field value
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.StaticData/ColumnKey.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.StaticData/ColumnKey.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("268d4928-ffa6-46ca-9558-b2a28b04f8c0")]
		public virtual global::System.Guid ColumnKey
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return columnKeyPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ColumnKeyPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the StaticData.ColumnKey domain property.
		/// </summary>
		internal sealed partial class ColumnKeyPropertyHandler : DslModeling::DomainPropertyValueHandler<StaticData, global::System.Guid>
		{
			private ColumnKeyPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the StaticData.ColumnKey domain property value handler.
			/// </summary>
			public static readonly ColumnKeyPropertyHandler Instance = new ColumnKeyPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the StaticData.ColumnKey domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ColumnKeyDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Guid GetValue(StaticData element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.ColumnKey;
				//return element.GetValue<global::System.Guid>("ColumnKey", element.columnKeyPropertyStorage);
				//return element.columnKeyPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(StaticData element, global::System.Guid newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Guid oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.columnKeyPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("StaticData"));
				}
			}
		}
		
		#endregion
		#region Value domain property code
		
		/// <summary>
		/// Value domain property Id.
		/// </summary>
		public static readonly global::System.Guid ValueDomainPropertyId = new global::System.Guid(0x510965ae, 0xaa88, 0x4c1f, 0xa8, 0x0b, 0xba, 0xb4, 0x22, 0x00, 0x31, 0x78);
		
		/// <summary>
		/// Storage for Value
		/// </summary>
		private global::System.String valuePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Value domain property.
		/// The value for this column in the current record
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.StaticData/Value.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.StaticData/Value.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("510965ae-aa88-4c1f-a80b-bab422003178")]
		public virtual global::System.String Value
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return valuePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ValuePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the StaticData.Value domain property.
		/// </summary>
		internal sealed partial class ValuePropertyHandler : DslModeling::DomainPropertyValueHandler<StaticData, global::System.String>
		{
			private ValuePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the StaticData.Value domain property value handler.
			/// </summary>
			public static readonly ValuePropertyHandler Instance = new ValuePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the StaticData.Value domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ValueDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(StaticData element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.Value;
				//return element.GetValue<global::System.String>("Value", element.valuePropertyStorage);
				//return element.valuePropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(StaticData element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.valuePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("StaticData"));
				}
			}
		}
		
		#endregion
		#region OrderKey domain property code
		
		/// <summary>
		/// OrderKey domain property Id.
		/// </summary>
		public static readonly global::System.Guid OrderKeyDomainPropertyId = new global::System.Guid(0xb57e8a0c, 0xdc79, 0x41ef, 0x88, 0x35, 0x91, 0x15, 0xb5, 0xcb, 0x66, 0xf0);
		
		/// <summary>
		/// Storage for OrderKey
		/// </summary>
		private global::System.Int32 orderKeyPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of OrderKey domain property.
		/// The record number [1..N]
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.StaticData/OrderKey.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.StaticData/OrderKey.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("b57e8a0c-dc79-41ef-8835-9115b5cb66f0")]
		public virtual global::System.Int32 OrderKey
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return orderKeyPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				OrderKeyPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the StaticData.OrderKey domain property.
		/// </summary>
		internal sealed partial class OrderKeyPropertyHandler : DslModeling::DomainPropertyValueHandler<StaticData, global::System.Int32>
		{
			private OrderKeyPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the StaticData.OrderKey domain property value handler.
			/// </summary>
			public static readonly OrderKeyPropertyHandler Instance = new OrderKeyPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the StaticData.OrderKey domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return OrderKeyDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Int32 GetValue(StaticData element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.OrderKey;
				//return element.GetValue<global::System.Int32>("OrderKey", element.orderKeyPropertyStorage);
				//return element.orderKeyPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(StaticData element, global::System.Int32 newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Int32 oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.orderKeyPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("StaticData"));
				}
			}
		}
		
		#endregion
		#region Entity opposite domain role accessor
		/// <summary>
		/// Gets or sets Entity.
		/// </summary>
		public virtual Entity Entity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::nHydrate2.Dsl.EntityHasStaticDatum.StaticDataDomainRoleId) as Entity;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::nHydrate2.Dsl.EntityHasStaticDatum.StaticDataDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace nHydrate2.Dsl
{
	/// <summary>
	/// Double-derived base class for DomainClass Composite
	/// </summary>
	[DslDesign::DisplayNameResource("nHydrate2.Dsl.Composite.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("nHydrate2.Dsl.Composite.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::nHydrate2.Dsl.nHydrate2DomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("a6bd893f-0e60-4354-a19e-64042cccbfb8")]
	public abstract partial class CompositeBase : DslModeling::ModelElement, System.ComponentModel.INotifyPropertyChanged
	{
		#region INotifyPropertyChanged
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs e)
		{
			if (this.PropertyChanged != null)
				this.PropertyChanged(this, e);
		}
		#endregion
	
		#region Constructors, domain class Id
	
		/// <summary>
		/// Composite domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xa6bd893f, 0x0e60, 0x4354, 0xa1, 0x9e, 0x64, 0x04, 0x2c, 0xcc, 0xbf, 0xb8);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected CompositeBase(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x56c0a23f, 0xcc97, 0x497c, 0xbc, 0xab, 0xc8, 0x78, 0x99, 0xf9, 0x54, 0xa1);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Determines the name of this object
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.Composite/Name.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.Composite/Name.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.Composite/Name.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("56c0a23f-cc97-497c-bcab-c87899f954a1")]
		public virtual global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Composite.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<CompositeBase, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Composite.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Composite.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(CompositeBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.Name;
				//return element.GetValue<global::System.String>("Name", element.namePropertyStorage);
				//return element.namePropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(CompositeBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Composite"));
				}
			}
		}
		
		#endregion
		#region CodeFacade domain property code
		
		/// <summary>
		/// CodeFacade domain property Id.
		/// </summary>
		public static readonly global::System.Guid CodeFacadeDomainPropertyId = new global::System.Guid(0x6f15628a, 0x77ab, 0x4780, 0xa7, 0x12, 0xd6, 0x2c, 0x07, 0x50, 0x6b, 0xb0);
		
		/// <summary>
		/// Storage for CodeFacade
		/// </summary>
		private global::System.String codeFacadePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of CodeFacade domain property.
		/// Determines the object name used in the API. If this property is blank the 'Name'
		/// property is used in the API. This property can be used to mask the database
		/// identifier.
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.Composite/CodeFacade.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.Composite/CodeFacade.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.Composite/CodeFacade.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("6f15628a-77ab-4780-a712-d62c07506bb0")]
		public virtual global::System.String CodeFacade
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return codeFacadePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				CodeFacadePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Composite.CodeFacade domain property.
		/// </summary>
		internal sealed partial class CodeFacadePropertyHandler : DslModeling::DomainPropertyValueHandler<CompositeBase, global::System.String>
		{
			private CodeFacadePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Composite.CodeFacade domain property value handler.
			/// </summary>
			public static readonly CodeFacadePropertyHandler Instance = new CodeFacadePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Composite.CodeFacade domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return CodeFacadeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(CompositeBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.CodeFacade;
				//return element.GetValue<global::System.String>("CodeFacade", element.codeFacadePropertyStorage);
				//return element.codeFacadePropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(CompositeBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.codeFacadePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Composite"));
				}
			}
		}
		
		#endregion
		#region IsGenerated domain property code
		
		/// <summary>
		/// IsGenerated domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsGeneratedDomainPropertyId = new global::System.Guid(0x7108a0f2, 0x9ac1, 0x43df, 0xae, 0xa9, 0x10, 0xd1, 0x78, 0x5a, 0xd7, 0xb8);
		
		/// <summary>
		/// Storage for IsGenerated
		/// </summary>
		private global::System.Boolean isGeneratedPropertyStorage = true;
		
		/// <summary>
		/// Gets or sets the value of IsGenerated domain property.
		/// Determines if this item is used when generating
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.Composite/IsGenerated.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.Composite/IsGenerated.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.Composite/IsGenerated.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(true)]
		[DslModeling::DomainObjectId("7108a0f2-9ac1-43df-aea9-10d1785ad7b8")]
		public virtual global::System.Boolean IsGenerated
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isGeneratedPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsGeneratedPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Composite.IsGenerated domain property.
		/// </summary>
		internal sealed partial class IsGeneratedPropertyHandler : DslModeling::DomainPropertyValueHandler<CompositeBase, global::System.Boolean>
		{
			private IsGeneratedPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Composite.IsGenerated domain property value handler.
			/// </summary>
			public static readonly IsGeneratedPropertyHandler Instance = new IsGeneratedPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Composite.IsGenerated domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsGeneratedDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(CompositeBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.IsGenerated;
				//return element.GetValue<global::System.Boolean>("IsGenerated", element.isGeneratedPropertyStorage);
				//return element.isGeneratedPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(CompositeBase element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isGeneratedPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Composite"));
				}
			}
		}
		
		#endregion
		#region Summary domain property code
		
		/// <summary>
		/// Summary domain property Id.
		/// </summary>
		public static readonly global::System.Guid SummaryDomainPropertyId = new global::System.Guid(0x0e04de98, 0x3432, 0x420a, 0xb6, 0x15, 0x61, 0x3c, 0xdd, 0xcf, 0x45, 0x24);
		
		/// <summary>
		/// Storage for Summary
		/// </summary>
		private global::System.String summaryPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Summary domain property.
		/// Determines the summary of this object
		/// </summary>
		[System.ComponentModel.Editor(typeof(System.ComponentModel.Design.MultilineStringEditor), typeof(System.Drawing.Design.UITypeEditor))]
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.Composite/Summary.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.Composite/Summary.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.Composite/Summary.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("0e04de98-3432-420a-b615-613cddcf4524")]
		public virtual global::System.String Summary
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return summaryPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				SummaryPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Composite.Summary domain property.
		/// </summary>
		internal sealed partial class SummaryPropertyHandler : DslModeling::DomainPropertyValueHandler<CompositeBase, global::System.String>
		{
			private SummaryPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Composite.Summary domain property value handler.
			/// </summary>
			public static readonly SummaryPropertyHandler Instance = new SummaryPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Composite.Summary domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return SummaryDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(CompositeBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.Summary;
				//return element.GetValue<global::System.String>("Summary", element.summaryPropertyStorage);
				//return element.summaryPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(CompositeBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.summaryPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Composite"));
				}
			}
		}
		
		#endregion
		#region Entity opposite domain role accessor
		/// <summary>
		/// Gets or sets Entity.
		/// </summary>
		public virtual Entity Entity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::nHydrate2.Dsl.EntityHasComposites.CompositeDomainRoleId) as Entity;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::nHydrate2.Dsl.EntityHasComposites.CompositeDomainRoleId, value);
			}
		}
		#endregion
		#region Fields opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Fields.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<CompositeField> Fields
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<CompositeField>, CompositeField>(global::nHydrate2.Dsl.CompositeHasFields.CompositeDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::nHydrate2.Dsl.CompositeField.DomainClassId)) 
				{
					// Call custom method implemented in partial class
					return this.CanMergeCompositeField(rootElement, elementGroupPrototype);
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::nHydrate2.Dsl.CompositeField sourceCompositeField1 = sourceElement as global::nHydrate2.Dsl.CompositeField;
			if (sourceCompositeField1 != null)
			{
				// Create link for path CompositeHasFields.Fields
				this.Fields.Add(sourceCompositeField1);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::nHydrate2.Dsl.CompositeField sourceCompositeField1 = sourceElement as global::nHydrate2.Dsl.CompositeField;
			if (sourceCompositeField1 != null)
			{
				// Delete link for path CompositeHasFields.Fields
				
				foreach (DslModeling::ElementLink link in global::nHydrate2.Dsl.CompositeHasFields.GetLinks((global::nHydrate2.Dsl.Composite)this, sourceCompositeField1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::nHydrate2.Dsl.CompositeHasFields.CompositeDomainRoleId, global::nHydrate2.Dsl.CompositeHasFields.CompositeFieldDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
	/// <summary>
	/// DomainClass Composite
	/// </summary>
	[global::System.CLSCompliant(true)]
			
	public partial class Composite : CompositeBase
	{
		#region Constructors
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Composite(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Composite(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace nHydrate2.Dsl
{
	/// <summary>
	/// DomainClass CompositeField
	/// </summary>
	[DslDesign::DisplayNameResource("nHydrate2.Dsl.CompositeField.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("nHydrate2.Dsl.CompositeField.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::nHydrate2.Dsl.nHydrate2DomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("ae498b64-1182-495b-81d6-8972a32ecc67")]
	public partial class CompositeField : DslModeling::ModelElement, System.ComponentModel.INotifyPropertyChanged
	{
		#region INotifyPropertyChanged
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs e)
		{
			if (this.PropertyChanged != null)
				this.PropertyChanged(this, e);
		}
		#endregion
	
		#region Constructors, domain class Id
	
		/// <summary>
		/// CompositeField domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xae498b64, 0x1182, 0x495b, 0x81, 0xd6, 0x89, 0x72, 0xa3, 0x2e, 0xcc, 0x67);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public CompositeField(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public CompositeField(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region FieldId domain property code
		
		/// <summary>
		/// FieldId domain property Id.
		/// </summary>
		public static readonly global::System.Guid FieldIdDomainPropertyId = new global::System.Guid(0x24e3a97d, 0x1b3b, 0x4d4c, 0x95, 0xed, 0x50, 0x64, 0xcd, 0x76, 0x3d, 0x43);
		
		/// <summary>
		/// Storage for FieldId
		/// </summary>
		private global::System.Guid fieldIdPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of FieldId domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.CompositeField/FieldId.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.CompositeField/FieldId.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("24e3a97d-1b3b-4d4c-95ed-5064cd763d43")]
		public virtual global::System.Guid FieldId
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return fieldIdPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				FieldIdPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the CompositeField.FieldId domain property.
		/// </summary>
		internal sealed partial class FieldIdPropertyHandler : DslModeling::DomainPropertyValueHandler<CompositeField, global::System.Guid>
		{
			private FieldIdPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the CompositeField.FieldId domain property value handler.
			/// </summary>
			public static readonly FieldIdPropertyHandler Instance = new FieldIdPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the CompositeField.FieldId domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return FieldIdDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Guid GetValue(CompositeField element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.FieldId;
				//return element.GetValue<global::System.Guid>("FieldId", element.fieldIdPropertyStorage);
				//return element.fieldIdPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(CompositeField element, global::System.Guid newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Guid oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.fieldIdPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("CompositeField"));
				}
			}
		}
		
		#endregion
		#region Composite opposite domain role accessor
		/// <summary>
		/// Gets or sets Composite.
		/// </summary>
		public virtual Composite Composite
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::nHydrate2.Dsl.CompositeHasFields.CompositeFieldDomainRoleId) as Composite;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::nHydrate2.Dsl.CompositeHasFields.CompositeFieldDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace nHydrate2.Dsl
{
	/// <summary>
	/// DomainClass EntityMetadata
	/// </summary>
	[DslDesign::DisplayNameResource("nHydrate2.Dsl.EntityMetadata.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("nHydrate2.Dsl.EntityMetadata.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::nHydrate2.Dsl.nHydrate2DomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("8022b63d-c856-4a0e-9881-c24888e718c5")]
	public partial class EntityMetadata : DslModeling::ModelElement, System.ComponentModel.INotifyPropertyChanged
	{
		#region INotifyPropertyChanged
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs e)
		{
			if (this.PropertyChanged != null)
				this.PropertyChanged(this, e);
		}
		#endregion
	
		#region Constructors, domain class Id
	
		/// <summary>
		/// EntityMetadata domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x8022b63d, 0xc856, 0x4a0e, 0x98, 0x81, 0xc2, 0x48, 0x88, 0xe7, 0x18, 0xc5);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public EntityMetadata(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public EntityMetadata(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Key domain property code
		
		/// <summary>
		/// Key domain property Id.
		/// </summary>
		public static readonly global::System.Guid KeyDomainPropertyId = new global::System.Guid(0x0202eeb2, 0xcce2, 0x4f28, 0x9b, 0x61, 0xd4, 0x73, 0x34, 0x87, 0x34, 0xdb);
		
		/// <summary>
		/// Storage for Key
		/// </summary>
		private global::System.String keyPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Key domain property.
		/// The unqiue key of this metadata
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.EntityMetadata/Key.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.EntityMetadata/Key.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.EntityMetadata/Key.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("0202eeb2-cce2-4f28-9b61-d473348734db")]
		public virtual global::System.String Key
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return keyPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				KeyPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the EntityMetadata.Key domain property.
		/// </summary>
		internal sealed partial class KeyPropertyHandler : DslModeling::DomainPropertyValueHandler<EntityMetadata, global::System.String>
		{
			private KeyPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the EntityMetadata.Key domain property value handler.
			/// </summary>
			public static readonly KeyPropertyHandler Instance = new KeyPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the EntityMetadata.Key domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return KeyDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(EntityMetadata element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.Key;
				//return element.GetValue<global::System.String>("Key", element.keyPropertyStorage);
				//return element.keyPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(EntityMetadata element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.keyPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("EntityMetadata"));
				}
			}
		}
		
		#endregion
		#region Value domain property code
		
		/// <summary>
		/// Value domain property Id.
		/// </summary>
		public static readonly global::System.Guid ValueDomainPropertyId = new global::System.Guid(0x8d770048, 0x28f0, 0x472d, 0x8c, 0xff, 0xe8, 0xd1, 0x0e, 0xa7, 0x19, 0x1b);
		
		/// <summary>
		/// Storage for Value
		/// </summary>
		private global::System.String valuePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Value domain property.
		/// The value of this metadata
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.EntityMetadata/Value.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.EntityMetadata/Value.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.EntityMetadata/Value.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("8d770048-28f0-472d-8cff-e8d10ea7191b")]
		public virtual global::System.String Value
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return valuePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ValuePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the EntityMetadata.Value domain property.
		/// </summary>
		internal sealed partial class ValuePropertyHandler : DslModeling::DomainPropertyValueHandler<EntityMetadata, global::System.String>
		{
			private ValuePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the EntityMetadata.Value domain property value handler.
			/// </summary>
			public static readonly ValuePropertyHandler Instance = new ValuePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the EntityMetadata.Value domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ValueDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(EntityMetadata element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.Value;
				//return element.GetValue<global::System.String>("Value", element.valuePropertyStorage);
				//return element.valuePropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(EntityMetadata element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.valuePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("EntityMetadata"));
				}
			}
		}
		
		#endregion
		#region Summary domain property code
		
		/// <summary>
		/// Summary domain property Id.
		/// </summary>
		public static readonly global::System.Guid SummaryDomainPropertyId = new global::System.Guid(0xee86ada7, 0x4a6b, 0x498b, 0xbd, 0x67, 0xa9, 0xc3, 0x44, 0x5b, 0x8a, 0x8b);
		
		/// <summary>
		/// Storage for Summary
		/// </summary>
		private global::System.String summaryPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Summary domain property.
		/// A summary of thsi object
		/// </summary>
		[System.ComponentModel.Editor(typeof(System.ComponentModel.Design.MultilineStringEditor), typeof(System.Drawing.Design.UITypeEditor))]
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.EntityMetadata/Summary.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.EntityMetadata/Summary.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.EntityMetadata/Summary.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("ee86ada7-4a6b-498b-bd67-a9c3445b8a8b")]
		public virtual global::System.String Summary
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return summaryPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				SummaryPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the EntityMetadata.Summary domain property.
		/// </summary>
		internal sealed partial class SummaryPropertyHandler : DslModeling::DomainPropertyValueHandler<EntityMetadata, global::System.String>
		{
			private SummaryPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the EntityMetadata.Summary domain property value handler.
			/// </summary>
			public static readonly SummaryPropertyHandler Instance = new SummaryPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the EntityMetadata.Summary domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return SummaryDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(EntityMetadata element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.Summary;
				//return element.GetValue<global::System.String>("Summary", element.summaryPropertyStorage);
				//return element.summaryPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(EntityMetadata element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.summaryPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("EntityMetadata"));
				}
			}
		}
		
		#endregion
		#region Entity opposite domain role accessor
		/// <summary>
		/// Gets or sets Entity.
		/// </summary>
		public virtual Entity Entity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::nHydrate2.Dsl.EntityHasMetadata.EntityMetadataDomainRoleId) as Entity;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::nHydrate2.Dsl.EntityHasMetadata.EntityMetadataDomainRoleId, value);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::nHydrate2.Dsl.EntityMetadata.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::nHydrate2.Dsl.EntityMetadata sourceEntityMetadata1 = sourceElement as global::nHydrate2.Dsl.EntityMetadata;
			if (sourceEntityMetadata1 != null)
			{
				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::nHydrate2.Dsl.EntityMetadata sourceEntityMetadata1 = sourceElement as global::nHydrate2.Dsl.EntityMetadata;
			if (sourceEntityMetadata1 != null)
			{
				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace nHydrate2.Dsl
{
	/// <summary>
	/// DomainClass FieldMetadata
	/// </summary>
	[DslDesign::DisplayNameResource("nHydrate2.Dsl.FieldMetadata.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("nHydrate2.Dsl.FieldMetadata.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::nHydrate2.Dsl.nHydrate2DomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("e4d98918-02cc-4cb0-94fc-2da89080f5be")]
	public partial class FieldMetadata : DslModeling::ModelElement, System.ComponentModel.INotifyPropertyChanged
	{
		#region INotifyPropertyChanged
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs e)
		{
			if (this.PropertyChanged != null)
				this.PropertyChanged(this, e);
		}
		#endregion
	
		#region Constructors, domain class Id
	
		/// <summary>
		/// FieldMetadata domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xe4d98918, 0x02cc, 0x4cb0, 0x94, 0xfc, 0x2d, 0xa8, 0x90, 0x80, 0xf5, 0xbe);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public FieldMetadata(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public FieldMetadata(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Key domain property code
		
		/// <summary>
		/// Key domain property Id.
		/// </summary>
		public static readonly global::System.Guid KeyDomainPropertyId = new global::System.Guid(0x8a009da7, 0x79ba, 0x4f0b, 0x9d, 0x2a, 0xbb, 0xbd, 0x4c, 0x37, 0x22, 0x31);
		
		/// <summary>
		/// Storage for Key
		/// </summary>
		private global::System.String keyPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Key domain property.
		/// The unique key of this metadata
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.FieldMetadata/Key.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.FieldMetadata/Key.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.FieldMetadata/Key.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("8a009da7-79ba-4f0b-9d2a-bbbd4c372231")]
		public virtual global::System.String Key
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return keyPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				KeyPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the FieldMetadata.Key domain property.
		/// </summary>
		internal sealed partial class KeyPropertyHandler : DslModeling::DomainPropertyValueHandler<FieldMetadata, global::System.String>
		{
			private KeyPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the FieldMetadata.Key domain property value handler.
			/// </summary>
			public static readonly KeyPropertyHandler Instance = new KeyPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the FieldMetadata.Key domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return KeyDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(FieldMetadata element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.Key;
				//return element.GetValue<global::System.String>("Key", element.keyPropertyStorage);
				//return element.keyPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(FieldMetadata element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.keyPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("FieldMetadata"));
				}
			}
		}
		
		#endregion
		#region Value domain property code
		
		/// <summary>
		/// Value domain property Id.
		/// </summary>
		public static readonly global::System.Guid ValueDomainPropertyId = new global::System.Guid(0xf7fed8a2, 0x943c, 0x4c5f, 0x90, 0xc2, 0xf5, 0x6b, 0xda, 0x23, 0xdf, 0xbc);
		
		/// <summary>
		/// Storage for Value
		/// </summary>
		private global::System.String valuePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Value domain property.
		/// The value of this metadata
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.FieldMetadata/Value.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.FieldMetadata/Value.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.FieldMetadata/Value.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("f7fed8a2-943c-4c5f-90c2-f56bda23dfbc")]
		public virtual global::System.String Value
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return valuePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ValuePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the FieldMetadata.Value domain property.
		/// </summary>
		internal sealed partial class ValuePropertyHandler : DslModeling::DomainPropertyValueHandler<FieldMetadata, global::System.String>
		{
			private ValuePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the FieldMetadata.Value domain property value handler.
			/// </summary>
			public static readonly ValuePropertyHandler Instance = new ValuePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the FieldMetadata.Value domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ValueDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(FieldMetadata element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.Value;
				//return element.GetValue<global::System.String>("Value", element.valuePropertyStorage);
				//return element.valuePropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(FieldMetadata element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.valuePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("FieldMetadata"));
				}
			}
		}
		
		#endregion
		#region Summary domain property code
		
		/// <summary>
		/// Summary domain property Id.
		/// </summary>
		public static readonly global::System.Guid SummaryDomainPropertyId = new global::System.Guid(0x4f1ef578, 0x6f8a, 0x422f, 0x85, 0x42, 0x31, 0x07, 0x67, 0x5f, 0xa0, 0xe2);
		
		/// <summary>
		/// Storage for Summary
		/// </summary>
		private global::System.String summaryPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Summary domain property.
		/// A summary of thsi object
		/// </summary>
		[System.ComponentModel.Editor(typeof(System.ComponentModel.Design.MultilineStringEditor), typeof(System.Drawing.Design.UITypeEditor))]
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.FieldMetadata/Summary.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.FieldMetadata/Summary.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.FieldMetadata/Summary.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("4f1ef578-6f8a-422f-8542-3107675fa0e2")]
		public virtual global::System.String Summary
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return summaryPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				SummaryPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the FieldMetadata.Summary domain property.
		/// </summary>
		internal sealed partial class SummaryPropertyHandler : DslModeling::DomainPropertyValueHandler<FieldMetadata, global::System.String>
		{
			private SummaryPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the FieldMetadata.Summary domain property value handler.
			/// </summary>
			public static readonly SummaryPropertyHandler Instance = new SummaryPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the FieldMetadata.Summary domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return SummaryDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(FieldMetadata element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.Summary;
				//return element.GetValue<global::System.String>("Summary", element.summaryPropertyStorage);
				//return element.summaryPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(FieldMetadata element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.summaryPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("FieldMetadata"));
				}
			}
		}
		
		#endregion
		#region Field opposite domain role accessor
		/// <summary>
		/// Gets or sets Field.
		/// </summary>
		public virtual Field Field
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::nHydrate2.Dsl.FieldHasMetadata.FieldMetadataDomainRoleId) as Field;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::nHydrate2.Dsl.FieldHasMetadata.FieldMetadataDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace nHydrate2.Dsl
{
	/// <summary>
	/// Double-derived base class for DomainClass Function
	/// </summary>
	[DslDesign::DisplayNameResource("nHydrate2.Dsl.Function.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("nHydrate2.Dsl.Function.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::nHydrate2.Dsl.nHydrate2DomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("4940addd-d841-4fc6-8440-05351b351779")]
	public abstract partial class FunctionBase : DslModeling::ModelElement, System.ComponentModel.INotifyPropertyChanged
	{
		#region INotifyPropertyChanged
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs e)
		{
			if (this.PropertyChanged != null)
				this.PropertyChanged(this, e);
		}
		#endregion
	
		#region Constructors, domain class Id
	
		/// <summary>
		/// Function domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x4940addd, 0xd841, 0x4fc6, 0x84, 0x40, 0x05, 0x35, 0x1b, 0x35, 0x17, 0x79);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected FunctionBase(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region SQL domain property code
		
		/// <summary>
		/// SQL domain property Id.
		/// </summary>
		public static readonly global::System.Guid SQLDomainPropertyId = new global::System.Guid(0xb6378f56, 0x7e38, 0x422b, 0xa3, 0xce, 0xc7, 0x77, 0xb6, 0x24, 0x7d, 0x4c);
		
		/// <summary>
		/// Storage for SQL
		/// </summary>
		private global::System.String sQLPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of SQL domain property.
		/// Determines SQL statement used to create the database function object
		/// </summary>
		[System.ComponentModel.Editor(typeof(nHydrate2.Dsl.Design.Editors.SQLEditor), typeof(System.Drawing.Design.UITypeEditor))]
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.Function/SQL.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.Function/SQL.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.Function/SQL.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("b6378f56-7e38-422b-a3ce-c777b6247d4c")]
		public virtual global::System.String SQL
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return sQLPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				SQLPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Function.SQL domain property.
		/// </summary>
		internal sealed partial class SQLPropertyHandler : DslModeling::DomainPropertyValueHandler<FunctionBase, global::System.String>
		{
			private SQLPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Function.SQL domain property value handler.
			/// </summary>
			public static readonly SQLPropertyHandler Instance = new SQLPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Function.SQL domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return SQLDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(FunctionBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.SQL;
				//return element.GetValue<global::System.String>("SQL", element.sQLPropertyStorage);
				//return element.sQLPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(FunctionBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.sQLPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Function"));
				}
			}
		}
		
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0xa40a2125, 0x7278, 0x4985, 0xbb, 0x0b, 0xba, 0x43, 0xd4, 0x3c, 0x2c, 0xe5);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Determines the name of this object
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.Function/Name.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.Function/Name.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.Function/Name.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("a40a2125-7278-4985-bb0b-ba43d43c2ce5")]
		public virtual global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Function.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<FunctionBase, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Function.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Function.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(FunctionBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.Name;
				//return element.GetValue<global::System.String>("Name", element.namePropertyStorage);
				//return element.namePropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(FunctionBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Function"));
				}
			}
		}
		
		#endregion
		#region IsGenerated domain property code
		
		/// <summary>
		/// IsGenerated domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsGeneratedDomainPropertyId = new global::System.Guid(0x7a8be4b7, 0x4cb3, 0x4398, 0xb6, 0x4f, 0x4c, 0x4e, 0xeb, 0x63, 0x84, 0xa8);
		
		/// <summary>
		/// Storage for IsGenerated
		/// </summary>
		private global::System.Boolean isGeneratedPropertyStorage = true;
		
		/// <summary>
		/// Gets or sets the value of IsGenerated domain property.
		/// Determines if this item is used when generating
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.Function/IsGenerated.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.Function/IsGenerated.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.Function/IsGenerated.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(true)]
		[DslModeling::DomainObjectId("7a8be4b7-4cb3-4398-b64f-4c4eeb6384a8")]
		public virtual global::System.Boolean IsGenerated
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isGeneratedPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsGeneratedPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Function.IsGenerated domain property.
		/// </summary>
		internal sealed partial class IsGeneratedPropertyHandler : DslModeling::DomainPropertyValueHandler<FunctionBase, global::System.Boolean>
		{
			private IsGeneratedPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Function.IsGenerated domain property value handler.
			/// </summary>
			public static readonly IsGeneratedPropertyHandler Instance = new IsGeneratedPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Function.IsGenerated domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsGeneratedDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(FunctionBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.IsGenerated;
				//return element.GetValue<global::System.Boolean>("IsGenerated", element.isGeneratedPropertyStorage);
				//return element.isGeneratedPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(FunctionBase element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isGeneratedPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Function"));
				}
			}
		}
		
		#endregion
		#region CodeFacade domain property code
		
		/// <summary>
		/// CodeFacade domain property Id.
		/// </summary>
		public static readonly global::System.Guid CodeFacadeDomainPropertyId = new global::System.Guid(0x5cb47a54, 0xd2a1, 0x4876, 0x8a, 0x4e, 0x76, 0xa3, 0x7b, 0x08, 0xba, 0x3c);
		
		/// <summary>
		/// Storage for CodeFacade
		/// </summary>
		private global::System.String codeFacadePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of CodeFacade domain property.
		/// Determines the object name used in the API. If this property is blank the 'Name'
		/// property is used in the API. This property can be used to mask the database
		/// identifier.
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.Function/CodeFacade.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.Function/CodeFacade.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.Function/CodeFacade.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("5cb47a54-d2a1-4876-8a4e-76a37b08ba3c")]
		public virtual global::System.String CodeFacade
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return codeFacadePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				CodeFacadePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Function.CodeFacade domain property.
		/// </summary>
		internal sealed partial class CodeFacadePropertyHandler : DslModeling::DomainPropertyValueHandler<FunctionBase, global::System.String>
		{
			private CodeFacadePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Function.CodeFacade domain property value handler.
			/// </summary>
			public static readonly CodeFacadePropertyHandler Instance = new CodeFacadePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Function.CodeFacade domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return CodeFacadeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(FunctionBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.CodeFacade;
				//return element.GetValue<global::System.String>("CodeFacade", element.codeFacadePropertyStorage);
				//return element.codeFacadePropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(FunctionBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.codeFacadePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Function"));
				}
			}
		}
		
		#endregion
		#region Summary domain property code
		
		/// <summary>
		/// Summary domain property Id.
		/// </summary>
		public static readonly global::System.Guid SummaryDomainPropertyId = new global::System.Guid(0xce6796d2, 0xb4b0, 0x4a7d, 0xa2, 0x3b, 0x63, 0xbb, 0x6b, 0xd2, 0x12, 0x3e);
		
		/// <summary>
		/// Storage for Summary
		/// </summary>
		private global::System.String summaryPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Summary domain property.
		/// Determines the summary of this object
		/// </summary>
		[System.ComponentModel.Editor(typeof(System.ComponentModel.Design.MultilineStringEditor), typeof(System.Drawing.Design.UITypeEditor))]
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.Function/Summary.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.Function/Summary.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.Function/Summary.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("ce6796d2-b4b0-4a7d-a23b-63bb6bd2123e")]
		public virtual global::System.String Summary
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return summaryPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				SummaryPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Function.Summary domain property.
		/// </summary>
		internal sealed partial class SummaryPropertyHandler : DslModeling::DomainPropertyValueHandler<FunctionBase, global::System.String>
		{
			private SummaryPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Function.Summary domain property value handler.
			/// </summary>
			public static readonly SummaryPropertyHandler Instance = new SummaryPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Function.Summary domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return SummaryDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(FunctionBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.Summary;
				//return element.GetValue<global::System.String>("Summary", element.summaryPropertyStorage);
				//return element.summaryPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(FunctionBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.summaryPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Function"));
				}
			}
		}
		
		#endregion
		#region Schema domain property code
		
		/// <summary>
		/// Schema domain property Id.
		/// </summary>
		public static readonly global::System.Guid SchemaDomainPropertyId = new global::System.Guid(0xbc5e57ab, 0x995f, 0x4c57, 0xbb, 0x1d, 0x7d, 0x6b, 0x98, 0x1a, 0x81, 0x7b);
		
		/// <summary>
		/// Storage for Schema
		/// </summary>
		private global::System.String schemaPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Schema domain property.
		/// Determines the parent schema for this object
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.Function/Schema.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.Function/Schema.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.Function/Schema.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("bc5e57ab-995f-4c57-bb1d-7d6b981a817b")]
		public virtual global::System.String Schema
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return schemaPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				SchemaPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Function.Schema domain property.
		/// </summary>
		internal sealed partial class SchemaPropertyHandler : DslModeling::DomainPropertyValueHandler<FunctionBase, global::System.String>
		{
			private SchemaPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Function.Schema domain property value handler.
			/// </summary>
			public static readonly SchemaPropertyHandler Instance = new SchemaPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Function.Schema domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return SchemaDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(FunctionBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.Schema;
				//return element.GetValue<global::System.String>("Schema", element.schemaPropertyStorage);
				//return element.schemaPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(FunctionBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.schemaPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Function"));
				}
			}
		}
		
		#endregion
		#region IsTable domain property code
		
		/// <summary>
		/// IsTable domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsTableDomainPropertyId = new global::System.Guid(0x8863f742, 0xc360, 0x44f6, 0x90, 0x31, 0xe4, 0xd9, 0x24, 0xcf, 0xbc, 0xb7);
		
		/// <summary>
		/// Storage for IsTable
		/// </summary>
		private global::System.Boolean isTablePropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of IsTable domain property.
		/// Determines if this is a table function
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.Function/IsTable.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.Function/IsTable.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.Function/IsTable.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("8863f742-c360-44f6-9031-e4d924cfbcb7")]
		public virtual global::System.Boolean IsTable
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isTablePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsTablePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Function.IsTable domain property.
		/// </summary>
		internal sealed partial class IsTablePropertyHandler : DslModeling::DomainPropertyValueHandler<FunctionBase, global::System.Boolean>
		{
			private IsTablePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Function.IsTable domain property value handler.
			/// </summary>
			public static readonly IsTablePropertyHandler Instance = new IsTablePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Function.IsTable domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsTableDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(FunctionBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.IsTable;
				//return element.GetValue<global::System.Boolean>("IsTable", element.isTablePropertyStorage);
				//return element.isTablePropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(FunctionBase element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isTablePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Function"));
				}
			}
		}
		
		#endregion
		#region ReturnVariable domain property code
		
		/// <summary>
		/// ReturnVariable domain property Id.
		/// </summary>
		public static readonly global::System.Guid ReturnVariableDomainPropertyId = new global::System.Guid(0x31dfa463, 0xae1c, 0x4f18, 0x81, 0x50, 0x86, 0x54, 0x86, 0x24, 0x9c, 0xae);
		
		/// <summary>
		/// Storage for ReturnVariable
		/// </summary>
		private global::System.String returnVariablePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of ReturnVariable domain property.
		/// Optional variable name used in function declaration return type
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.Function/ReturnVariable.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.Function/ReturnVariable.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.Function/ReturnVariable.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("31dfa463-ae1c-4f18-8150-865486249cae")]
		public virtual global::System.String ReturnVariable
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return returnVariablePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ReturnVariablePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Function.ReturnVariable domain property.
		/// </summary>
		internal sealed partial class ReturnVariablePropertyHandler : DslModeling::DomainPropertyValueHandler<FunctionBase, global::System.String>
		{
			private ReturnVariablePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Function.ReturnVariable domain property value handler.
			/// </summary>
			public static readonly ReturnVariablePropertyHandler Instance = new ReturnVariablePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Function.ReturnVariable domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ReturnVariableDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(FunctionBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.ReturnVariable;
				//return element.GetValue<global::System.String>("ReturnVariable", element.returnVariablePropertyStorage);
				//return element.returnVariablePropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(FunctionBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.returnVariablePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Function"));
				}
			}
		}
		
		#endregion
		#region PrecedenceOrder domain property code
		
		/// <summary>
		/// PrecedenceOrder domain property Id.
		/// </summary>
		public static readonly global::System.Guid PrecedenceOrderDomainPropertyId = new global::System.Guid(0x6b307dc7, 0x05cb, 0x4302, 0xa5, 0x21, 0x62, 0x2a, 0x47, 0xe6, 0x4a, 0x2a);
		
		/// <summary>
		/// Storage for PrecedenceOrder
		/// </summary>
		private global::System.Int32 precedenceOrderPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of PrecedenceOrder domain property.
		/// Determines the order generated scripts are run
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.Function/PrecedenceOrder.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.Function/PrecedenceOrder.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("6b307dc7-05cb-4302-a521-622a47e64a2a")]
		public virtual global::System.Int32 PrecedenceOrder
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return precedenceOrderPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				PrecedenceOrderPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Function.PrecedenceOrder domain property.
		/// </summary>
		internal sealed partial class PrecedenceOrderPropertyHandler : DslModeling::DomainPropertyValueHandler<FunctionBase, global::System.Int32>
		{
			private PrecedenceOrderPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Function.PrecedenceOrder domain property value handler.
			/// </summary>
			public static readonly PrecedenceOrderPropertyHandler Instance = new PrecedenceOrderPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Function.PrecedenceOrder domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return PrecedenceOrderDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Int32 GetValue(FunctionBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.PrecedenceOrder;
				//return element.GetValue<global::System.Int32>("PrecedenceOrder", element.precedenceOrderPropertyStorage);
				//return element.precedenceOrderPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(FunctionBase element, global::System.Int32 newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Int32 oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.precedenceOrderPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Function"));
				}
			}
		}
		
		#endregion
		#region nHydrateModel opposite domain role accessor
		/// <summary>
		/// Gets or sets nHydrateModel.
		/// </summary>
		public virtual nHydrateModel nHydrateModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::nHydrate2.Dsl.nHydrateModelHasFunctions.FunctionDomainRoleId) as nHydrateModel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::nHydrate2.Dsl.nHydrateModelHasFunctions.FunctionDomainRoleId, value);
			}
		}
		#endregion
		#region Parameters opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Parameters.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<FunctionParameter> Parameters
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<FunctionParameter>, FunctionParameter>(global::nHydrate2.Dsl.FunctionHasParameters.FunctionDomainRoleId);
			}
		}
		#endregion
		#region Fields opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Fields.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<FunctionField> Fields
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<FunctionField>, FunctionField>(global::nHydrate2.Dsl.FunctionHasFields.FunctionDomainRoleId);
			}
		}
		#endregion
		#region Modules opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Modules.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Module> Modules
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Module>, Module>(global::nHydrate2.Dsl.FunctionReferencesModules.FunctionDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::nHydrate2.Dsl.FunctionField.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::nHydrate2.Dsl.FunctionParameter.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::nHydrate2.Dsl.FunctionField sourceFunctionField1 = sourceElement as global::nHydrate2.Dsl.FunctionField;
			if (sourceFunctionField1 != null)
			{
				// Create link for path FunctionHasFields.Fields
				this.Fields.Add(sourceFunctionField1);

				return;
			}
				
			global::nHydrate2.Dsl.FunctionParameter sourceFunctionParameter2 = sourceElement as global::nHydrate2.Dsl.FunctionParameter;
			if (sourceFunctionParameter2 != null)
			{
				// Create link for path FunctionHasParameters.Parameters
				this.Parameters.Add(sourceFunctionParameter2);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::nHydrate2.Dsl.FunctionField sourceFunctionField1 = sourceElement as global::nHydrate2.Dsl.FunctionField;
			if (sourceFunctionField1 != null)
			{
				// Delete link for path FunctionHasFields.Fields
				
				foreach (DslModeling::ElementLink link in global::nHydrate2.Dsl.FunctionHasFields.GetLinks((global::nHydrate2.Dsl.Function)this, sourceFunctionField1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::nHydrate2.Dsl.FunctionHasFields.FunctionDomainRoleId, global::nHydrate2.Dsl.FunctionHasFields.FunctionFieldDomainRoleId);
				}

				return;
			}
				
			global::nHydrate2.Dsl.FunctionParameter sourceFunctionParameter2 = sourceElement as global::nHydrate2.Dsl.FunctionParameter;
			if (sourceFunctionParameter2 != null)
			{
				// Delete link for path FunctionHasParameters.Parameters
				
				foreach (DslModeling::ElementLink link in global::nHydrate2.Dsl.FunctionHasParameters.GetLinks((global::nHydrate2.Dsl.Function)this, sourceFunctionParameter2))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::nHydrate2.Dsl.FunctionHasParameters.FunctionDomainRoleId, global::nHydrate2.Dsl.FunctionHasParameters.FunctionParameterDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
	/// <summary>
	/// DomainClass Function
	/// This is a custom database function
	/// </summary>
	[global::System.CLSCompliant(true)]
			
	public partial class Function : FunctionBase
	{
		#region Constructors
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Function(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Function(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace nHydrate2.Dsl
{
	/// <summary>
	/// Double-derived base class for DomainClass FunctionParameter
	/// </summary>
	[DslDesign::DisplayNameResource("nHydrate2.Dsl.FunctionParameter.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("nHydrate2.Dsl.FunctionParameter.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::nHydrate2.Dsl.nHydrate2DomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("9a7fee83-c2d8-40e7-888d-e6c3ab881cac")]
	public abstract partial class FunctionParameterBase : DslModeling::ModelElement, System.ComponentModel.INotifyPropertyChanged
	{
		#region INotifyPropertyChanged
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs e)
		{
			if (this.PropertyChanged != null)
				this.PropertyChanged(this, e);
		}
		#endregion
	
		#region Constructors, domain class Id
	
		/// <summary>
		/// FunctionParameter domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x9a7fee83, 0xc2d8, 0x40e7, 0x88, 0x8d, 0xe6, 0xc3, 0xab, 0x88, 0x1c, 0xac);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected FunctionParameterBase(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x838abb7a, 0x9ad6, 0x4495, 0x92, 0x2a, 0x3b, 0x36, 0x07, 0x93, 0x5f, 0xca);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Determines the name of this object
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.FunctionParameter/Name.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.FunctionParameter/Name.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.FunctionParameter/Name.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("838abb7a-9ad6-4495-922a-3b3607935fca")]
		public virtual global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the FunctionParameter.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<FunctionParameterBase, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the FunctionParameter.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the FunctionParameter.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(FunctionParameterBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.Name;
				//return element.GetValue<global::System.String>("Name", element.namePropertyStorage);
				//return element.namePropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(FunctionParameterBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("FunctionParameter"));
				}
			}
		}
		
		#endregion
		#region CodeFacade domain property code
		
		/// <summary>
		/// CodeFacade domain property Id.
		/// </summary>
		public static readonly global::System.Guid CodeFacadeDomainPropertyId = new global::System.Guid(0x97fe9195, 0x571f, 0x4696, 0xb5, 0x7f, 0xaa, 0xdd, 0x4e, 0x3e, 0x6e, 0xc1);
		
		/// <summary>
		/// Storage for CodeFacade
		/// </summary>
		private global::System.String codeFacadePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of CodeFacade domain property.
		/// Determines the object name used in the API. If this property is blank the 'Name'
		/// property is used in the API. This property can be used to mask the database
		/// identifier.
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.FunctionParameter/CodeFacade.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.FunctionParameter/CodeFacade.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.FunctionParameter/CodeFacade.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("97fe9195-571f-4696-b57f-aadd4e3e6ec1")]
		public virtual global::System.String CodeFacade
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return codeFacadePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				CodeFacadePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the FunctionParameter.CodeFacade domain property.
		/// </summary>
		internal sealed partial class CodeFacadePropertyHandler : DslModeling::DomainPropertyValueHandler<FunctionParameterBase, global::System.String>
		{
			private CodeFacadePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the FunctionParameter.CodeFacade domain property value handler.
			/// </summary>
			public static readonly CodeFacadePropertyHandler Instance = new CodeFacadePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the FunctionParameter.CodeFacade domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return CodeFacadeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(FunctionParameterBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.CodeFacade;
				//return element.GetValue<global::System.String>("CodeFacade", element.codeFacadePropertyStorage);
				//return element.codeFacadePropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(FunctionParameterBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.codeFacadePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("FunctionParameter"));
				}
			}
		}
		
		#endregion
		#region Nullable domain property code
		
		/// <summary>
		/// Nullable domain property Id.
		/// </summary>
		public static readonly global::System.Guid NullableDomainPropertyId = new global::System.Guid(0x58bdfc74, 0xb1d2, 0x4198, 0x85, 0x06, 0x52, 0xf8, 0x9f, 0xbd, 0x0b, 0xf5);
		
		/// <summary>
		/// Storage for Nullable
		/// </summary>
		private global::System.Boolean nullablePropertyStorage = true;
		
		/// <summary>
		/// Gets or sets the value of Nullable domain property.
		/// Determines if this item allows null values
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.FunctionParameter/Nullable.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.FunctionParameter/Nullable.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.FunctionParameter/Nullable.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(true)]
		[DslModeling::DomainObjectId("58bdfc74-b1d2-4198-8506-52f89fbd0bf5")]
		public virtual global::System.Boolean Nullable
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return nullablePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NullablePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the FunctionParameter.Nullable domain property.
		/// </summary>
		internal sealed partial class NullablePropertyHandler : DslModeling::DomainPropertyValueHandler<FunctionParameterBase, global::System.Boolean>
		{
			private NullablePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the FunctionParameter.Nullable domain property value handler.
			/// </summary>
			public static readonly NullablePropertyHandler Instance = new NullablePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the FunctionParameter.Nullable domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NullableDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(FunctionParameterBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.Nullable;
				//return element.GetValue<global::System.Boolean>("Nullable", element.nullablePropertyStorage);
				//return element.nullablePropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(FunctionParameterBase element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.nullablePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("FunctionParameter"));
				}
			}
		}
		
		#endregion
		#region DataType domain property code
		
		/// <summary>
		/// DataType domain property Id.
		/// </summary>
		public static readonly global::System.Guid DataTypeDomainPropertyId = new global::System.Guid(0xe782b645, 0x1554, 0x4dfa, 0xb0, 0x17, 0x53, 0xa9, 0xc5, 0xb8, 0xe7, 0x79);
		
		/// <summary>
		/// Storage for DataType
		/// </summary>
		private DataTypeConstants dataTypePropertyStorage = DataTypeConstants.VarChar;
		
		/// <summary>
		/// Gets or sets the value of DataType domain property.
		/// Determines the data type of this field
		/// </summary>
		[System.ComponentModel.TypeConverter(typeof(nHydrate2.Dsl.Design.Converters.DatatypeConverter))]
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.FunctionParameter/DataType.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.FunctionParameter/DataType.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.FunctionParameter/DataType.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(DataTypeConstants.VarChar)]
		[DslModeling::DomainObjectId("e782b645-1554-4dfa-b017-53a9c5b8e779")]
		public virtual DataTypeConstants DataType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return dataTypePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DataTypePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the FunctionParameter.DataType domain property.
		/// </summary>
		internal sealed partial class DataTypePropertyHandler : DslModeling::DomainPropertyValueHandler<FunctionParameterBase, DataTypeConstants>
		{
			private DataTypePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the FunctionParameter.DataType domain property value handler.
			/// </summary>
			public static readonly DataTypePropertyHandler Instance = new DataTypePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the FunctionParameter.DataType domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DataTypeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed DataTypeConstants GetValue(FunctionParameterBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.DataType;
				//return element.GetValue<DataTypeConstants>("DataType", element.dataTypePropertyStorage);
				//return element.dataTypePropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(FunctionParameterBase element, DataTypeConstants newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				DataTypeConstants oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.dataTypePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("FunctionParameter"));
				}
			}
		}
		
		#endregion
		#region Summary domain property code
		
		/// <summary>
		/// Summary domain property Id.
		/// </summary>
		public static readonly global::System.Guid SummaryDomainPropertyId = new global::System.Guid(0xb9f6c911, 0xacf1, 0x4fa6, 0x94, 0x65, 0x06, 0x26, 0xf6, 0x6e, 0x34, 0xce);
		
		/// <summary>
		/// Storage for Summary
		/// </summary>
		private global::System.String summaryPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Summary domain property.
		/// Determines the summary of this object
		/// </summary>
		[System.ComponentModel.Editor(typeof(System.ComponentModel.Design.MultilineStringEditor), typeof(System.Drawing.Design.UITypeEditor))]
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.FunctionParameter/Summary.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.FunctionParameter/Summary.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.FunctionParameter/Summary.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("b9f6c911-acf1-4fa6-9465-0626f66e34ce")]
		public virtual global::System.String Summary
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return summaryPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				SummaryPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the FunctionParameter.Summary domain property.
		/// </summary>
		internal sealed partial class SummaryPropertyHandler : DslModeling::DomainPropertyValueHandler<FunctionParameterBase, global::System.String>
		{
			private SummaryPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the FunctionParameter.Summary domain property value handler.
			/// </summary>
			public static readonly SummaryPropertyHandler Instance = new SummaryPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the FunctionParameter.Summary domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return SummaryDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(FunctionParameterBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.Summary;
				//return element.GetValue<global::System.String>("Summary", element.summaryPropertyStorage);
				//return element.summaryPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(FunctionParameterBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.summaryPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("FunctionParameter"));
				}
			}
		}
		
		#endregion
		#region Default domain property code
		
		/// <summary>
		/// Default domain property Id.
		/// </summary>
		public static readonly global::System.Guid DefaultDomainPropertyId = new global::System.Guid(0xc665e236, 0xd7bd, 0x455c, 0x95, 0xbd, 0x1e, 0x96, 0x2f, 0xfa, 0x86, 0xe0);
		
		/// <summary>
		/// Storage for Default
		/// </summary>
		private global::System.String defaultPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Default domain property.
		/// Determines the default value of this object
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.FunctionParameter/Default.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.FunctionParameter/Default.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.FunctionParameter/Default.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("c665e236-d7bd-455c-95bd-1e962ffa86e0")]
		public virtual global::System.String Default
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return defaultPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DefaultPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the FunctionParameter.Default domain property.
		/// </summary>
		internal sealed partial class DefaultPropertyHandler : DslModeling::DomainPropertyValueHandler<FunctionParameterBase, global::System.String>
		{
			private DefaultPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the FunctionParameter.Default domain property value handler.
			/// </summary>
			public static readonly DefaultPropertyHandler Instance = new DefaultPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the FunctionParameter.Default domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DefaultDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(FunctionParameterBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.Default;
				//return element.GetValue<global::System.String>("Default", element.defaultPropertyStorage);
				//return element.defaultPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(FunctionParameterBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.defaultPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("FunctionParameter"));
				}
			}
		}
		
		#endregion
		#region IsGenerated domain property code
		
		/// <summary>
		/// IsGenerated domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsGeneratedDomainPropertyId = new global::System.Guid(0x419b6652, 0xe6b5, 0x4b2a, 0x86, 0xb0, 0xf0, 0x4d, 0x3f, 0x48, 0xde, 0xb5);
		
		/// <summary>
		/// Storage for IsGenerated
		/// </summary>
		private global::System.Boolean isGeneratedPropertyStorage = true;
		
		/// <summary>
		/// Gets or sets the value of IsGenerated domain property.
		/// Determines if this item is used when generating
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.FunctionParameter/IsGenerated.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.FunctionParameter/IsGenerated.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.FunctionParameter/IsGenerated.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(true)]
		[DslModeling::DomainObjectId("419b6652-e6b5-4b2a-86b0-f04d3f48deb5")]
		public virtual global::System.Boolean IsGenerated
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isGeneratedPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsGeneratedPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the FunctionParameter.IsGenerated domain property.
		/// </summary>
		internal sealed partial class IsGeneratedPropertyHandler : DslModeling::DomainPropertyValueHandler<FunctionParameterBase, global::System.Boolean>
		{
			private IsGeneratedPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the FunctionParameter.IsGenerated domain property value handler.
			/// </summary>
			public static readonly IsGeneratedPropertyHandler Instance = new IsGeneratedPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the FunctionParameter.IsGenerated domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsGeneratedDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(FunctionParameterBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.IsGenerated;
				//return element.GetValue<global::System.Boolean>("IsGenerated", element.isGeneratedPropertyStorage);
				//return element.isGeneratedPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(FunctionParameterBase element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isGeneratedPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("FunctionParameter"));
				}
			}
		}
		
		#endregion
		#region Length domain property code
		
		/// <summary>
		/// Length domain property Id.
		/// </summary>
		public static readonly global::System.Guid LengthDomainPropertyId = new global::System.Guid(0x0c316064, 0x28a7, 0x440f, 0xa8, 0x8a, 0x3c, 0x6a, 0x94, 0x04, 0x5d, 0xec);
		
		/// <summary>
		/// Storage for Length
		/// </summary>
		private global::System.Int32 lengthPropertyStorage = 50;
		
		/// <summary>
		/// Gets or sets the value of Length domain property.
		/// Determines the size of this field in bytes
		/// </summary>
		[System.ComponentModel.TypeConverter(typeof(nHydrate2.Dsl.Design.Converters.TextLengthConverter))]
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.FunctionParameter/Length.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.FunctionParameter/Length.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.FunctionParameter/Length.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(50)]
		[DslModeling::DomainObjectId("0c316064-28a7-440f-a88a-3c6a94045dec")]
		public virtual global::System.Int32 Length
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return lengthPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				LengthPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the FunctionParameter.Length domain property.
		/// </summary>
		internal sealed partial class LengthPropertyHandler : DslModeling::DomainPropertyValueHandler<FunctionParameterBase, global::System.Int32>
		{
			private LengthPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the FunctionParameter.Length domain property value handler.
			/// </summary>
			public static readonly LengthPropertyHandler Instance = new LengthPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the FunctionParameter.Length domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return LengthDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Int32 GetValue(FunctionParameterBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.Length;
				//return element.GetValue<global::System.Int32>("Length", element.lengthPropertyStorage);
				//return element.lengthPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(FunctionParameterBase element, global::System.Int32 newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Int32 oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.lengthPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("FunctionParameter"));
				}
			}
		}
		
		#endregion
		#region Scale domain property code
		
		/// <summary>
		/// Scale domain property Id.
		/// </summary>
		public static readonly global::System.Guid ScaleDomainPropertyId = new global::System.Guid(0xe0c55ca8, 0xd557, 0x4f05, 0xb6, 0x68, 0x5e, 0x6e, 0x96, 0x74, 0x89, 0x34);
		
		/// <summary>
		/// Storage for Scale
		/// </summary>
		private global::System.Int32 scalePropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of Scale domain property.
		/// Determines the scale of some data types
		/// </summary>
		[System.ComponentModel.TypeConverter(typeof(nHydrate2.Dsl.Design.Converters.TextDecimalScaleConverter))]
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.FunctionParameter/Scale.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.FunctionParameter/Scale.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.FunctionParameter/Scale.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("e0c55ca8-d557-4f05-b668-5e6e96748934")]
		public virtual global::System.Int32 Scale
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return scalePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ScalePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the FunctionParameter.Scale domain property.
		/// </summary>
		internal sealed partial class ScalePropertyHandler : DslModeling::DomainPropertyValueHandler<FunctionParameterBase, global::System.Int32>
		{
			private ScalePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the FunctionParameter.Scale domain property value handler.
			/// </summary>
			public static readonly ScalePropertyHandler Instance = new ScalePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the FunctionParameter.Scale domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ScaleDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Int32 GetValue(FunctionParameterBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.Scale;
				//return element.GetValue<global::System.Int32>("Scale", element.scalePropertyStorage);
				//return element.scalePropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(FunctionParameterBase element, global::System.Int32 newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Int32 oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.scalePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("FunctionParameter"));
				}
			}
		}
		
		#endregion
		#region SortOrder domain property code
		
		/// <summary>
		/// SortOrder domain property Id.
		/// </summary>
		public static readonly global::System.Guid SortOrderDomainPropertyId = new global::System.Guid(0x22e6cd02, 0x4cf1, 0x4f1a, 0x93, 0x16, 0x99, 0x4f, 0x96, 0xa0, 0xa0, 0xe6);
		
		/// <summary>
		/// Storage for SortOrder
		/// </summary>
		private global::System.Int32 sortOrderPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of SortOrder domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.FunctionParameter/SortOrder.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.FunctionParameter/SortOrder.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("22e6cd02-4cf1-4f1a-9316-994f96a0a0e6")]
		public virtual global::System.Int32 SortOrder
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return sortOrderPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				SortOrderPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the FunctionParameter.SortOrder domain property.
		/// </summary>
		internal sealed partial class SortOrderPropertyHandler : DslModeling::DomainPropertyValueHandler<FunctionParameterBase, global::System.Int32>
		{
			private SortOrderPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the FunctionParameter.SortOrder domain property value handler.
			/// </summary>
			public static readonly SortOrderPropertyHandler Instance = new SortOrderPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the FunctionParameter.SortOrder domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return SortOrderDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Int32 GetValue(FunctionParameterBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.SortOrder;
				//return element.GetValue<global::System.Int32>("SortOrder", element.sortOrderPropertyStorage);
				//return element.sortOrderPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(FunctionParameterBase element, global::System.Int32 newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Int32 oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.sortOrderPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("FunctionParameter"));
				}
			}
		}
		
		#endregion
		#region Function opposite domain role accessor
		/// <summary>
		/// Gets or sets Function.
		/// </summary>
		public virtual Function Function
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::nHydrate2.Dsl.FunctionHasParameters.FunctionParameterDomainRoleId) as Function;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::nHydrate2.Dsl.FunctionHasParameters.FunctionParameterDomainRoleId, value);
			}
		}
		#endregion
	}
	/// <summary>
	/// DomainClass FunctionParameter
	/// </summary>
	[global::System.CLSCompliant(true)]
			
	public partial class FunctionParameter : FunctionParameterBase
	{
		#region Constructors
		// Constructors were not generated for this class because it had HasCustomConstructor
		// set to true. Please provide the constructors below in a partial class.
		///// <summary>
		///// Constructor
		///// </summary>
		///// <param name="store">Store where new element is to be created.</param>
		///// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		//public FunctionParameter(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
		//	: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		//{
		//}
		//
		///// <summary>
		///// Constructor
		///// </summary>
		///// <param name="partition">Partition where new element is to be created.</param>
		///// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		//public FunctionParameter(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
		//	: base(partition, propertyAssignments)
		//{
		//}
		#endregion
	}
}
namespace nHydrate2.Dsl
{
	/// <summary>
	/// Double-derived base class for DomainClass FunctionField
	/// </summary>
	[DslDesign::DisplayNameResource("nHydrate2.Dsl.FunctionField.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("nHydrate2.Dsl.FunctionField.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::nHydrate2.Dsl.nHydrate2DomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("e203d7e8-2878-48e6-99e9-7c8a1daf0a53")]
	public abstract partial class FunctionFieldBase : DslModeling::ModelElement, System.ComponentModel.INotifyPropertyChanged
	{
		#region INotifyPropertyChanged
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs e)
		{
			if (this.PropertyChanged != null)
				this.PropertyChanged(this, e);
		}
		#endregion
	
		#region Constructors, domain class Id
	
		/// <summary>
		/// FunctionField domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xe203d7e8, 0x2878, 0x48e6, 0x99, 0xe9, 0x7c, 0x8a, 0x1d, 0xaf, 0x0a, 0x53);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected FunctionFieldBase(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x159b2e68, 0x0fad, 0x402b, 0xa8, 0x09, 0x9d, 0xb5, 0x45, 0x93, 0x22, 0x01);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Determines the name of this object
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.FunctionField/Name.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.FunctionField/Name.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.FunctionField/Name.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("159b2e68-0fad-402b-a809-9db545932201")]
		public virtual global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the FunctionField.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<FunctionFieldBase, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the FunctionField.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the FunctionField.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(FunctionFieldBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.Name;
				//return element.GetValue<global::System.String>("Name", element.namePropertyStorage);
				//return element.namePropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(FunctionFieldBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("FunctionField"));
				}
			}
		}
		
		#endregion
		#region FriendlyName domain property code
		
		/// <summary>
		/// FriendlyName domain property Id.
		/// </summary>
		public static readonly global::System.Guid FriendlyNameDomainPropertyId = new global::System.Guid(0x8c20325a, 0xdef5, 0x4428, 0x86, 0x57, 0x93, 0x8f, 0x03, 0x75, 0x62, 0x51);
		
		/// <summary>
		/// Storage for FriendlyName
		/// </summary>
		private global::System.String friendlyNamePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of FriendlyName domain property.
		/// Determines a friend name to display to users
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.FunctionField/FriendlyName.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.FunctionField/FriendlyName.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.FunctionField/FriendlyName.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("8c20325a-def5-4428-8657-938f03756251")]
		public virtual global::System.String FriendlyName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return friendlyNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				FriendlyNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the FunctionField.FriendlyName domain property.
		/// </summary>
		internal sealed partial class FriendlyNamePropertyHandler : DslModeling::DomainPropertyValueHandler<FunctionFieldBase, global::System.String>
		{
			private FriendlyNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the FunctionField.FriendlyName domain property value handler.
			/// </summary>
			public static readonly FriendlyNamePropertyHandler Instance = new FriendlyNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the FunctionField.FriendlyName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return FriendlyNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(FunctionFieldBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.FriendlyName;
				//return element.GetValue<global::System.String>("FriendlyName", element.friendlyNamePropertyStorage);
				//return element.friendlyNamePropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(FunctionFieldBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.friendlyNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("FunctionField"));
				}
			}
		}
		
		#endregion
		#region CodeFacade domain property code
		
		/// <summary>
		/// CodeFacade domain property Id.
		/// </summary>
		public static readonly global::System.Guid CodeFacadeDomainPropertyId = new global::System.Guid(0x68ff06a6, 0x34a5, 0x4176, 0xae, 0x43, 0xa9, 0x79, 0x87, 0xc2, 0x7e, 0x85);
		
		/// <summary>
		/// Storage for CodeFacade
		/// </summary>
		private global::System.String codeFacadePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of CodeFacade domain property.
		/// Determines the object name used in the API. If this property is blank the 'Name'
		/// property is used in the API. This property can be used to mask the database
		/// identifier.
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.FunctionField/CodeFacade.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.FunctionField/CodeFacade.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.FunctionField/CodeFacade.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("68ff06a6-34a5-4176-ae43-a97987c27e85")]
		public virtual global::System.String CodeFacade
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return codeFacadePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				CodeFacadePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the FunctionField.CodeFacade domain property.
		/// </summary>
		internal sealed partial class CodeFacadePropertyHandler : DslModeling::DomainPropertyValueHandler<FunctionFieldBase, global::System.String>
		{
			private CodeFacadePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the FunctionField.CodeFacade domain property value handler.
			/// </summary>
			public static readonly CodeFacadePropertyHandler Instance = new CodeFacadePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the FunctionField.CodeFacade domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return CodeFacadeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(FunctionFieldBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.CodeFacade;
				//return element.GetValue<global::System.String>("CodeFacade", element.codeFacadePropertyStorage);
				//return element.codeFacadePropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(FunctionFieldBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.codeFacadePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("FunctionField"));
				}
			}
		}
		
		#endregion
		#region Nullable domain property code
		
		/// <summary>
		/// Nullable domain property Id.
		/// </summary>
		public static readonly global::System.Guid NullableDomainPropertyId = new global::System.Guid(0x6ee17bf0, 0x1da2, 0x47da, 0x9b, 0x5f, 0xd7, 0x24, 0xda, 0x45, 0x18, 0xe1);
		
		/// <summary>
		/// Storage for Nullable
		/// </summary>
		private global::System.Boolean nullablePropertyStorage = true;
		
		/// <summary>
		/// Gets or sets the value of Nullable domain property.
		/// Determines if this item allows null values
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.FunctionField/Nullable.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.FunctionField/Nullable.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.FunctionField/Nullable.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(true)]
		[DslModeling::DomainObjectId("6ee17bf0-1da2-47da-9b5f-d724da4518e1")]
		public virtual global::System.Boolean Nullable
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return nullablePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NullablePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the FunctionField.Nullable domain property.
		/// </summary>
		internal sealed partial class NullablePropertyHandler : DslModeling::DomainPropertyValueHandler<FunctionFieldBase, global::System.Boolean>
		{
			private NullablePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the FunctionField.Nullable domain property value handler.
			/// </summary>
			public static readonly NullablePropertyHandler Instance = new NullablePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the FunctionField.Nullable domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NullableDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(FunctionFieldBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.Nullable;
				//return element.GetValue<global::System.Boolean>("Nullable", element.nullablePropertyStorage);
				//return element.nullablePropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(FunctionFieldBase element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.nullablePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("FunctionField"));
				}
			}
		}
		
		#endregion
		#region DataType domain property code
		
		/// <summary>
		/// DataType domain property Id.
		/// </summary>
		public static readonly global::System.Guid DataTypeDomainPropertyId = new global::System.Guid(0xb51f07bd, 0x34b2, 0x4d6d, 0xa1, 0x2a, 0x09, 0xf5, 0x1a, 0x0d, 0x00, 0xe8);
		
		/// <summary>
		/// Storage for DataType
		/// </summary>
		private DataTypeConstants dataTypePropertyStorage = DataTypeConstants.VarChar;
		
		/// <summary>
		/// Gets or sets the value of DataType domain property.
		/// Determines the data type of this field
		/// </summary>
		[System.ComponentModel.TypeConverter(typeof(nHydrate2.Dsl.Design.Converters.DatatypeConverter))]
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.FunctionField/DataType.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.FunctionField/DataType.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.FunctionField/DataType.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(DataTypeConstants.VarChar)]
		[DslModeling::DomainObjectId("b51f07bd-34b2-4d6d-a12a-09f51a0d00e8")]
		public virtual DataTypeConstants DataType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return dataTypePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DataTypePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the FunctionField.DataType domain property.
		/// </summary>
		internal sealed partial class DataTypePropertyHandler : DslModeling::DomainPropertyValueHandler<FunctionFieldBase, DataTypeConstants>
		{
			private DataTypePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the FunctionField.DataType domain property value handler.
			/// </summary>
			public static readonly DataTypePropertyHandler Instance = new DataTypePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the FunctionField.DataType domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DataTypeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed DataTypeConstants GetValue(FunctionFieldBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.DataType;
				//return element.GetValue<DataTypeConstants>("DataType", element.dataTypePropertyStorage);
				//return element.dataTypePropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(FunctionFieldBase element, DataTypeConstants newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				DataTypeConstants oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.dataTypePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("FunctionField"));
				}
			}
		}
		
		#endregion
		#region Summary domain property code
		
		/// <summary>
		/// Summary domain property Id.
		/// </summary>
		public static readonly global::System.Guid SummaryDomainPropertyId = new global::System.Guid(0xbe737e4a, 0xec07, 0x4834, 0x93, 0xd3, 0xd8, 0xa6, 0xe0, 0x0c, 0x38, 0x1f);
		
		/// <summary>
		/// Storage for Summary
		/// </summary>
		private global::System.String summaryPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Summary domain property.
		/// Determines the summary of this object
		/// </summary>
		[System.ComponentModel.Editor(typeof(System.ComponentModel.Design.MultilineStringEditor), typeof(System.Drawing.Design.UITypeEditor))]
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.FunctionField/Summary.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.FunctionField/Summary.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.FunctionField/Summary.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("be737e4a-ec07-4834-93d3-d8a6e00c381f")]
		public virtual global::System.String Summary
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return summaryPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				SummaryPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the FunctionField.Summary domain property.
		/// </summary>
		internal sealed partial class SummaryPropertyHandler : DslModeling::DomainPropertyValueHandler<FunctionFieldBase, global::System.String>
		{
			private SummaryPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the FunctionField.Summary domain property value handler.
			/// </summary>
			public static readonly SummaryPropertyHandler Instance = new SummaryPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the FunctionField.Summary domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return SummaryDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(FunctionFieldBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.Summary;
				//return element.GetValue<global::System.String>("Summary", element.summaryPropertyStorage);
				//return element.summaryPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(FunctionFieldBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.summaryPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("FunctionField"));
				}
			}
		}
		
		#endregion
		#region Default domain property code
		
		/// <summary>
		/// Default domain property Id.
		/// </summary>
		public static readonly global::System.Guid DefaultDomainPropertyId = new global::System.Guid(0x4fe9787e, 0x6a50, 0x4060, 0x83, 0x27, 0x93, 0xdc, 0xe4, 0x45, 0x96, 0x89);
		
		/// <summary>
		/// Storage for Default
		/// </summary>
		private global::System.String defaultPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Default domain property.
		/// Determines the default value of this object
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.FunctionField/Default.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.FunctionField/Default.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.FunctionField/Default.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("4fe9787e-6a50-4060-8327-93dce4459689")]
		public virtual global::System.String Default
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return defaultPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DefaultPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the FunctionField.Default domain property.
		/// </summary>
		internal sealed partial class DefaultPropertyHandler : DslModeling::DomainPropertyValueHandler<FunctionFieldBase, global::System.String>
		{
			private DefaultPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the FunctionField.Default domain property value handler.
			/// </summary>
			public static readonly DefaultPropertyHandler Instance = new DefaultPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the FunctionField.Default domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DefaultDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(FunctionFieldBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.Default;
				//return element.GetValue<global::System.String>("Default", element.defaultPropertyStorage);
				//return element.defaultPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(FunctionFieldBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.defaultPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("FunctionField"));
				}
			}
		}
		
		#endregion
		#region IsGenerated domain property code
		
		/// <summary>
		/// IsGenerated domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsGeneratedDomainPropertyId = new global::System.Guid(0x767a56f3, 0x75d1, 0x4c8e, 0xa7, 0x67, 0xa3, 0x98, 0x64, 0x1a, 0x0d, 0x8d);
		
		/// <summary>
		/// Storage for IsGenerated
		/// </summary>
		private global::System.Boolean isGeneratedPropertyStorage = true;
		
		/// <summary>
		/// Gets or sets the value of IsGenerated domain property.
		/// Determines if this item is used when generating
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.FunctionField/IsGenerated.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.FunctionField/IsGenerated.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.FunctionField/IsGenerated.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(true)]
		[DslModeling::DomainObjectId("767a56f3-75d1-4c8e-a767-a398641a0d8d")]
		public virtual global::System.Boolean IsGenerated
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isGeneratedPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsGeneratedPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the FunctionField.IsGenerated domain property.
		/// </summary>
		internal sealed partial class IsGeneratedPropertyHandler : DslModeling::DomainPropertyValueHandler<FunctionFieldBase, global::System.Boolean>
		{
			private IsGeneratedPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the FunctionField.IsGenerated domain property value handler.
			/// </summary>
			public static readonly IsGeneratedPropertyHandler Instance = new IsGeneratedPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the FunctionField.IsGenerated domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsGeneratedDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(FunctionFieldBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.IsGenerated;
				//return element.GetValue<global::System.Boolean>("IsGenerated", element.isGeneratedPropertyStorage);
				//return element.isGeneratedPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(FunctionFieldBase element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isGeneratedPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("FunctionField"));
				}
			}
		}
		
		#endregion
		#region Length domain property code
		
		/// <summary>
		/// Length domain property Id.
		/// </summary>
		public static readonly global::System.Guid LengthDomainPropertyId = new global::System.Guid(0x9b154c3b, 0x1f7a, 0x4d59, 0x89, 0x12, 0xe1, 0x71, 0xef, 0xb9, 0xa6, 0xe7);
		
		/// <summary>
		/// Storage for Length
		/// </summary>
		private global::System.Int32 lengthPropertyStorage = 50;
		
		/// <summary>
		/// Gets or sets the value of Length domain property.
		/// Determines the size of this field in bytes
		/// </summary>
		[System.ComponentModel.TypeConverter(typeof(nHydrate2.Dsl.Design.Converters.TextLengthConverter))]
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.FunctionField/Length.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.FunctionField/Length.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.FunctionField/Length.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(50)]
		[DslModeling::DomainObjectId("9b154c3b-1f7a-4d59-8912-e171efb9a6e7")]
		public virtual global::System.Int32 Length
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return lengthPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				LengthPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the FunctionField.Length domain property.
		/// </summary>
		internal sealed partial class LengthPropertyHandler : DslModeling::DomainPropertyValueHandler<FunctionFieldBase, global::System.Int32>
		{
			private LengthPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the FunctionField.Length domain property value handler.
			/// </summary>
			public static readonly LengthPropertyHandler Instance = new LengthPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the FunctionField.Length domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return LengthDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Int32 GetValue(FunctionFieldBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.Length;
				//return element.GetValue<global::System.Int32>("Length", element.lengthPropertyStorage);
				//return element.lengthPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(FunctionFieldBase element, global::System.Int32 newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Int32 oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.lengthPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("FunctionField"));
				}
			}
		}
		
		#endregion
		#region Scale domain property code
		
		/// <summary>
		/// Scale domain property Id.
		/// </summary>
		public static readonly global::System.Guid ScaleDomainPropertyId = new global::System.Guid(0xb06117d3, 0x7bab, 0x4b1a, 0xbe, 0xdc, 0xc7, 0x62, 0x0f, 0xb0, 0x43, 0xef);
		
		/// <summary>
		/// Storage for Scale
		/// </summary>
		private global::System.Int32 scalePropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of Scale domain property.
		/// Determines the scale of some data types
		/// </summary>
		[System.ComponentModel.TypeConverter(typeof(nHydrate2.Dsl.Design.Converters.TextDecimalScaleConverter))]
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.FunctionField/Scale.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.FunctionField/Scale.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.FunctionField/Scale.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("b06117d3-7bab-4b1a-bedc-c7620fb043ef")]
		public virtual global::System.Int32 Scale
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return scalePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ScalePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the FunctionField.Scale domain property.
		/// </summary>
		internal sealed partial class ScalePropertyHandler : DslModeling::DomainPropertyValueHandler<FunctionFieldBase, global::System.Int32>
		{
			private ScalePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the FunctionField.Scale domain property value handler.
			/// </summary>
			public static readonly ScalePropertyHandler Instance = new ScalePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the FunctionField.Scale domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ScaleDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Int32 GetValue(FunctionFieldBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.Scale;
				//return element.GetValue<global::System.Int32>("Scale", element.scalePropertyStorage);
				//return element.scalePropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(FunctionFieldBase element, global::System.Int32 newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Int32 oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.scalePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("FunctionField"));
				}
			}
		}
		
		#endregion
		#region Function opposite domain role accessor
		/// <summary>
		/// Gets or sets Function.
		/// </summary>
		public virtual Function Function
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::nHydrate2.Dsl.FunctionHasFields.FunctionFieldDomainRoleId) as Function;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::nHydrate2.Dsl.FunctionHasFields.FunctionFieldDomainRoleId, value);
			}
		}
		#endregion
	}
	/// <summary>
	/// DomainClass FunctionField
	/// </summary>
	[global::System.CLSCompliant(true)]
			
	public partial class FunctionField : FunctionFieldBase
	{
		#region Constructors
		// Constructors were not generated for this class because it had HasCustomConstructor
		// set to true. Please provide the constructors below in a partial class.
		///// <summary>
		///// Constructor
		///// </summary>
		///// <param name="store">Store where new element is to be created.</param>
		///// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		//public FunctionField(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
		//	: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		//{
		//}
		//
		///// <summary>
		///// Constructor
		///// </summary>
		///// <param name="partition">Partition where new element is to be created.</param>
		///// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		//public FunctionField(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
		//	: base(partition, propertyAssignments)
		//{
		//}
		#endregion
	}
}
namespace nHydrate2.Dsl
{
	/// <summary>
	/// Double-derived base class for DomainClass Module
	/// </summary>
	[DslDesign::DisplayNameResource("nHydrate2.Dsl.Module.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("nHydrate2.Dsl.Module.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::nHydrate2.Dsl.nHydrate2DomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("f687b04b-616b-4974-8352-711274c9c4f2")]
	public abstract partial class ModuleBase : DslModeling::ModelElement, System.ComponentModel.INotifyPropertyChanged
	{
		#region INotifyPropertyChanged
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs e)
		{
			if (this.PropertyChanged != null)
				this.PropertyChanged(this, e);
		}
		#endregion
	
		#region Constructors, domain class Id
	
		/// <summary>
		/// Module domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xf687b04b, 0x616b, 0x4974, 0x83, 0x52, 0x71, 0x12, 0x74, 0xc9, 0xc4, 0xf2);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected ModuleBase(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0xf2770b4c, 0xa625, 0x40ac, 0x8e, 0x12, 0x55, 0xb7, 0x91, 0x89, 0xdb, 0x0d);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Determines the name of this object
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.Module/Name.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.Module/Name.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.Module/Name.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("f2770b4c-a625-40ac-8e12-55b79189db0d")]
		public virtual global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Module.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<ModuleBase, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Module.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Module.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ModuleBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.Name;
				//return element.GetValue<global::System.String>("Name", element.namePropertyStorage);
				//return element.namePropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModuleBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Module"));
				}
			}
		}
		
		#endregion
		#region Summary domain property code
		
		/// <summary>
		/// Summary domain property Id.
		/// </summary>
		public static readonly global::System.Guid SummaryDomainPropertyId = new global::System.Guid(0xba753fd5, 0x2278, 0x453f, 0xb9, 0x7a, 0x56, 0x7b, 0x28, 0xbf, 0x37, 0x33);
		
		/// <summary>
		/// Storage for Summary
		/// </summary>
		private global::System.String summaryPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Summary domain property.
		/// Determines summary text were applicable
		/// </summary>
		[System.ComponentModel.Editor(typeof(System.ComponentModel.Design.MultilineStringEditor), typeof(System.Drawing.Design.UITypeEditor))]
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.Module/Summary.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.Module/Summary.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.Module/Summary.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("ba753fd5-2278-453f-b97a-567b28bf3733")]
		public virtual global::System.String Summary
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return summaryPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				SummaryPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Module.Summary domain property.
		/// </summary>
		internal sealed partial class SummaryPropertyHandler : DslModeling::DomainPropertyValueHandler<ModuleBase, global::System.String>
		{
			private SummaryPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Module.Summary domain property value handler.
			/// </summary>
			public static readonly SummaryPropertyHandler Instance = new SummaryPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Module.Summary domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return SummaryDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ModuleBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.Summary;
				//return element.GetValue<global::System.String>("Summary", element.summaryPropertyStorage);
				//return element.summaryPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModuleBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.summaryPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Module"));
				}
			}
		}
		
		#endregion
		#region nHydrateModel opposite domain role accessor
		/// <summary>
		/// Gets or sets nHydrateModel.
		/// </summary>
		public virtual nHydrateModel nHydrateModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::nHydrate2.Dsl.nHydrateModelHasModules.ModuleDomainRoleId) as nHydrateModel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::nHydrate2.Dsl.nHydrateModelHasModules.ModuleDomainRoleId, value);
			}
		}
		#endregion
		#region Functions opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Functions.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Function> Functions
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Function>, Function>(global::nHydrate2.Dsl.FunctionReferencesModules.ModuleDomainRoleId);
			}
		}
		#endregion
		#region Views opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Views.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<View> Views
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<View>, View>(global::nHydrate2.Dsl.ViewReferencesModules.ModuleDomainRoleId);
			}
		}
		#endregion
		#region StoredProcedures opposite domain role accessor
		
		/// <summary>
		/// Gets a list of StoredProcedures.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<StoredProcedure> StoredProcedures
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<StoredProcedure>, StoredProcedure>(global::nHydrate2.Dsl.StoredProcedureReferencesModules.ModuleDomainRoleId);
			}
		}
		#endregion
		#region Entities opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Entities.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Entity> Entities
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Entity>, Entity>(global::nHydrate2.Dsl.EntityReferencesModules.ModuleDomainRoleId);
			}
		}
		#endregion
		#region Fields opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Fields.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Field> Fields
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Field>, Field>(global::nHydrate2.Dsl.FieldReferencesModules.ModuleDomainRoleId);
			}
		}
		#endregion
		#region ModuleRules opposite domain role accessor
		
		/// <summary>
		/// Gets a list of ModuleRules.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ModuleRule> ModuleRules
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ModuleRule>, ModuleRule>(global::nHydrate2.Dsl.ModuleHasModuleRules.ModuleDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::nHydrate2.Dsl.ModuleRule.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::nHydrate2.Dsl.ModuleRule sourceModuleRule1 = sourceElement as global::nHydrate2.Dsl.ModuleRule;
			if (sourceModuleRule1 != null)
			{
				// Create link for path ModuleHasModuleRules.ModuleRules
				this.ModuleRules.Add(sourceModuleRule1);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::nHydrate2.Dsl.ModuleRule sourceModuleRule1 = sourceElement as global::nHydrate2.Dsl.ModuleRule;
			if (sourceModuleRule1 != null)
			{
				// Delete link for path ModuleHasModuleRules.ModuleRules
				
				foreach (DslModeling::ElementLink link in global::nHydrate2.Dsl.ModuleHasModuleRules.GetLinks((global::nHydrate2.Dsl.Module)this, sourceModuleRule1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::nHydrate2.Dsl.ModuleHasModuleRules.ModuleDomainRoleId, global::nHydrate2.Dsl.ModuleHasModuleRules.ModuleRuleDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
	/// <summary>
	/// DomainClass Module
	/// </summary>
	[global::System.CLSCompliant(true)]
			
	public partial class Module : ModuleBase
	{
		#region Constructors
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Module(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Module(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace nHydrate2.Dsl
{
	/// <summary>
	/// DomainClass RelationModule
	/// </summary>
	[DslDesign::DisplayNameResource("nHydrate2.Dsl.RelationModule.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("nHydrate2.Dsl.RelationModule.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::nHydrate2.Dsl.nHydrate2DomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("07b9652b-9383-4cc4-b4c8-f2a54310cd11")]
	public partial class RelationModule : DslModeling::ModelElement, System.ComponentModel.INotifyPropertyChanged
	{
		#region INotifyPropertyChanged
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs e)
		{
			if (this.PropertyChanged != null)
				this.PropertyChanged(this, e);
		}
		#endregion
	
		#region Constructors, domain class Id
	
		/// <summary>
		/// RelationModule domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x07b9652b, 0x9383, 0x4cc4, 0xb4, 0xc8, 0xf2, 0xa5, 0x43, 0x10, 0xcd, 0x11);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public RelationModule(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public RelationModule(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region RelationID domain property code
		
		/// <summary>
		/// RelationID domain property Id.
		/// </summary>
		public static readonly global::System.Guid RelationIDDomainPropertyId = new global::System.Guid(0x2ffa9779, 0x00ca, 0x45f7, 0xbf, 0x42, 0x72, 0x11, 0x9e, 0x74, 0x39, 0x76);
		
		/// <summary>
		/// Storage for RelationID
		/// </summary>
		private global::System.Guid relationIDPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of RelationID domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.RelationModule/RelationID.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.RelationModule/RelationID.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("2ffa9779-00ca-45f7-bf42-72119e743976")]
		public virtual global::System.Guid RelationID
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return relationIDPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				RelationIDPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the RelationModule.RelationID domain property.
		/// </summary>
		internal sealed partial class RelationIDPropertyHandler : DslModeling::DomainPropertyValueHandler<RelationModule, global::System.Guid>
		{
			private RelationIDPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the RelationModule.RelationID domain property value handler.
			/// </summary>
			public static readonly RelationIDPropertyHandler Instance = new RelationIDPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the RelationModule.RelationID domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return RelationIDDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Guid GetValue(RelationModule element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.RelationID;
				//return element.GetValue<global::System.Guid>("RelationID", element.relationIDPropertyStorage);
				//return element.relationIDPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(RelationModule element, global::System.Guid newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Guid oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.relationIDPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("RelationModule"));
				}
			}
		}
		
		#endregion
		#region ModuleId domain property code
		
		/// <summary>
		/// ModuleId domain property Id.
		/// </summary>
		public static readonly global::System.Guid ModuleIdDomainPropertyId = new global::System.Guid(0x14e732fe, 0x8d5f, 0x48c0, 0xad, 0x33, 0x01, 0x08, 0xc3, 0xb2, 0xbf, 0xe9);
		
		/// <summary>
		/// Storage for ModuleId
		/// </summary>
		private global::System.Guid moduleIdPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of ModuleId domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.RelationModule/ModuleId.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.RelationModule/ModuleId.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("14e732fe-8d5f-48c0-ad33-0108c3b2bfe9")]
		public virtual global::System.Guid ModuleId
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return moduleIdPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ModuleIdPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the RelationModule.ModuleId domain property.
		/// </summary>
		internal sealed partial class ModuleIdPropertyHandler : DslModeling::DomainPropertyValueHandler<RelationModule, global::System.Guid>
		{
			private ModuleIdPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the RelationModule.ModuleId domain property value handler.
			/// </summary>
			public static readonly ModuleIdPropertyHandler Instance = new ModuleIdPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the RelationModule.ModuleId domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ModuleIdDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Guid GetValue(RelationModule element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.ModuleId;
				//return element.GetValue<global::System.Guid>("ModuleId", element.moduleIdPropertyStorage);
				//return element.moduleIdPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(RelationModule element, global::System.Guid newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Guid oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.moduleIdPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("RelationModule"));
				}
			}
		}
		
		#endregion
		#region Included domain property code
		
		/// <summary>
		/// Included domain property Id.
		/// </summary>
		public static readonly global::System.Guid IncludedDomainPropertyId = new global::System.Guid(0xab270741, 0x6ed5, 0x48af, 0xb8, 0x07, 0x34, 0x96, 0x65, 0xbd, 0x8e, 0x85);
		
		/// <summary>
		/// Storage for Included
		/// </summary>
		private global::System.Boolean includedPropertyStorage = true;
		
		/// <summary>
		/// Gets or sets the value of Included domain property.
		/// Determines if this relation is included in the module
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.RelationModule/Included.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.RelationModule/Included.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(true)]
		[DslModeling::DomainObjectId("ab270741-6ed5-48af-b807-349665bd8e85")]
		public virtual global::System.Boolean Included
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return includedPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IncludedPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the RelationModule.Included domain property.
		/// </summary>
		internal sealed partial class IncludedPropertyHandler : DslModeling::DomainPropertyValueHandler<RelationModule, global::System.Boolean>
		{
			private IncludedPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the RelationModule.Included domain property value handler.
			/// </summary>
			public static readonly IncludedPropertyHandler Instance = new IncludedPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the RelationModule.Included domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IncludedDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(RelationModule element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.Included;
				//return element.GetValue<global::System.Boolean>("Included", element.includedPropertyStorage);
				//return element.includedPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(RelationModule element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.includedPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("RelationModule"));
				}
			}
		}
		
		#endregion
		#region IsEnforced domain property code
		
		/// <summary>
		/// IsEnforced domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsEnforcedDomainPropertyId = new global::System.Guid(0x433141c2, 0x8f16, 0x43ab, 0xbb, 0x8c, 0x92, 0xb1, 0xea, 0x95, 0x4f, 0x92);
		
		/// <summary>
		/// Storage for IsEnforced
		/// </summary>
		private global::System.Boolean isEnforcedPropertyStorage = true;
		
		/// <summary>
		/// Gets or sets the value of IsEnforced domain property.
		/// Determines if this relation is enforced in the database
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.RelationModule/IsEnforced.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.RelationModule/IsEnforced.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(true)]
		[DslModeling::DomainObjectId("433141c2-8f16-43ab-bb8c-92b1ea954f92")]
		public virtual global::System.Boolean IsEnforced
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isEnforcedPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsEnforcedPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the RelationModule.IsEnforced domain property.
		/// </summary>
		internal sealed partial class IsEnforcedPropertyHandler : DslModeling::DomainPropertyValueHandler<RelationModule, global::System.Boolean>
		{
			private IsEnforcedPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the RelationModule.IsEnforced domain property value handler.
			/// </summary>
			public static readonly IsEnforcedPropertyHandler Instance = new IsEnforcedPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the RelationModule.IsEnforced domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsEnforcedDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(RelationModule element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.IsEnforced;
				//return element.GetValue<global::System.Boolean>("IsEnforced", element.isEnforcedPropertyStorage);
				//return element.isEnforcedPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(RelationModule element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isEnforcedPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("RelationModule"));
				}
			}
		}
		
		#endregion
		#region nHydrateModel opposite domain role accessor
		/// <summary>
		/// Gets or sets nHydrateModel.
		/// </summary>
		public virtual nHydrateModel nHydrateModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::nHydrate2.Dsl.nHydrateModelHasRelationModules.RelationModuleDomainRoleId) as nHydrateModel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::nHydrate2.Dsl.nHydrateModelHasRelationModules.RelationModuleDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace nHydrate2.Dsl
{
	/// <summary>
	/// DomainClass ModuleRule
	/// </summary>
	[DslDesign::DisplayNameResource("nHydrate2.Dsl.ModuleRule.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("nHydrate2.Dsl.ModuleRule.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::nHydrate2.Dsl.nHydrate2DomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("66829b88-3323-4787-ac26-5aafe4dea717")]
	public partial class ModuleRule : DslModeling::ModelElement, System.ComponentModel.INotifyPropertyChanged
	{
		#region INotifyPropertyChanged
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs e)
		{
			if (this.PropertyChanged != null)
				this.PropertyChanged(this, e);
		}
		#endregion
	
		#region Constructors, domain class Id
	
		/// <summary>
		/// ModuleRule domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x66829b88, 0x3323, 0x4787, 0xac, 0x26, 0x5a, 0xaf, 0xe4, 0xde, 0xa7, 0x17);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ModuleRule(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ModuleRule(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Status domain property code
		
		/// <summary>
		/// Status domain property Id.
		/// </summary>
		public static readonly global::System.Guid StatusDomainPropertyId = new global::System.Guid(0xb262ea94, 0x0839, 0x4fab, 0x92, 0x05, 0xae, 0x0c, 0xaa, 0xd1, 0xee, 0x07);
		
		/// <summary>
		/// Storage for Status
		/// </summary>
		private ModuleRuleStatusTypeConstants statusPropertyStorage = ModuleRuleStatusTypeConstants.Subset;
		
		/// <summary>
		/// Gets or sets the value of Status domain property.
		/// The grouping for this rule
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.ModuleRule/Status.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.ModuleRule/Status.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.ModuleRule/Status.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(ModuleRuleStatusTypeConstants.Subset)]
		[DslModeling::DomainObjectId("b262ea94-0839-4fab-9205-ae0caad1ee07")]
		public virtual ModuleRuleStatusTypeConstants Status
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return statusPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				StatusPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModuleRule.Status domain property.
		/// </summary>
		internal sealed partial class StatusPropertyHandler : DslModeling::DomainPropertyValueHandler<ModuleRule, ModuleRuleStatusTypeConstants>
		{
			private StatusPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModuleRule.Status domain property value handler.
			/// </summary>
			public static readonly StatusPropertyHandler Instance = new StatusPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModuleRule.Status domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return StatusDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed ModuleRuleStatusTypeConstants GetValue(ModuleRule element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.Status;
				//return element.GetValue<ModuleRuleStatusTypeConstants>("Status", element.statusPropertyStorage);
				//return element.statusPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModuleRule element, ModuleRuleStatusTypeConstants newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				ModuleRuleStatusTypeConstants oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.statusPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("ModuleRule"));
				}
			}
		}
		
		#endregion
		#region DependentModule domain property code
		
		/// <summary>
		/// DependentModule domain property Id.
		/// </summary>
		public static readonly global::System.Guid DependentModuleDomainPropertyId = new global::System.Guid(0x48dfe36f, 0xe01d, 0x4d61, 0xa6, 0x0a, 0x76, 0x1d, 0xeb, 0x20, 0x80, 0x79);
		
		/// <summary>
		/// Storage for DependentModule
		/// </summary>
		private global::System.Guid dependentModulePropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of DependentModule domain property.
		/// The module to which the status is applied
		/// </summary>
		[System.ComponentModel.Editor(typeof(nHydrate2.Dsl.Design.Editors.ModuleEditor), typeof(System.Drawing.Design.UITypeEditor))]
		[System.ComponentModel.TypeConverter(typeof(nHydrate2.Dsl.Design.Converters.ModuleConverter))]
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.ModuleRule/DependentModule.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.ModuleRule/DependentModule.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.ModuleRule/DependentModule.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("48dfe36f-e01d-4d61-a60a-761deb208079")]
		public virtual global::System.Guid DependentModule
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return dependentModulePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DependentModulePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModuleRule.DependentModule domain property.
		/// </summary>
		internal sealed partial class DependentModulePropertyHandler : DslModeling::DomainPropertyValueHandler<ModuleRule, global::System.Guid>
		{
			private DependentModulePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModuleRule.DependentModule domain property value handler.
			/// </summary>
			public static readonly DependentModulePropertyHandler Instance = new DependentModulePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModuleRule.DependentModule domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DependentModuleDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Guid GetValue(ModuleRule element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.DependentModule;
				//return element.GetValue<global::System.Guid>("DependentModule", element.dependentModulePropertyStorage);
				//return element.dependentModulePropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModuleRule element, global::System.Guid newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Guid oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.dependentModulePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("ModuleRule"));
				}
			}
		}
		
		#endregion
		#region Summary domain property code
		
		/// <summary>
		/// Summary domain property Id.
		/// </summary>
		public static readonly global::System.Guid SummaryDomainPropertyId = new global::System.Guid(0xb38f468b, 0xd7b6, 0x4e03, 0x8b, 0x6f, 0x78, 0xfc, 0xac, 0x0d, 0x55, 0x9b);
		
		/// <summary>
		/// Storage for Summary
		/// </summary>
		private global::System.String summaryPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Summary domain property.
		/// A summary of the rule
		/// </summary>
		[System.ComponentModel.Editor(typeof(System.ComponentModel.Design.MultilineStringEditor), typeof(System.Drawing.Design.UITypeEditor))]
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.ModuleRule/Summary.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.ModuleRule/Summary.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.ModuleRule/Summary.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("b38f468b-d7b6-4e03-8b6f-78fcac0d559b")]
		public virtual global::System.String Summary
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return summaryPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				SummaryPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModuleRule.Summary domain property.
		/// </summary>
		internal sealed partial class SummaryPropertyHandler : DslModeling::DomainPropertyValueHandler<ModuleRule, global::System.String>
		{
			private SummaryPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModuleRule.Summary domain property value handler.
			/// </summary>
			public static readonly SummaryPropertyHandler Instance = new SummaryPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModuleRule.Summary domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return SummaryDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ModuleRule element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.Summary;
				//return element.GetValue<global::System.String>("Summary", element.summaryPropertyStorage);
				//return element.summaryPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModuleRule element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.summaryPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("ModuleRule"));
				}
			}
		}
		
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0xe5291183, 0xc926, 0x4577, 0x84, 0x6e, 0x1e, 0xd2, 0x4b, 0x82, 0x7e, 0x1d);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Determines the name of this rule
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.ModuleRule/Name.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.ModuleRule/Name.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.ModuleRule/Name.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("e5291183-c926-4577-846e-1ed24b827e1d")]
		public virtual global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModuleRule.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<ModuleRule, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModuleRule.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModuleRule.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ModuleRule element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.Name;
				//return element.GetValue<global::System.String>("Name", element.namePropertyStorage);
				//return element.namePropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModuleRule element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("ModuleRule"));
				}
			}
		}
		
		#endregion
		#region Inclusion domain property code
		
		/// <summary>
		/// Inclusion domain property Id.
		/// </summary>
		public static readonly global::System.Guid InclusionDomainPropertyId = new global::System.Guid(0xd7f3b90b, 0x0732, 0x4c32, 0xbb, 0x77, 0x54, 0xbf, 0x75, 0x9c, 0xe9, 0xf9);
		
		/// <summary>
		/// Storage for Inclusion
		/// </summary>
		private global::System.Int32 inclusionPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of Inclusion domain property.
		/// Determines the object types that are included by this rule
		/// </summary>
		[System.ComponentModel.TypeConverter(typeof(nHydrate2.Dsl.Design.Converters.ModuleRuleInclusionEnumConverter))]
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.ModuleRule/Inclusion.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.ModuleRule/Inclusion.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.ModuleRule/Inclusion.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("d7f3b90b-0732-4c32-bb77-54bf759ce9f9")]
		public virtual global::System.Int32 Inclusion
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return inclusionPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				InclusionPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModuleRule.Inclusion domain property.
		/// </summary>
		internal sealed partial class InclusionPropertyHandler : DslModeling::DomainPropertyValueHandler<ModuleRule, global::System.Int32>
		{
			private InclusionPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModuleRule.Inclusion domain property value handler.
			/// </summary>
			public static readonly InclusionPropertyHandler Instance = new InclusionPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModuleRule.Inclusion domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return InclusionDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Int32 GetValue(ModuleRule element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.Inclusion;
				//return element.GetValue<global::System.Int32>("Inclusion", element.inclusionPropertyStorage);
				//return element.inclusionPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModuleRule element, global::System.Int32 newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Int32 oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.inclusionPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("ModuleRule"));
				}
			}
		}
		
		#endregion
		#region Enforced domain property code
		
		/// <summary>
		/// Enforced domain property Id.
		/// </summary>
		public static readonly global::System.Guid EnforcedDomainPropertyId = new global::System.Guid(0xa66fcddc, 0x6c16, 0x4f84, 0xb0, 0x51, 0x66, 0x2a, 0xd3, 0xfc, 0xc5, 0xaf);
		
		/// <summary>
		/// Storage for Enforced
		/// </summary>
		private global::System.Boolean enforcedPropertyStorage = true;
		
		/// <summary>
		/// Gets or sets the value of Enforced domain property.
		/// Determines if this rule is enfored on validation
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.ModuleRule/Enforced.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.ModuleRule/Enforced.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.ModuleRule/Enforced.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(true)]
		[DslModeling::DomainObjectId("a66fcddc-6c16-4f84-b051-662ad3fcc5af")]
		public virtual global::System.Boolean Enforced
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return enforcedPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				EnforcedPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModuleRule.Enforced domain property.
		/// </summary>
		internal sealed partial class EnforcedPropertyHandler : DslModeling::DomainPropertyValueHandler<ModuleRule, global::System.Boolean>
		{
			private EnforcedPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModuleRule.Enforced domain property value handler.
			/// </summary>
			public static readonly EnforcedPropertyHandler Instance = new EnforcedPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModuleRule.Enforced domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return EnforcedDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(ModuleRule element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.Enforced;
				//return element.GetValue<global::System.Boolean>("Enforced", element.enforcedPropertyStorage);
				//return element.enforcedPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModuleRule element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.enforcedPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("ModuleRule"));
				}
			}
		}
		
		#endregion
		#region Module opposite domain role accessor
		/// <summary>
		/// Gets or sets Module.
		/// </summary>
		public virtual Module Module
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::nHydrate2.Dsl.ModuleHasModuleRules.ModuleRuleDomainRoleId) as Module;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::nHydrate2.Dsl.ModuleHasModuleRules.ModuleRuleDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace nHydrate2.Dsl
{
	/// <summary>
	/// Double-derived base class for DomainClass Index
	/// </summary>
	[DslDesign::DisplayNameResource("nHydrate2.Dsl.Index.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("nHydrate2.Dsl.Index.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::nHydrate2.Dsl.nHydrate2DomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("ced4ceba-e07d-4396-b2fe-a981c60933d0")]
	public abstract partial class IndexBase : DslModeling::ModelElement, System.ComponentModel.INotifyPropertyChanged
	{
		#region INotifyPropertyChanged
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs e)
		{
			if (this.PropertyChanged != null)
				this.PropertyChanged(this, e);
		}
		#endregion
	
		#region Constructors, domain class Id
	
		/// <summary>
		/// Index domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xced4ceba, 0xe07d, 0x4396, 0xb2, 0xfe, 0xa9, 0x81, 0xc6, 0x09, 0x33, 0xd0);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected IndexBase(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region ParentEntityID domain property code
		
		/// <summary>
		/// ParentEntityID domain property Id.
		/// </summary>
		public static readonly global::System.Guid ParentEntityIDDomainPropertyId = new global::System.Guid(0xa8689c72, 0x62db, 0x4c31, 0x8f, 0x4e, 0xa6, 0x5b, 0x2e, 0xd9, 0x7c, 0xea);
		
		/// <summary>
		/// Storage for ParentEntityID
		/// </summary>
		private global::System.Guid parentEntityIDPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of ParentEntityID domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.Index/ParentEntityID.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.Index/ParentEntityID.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.Index/ParentEntityID.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("a8689c72-62db-4c31-8f4e-a65b2ed97cea")]
		public virtual global::System.Guid ParentEntityID
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return parentEntityIDPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ParentEntityIDPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Index.ParentEntityID domain property.
		/// </summary>
		internal sealed partial class ParentEntityIDPropertyHandler : DslModeling::DomainPropertyValueHandler<IndexBase, global::System.Guid>
		{
			private ParentEntityIDPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Index.ParentEntityID domain property value handler.
			/// </summary>
			public static readonly ParentEntityIDPropertyHandler Instance = new ParentEntityIDPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Index.ParentEntityID domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ParentEntityIDDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Guid GetValue(IndexBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.ParentEntityID;
				//return element.GetValue<global::System.Guid>("ParentEntityID", element.parentEntityIDPropertyStorage);
				//return element.parentEntityIDPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(IndexBase element, global::System.Guid newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Guid oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.parentEntityIDPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Index"));
				}
			}
		}
		
		#endregion
		#region IsUnique domain property code
		
		/// <summary>
		/// IsUnique domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsUniqueDomainPropertyId = new global::System.Guid(0x9aa19f49, 0xa18d, 0x4c03, 0x9b, 0x2c, 0x88, 0xa9, 0x15, 0x05, 0xf4, 0xbe);
		
		/// <summary>
		/// Storage for IsUnique
		/// </summary>
		private global::System.Boolean isUniquePropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of IsUnique domain property.
		/// Determines if this index is unique
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.Index/IsUnique.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.Index/IsUnique.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.Index/IsUnique.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("9aa19f49-a18d-4c03-9b2c-88a91505f4be")]
		public virtual global::System.Boolean IsUnique
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isUniquePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsUniquePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Index.IsUnique domain property.
		/// </summary>
		internal sealed partial class IsUniquePropertyHandler : DslModeling::DomainPropertyValueHandler<IndexBase, global::System.Boolean>
		{
			private IsUniquePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Index.IsUnique domain property value handler.
			/// </summary>
			public static readonly IsUniquePropertyHandler Instance = new IsUniquePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Index.IsUnique domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsUniqueDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(IndexBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.IsUnique;
				//return element.GetValue<global::System.Boolean>("IsUnique", element.isUniquePropertyStorage);
				//return element.isUniquePropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(IndexBase element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isUniquePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Index"));
				}
			}
		}
		
		#endregion
		#region Summary domain property code
		
		/// <summary>
		/// Summary domain property Id.
		/// </summary>
		public static readonly global::System.Guid SummaryDomainPropertyId = new global::System.Guid(0x9d97280c, 0x8b06, 0x435d, 0x9a, 0x01, 0xe7, 0xe3, 0x4c, 0x72, 0xcf, 0x2a);
		
		/// <summary>
		/// Storage for Summary
		/// </summary>
		private global::System.String summaryPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Summary domain property.
		/// Determines the summary of this object
		/// </summary>
		[System.ComponentModel.Editor(typeof(System.ComponentModel.Design.MultilineStringEditor), typeof(System.Drawing.Design.UITypeEditor))]
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.Index/Summary.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.Index/Summary.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.Index/Summary.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("9d97280c-8b06-435d-9a01-e7e34c72cf2a")]
		public virtual global::System.String Summary
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return summaryPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				SummaryPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Index.Summary domain property.
		/// </summary>
		internal sealed partial class SummaryPropertyHandler : DslModeling::DomainPropertyValueHandler<IndexBase, global::System.String>
		{
			private SummaryPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Index.Summary domain property value handler.
			/// </summary>
			public static readonly SummaryPropertyHandler Instance = new SummaryPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Index.Summary domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return SummaryDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(IndexBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.Summary;
				//return element.GetValue<global::System.String>("Summary", element.summaryPropertyStorage);
				//return element.summaryPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(IndexBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.summaryPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Index"));
				}
			}
		}
		
		#endregion
		#region Definition domain property code
		
		/// <summary>
		/// Definition domain property Id.
		/// </summary>
		public static readonly global::System.Guid DefinitionDomainPropertyId = new global::System.Guid(0xe48ef865, 0xb8c9, 0x461e, 0x89, 0x74, 0x4f, 0xb8, 0x6a, 0x0f, 0x72, 0x84);
		
		/// <summary>
		/// Storage for Definition
		/// </summary>
		private global::System.String definitionPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Definition domain property.
		/// The columns in the index
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.Index/Definition.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.Index/Definition.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.Index/Definition.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainObjectId("e48ef865-b8c9-461e-8974-4fb86a0f7284")]
		public virtual global::System.String Definition
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return definitionPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			private set
			{
				DefinitionPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Index.Definition domain property.
		/// </summary>
		internal sealed partial class DefinitionPropertyHandler : DslModeling::DomainPropertyValueHandler<IndexBase, global::System.String>
		{
			private DefinitionPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Index.Definition domain property value handler.
			/// </summary>
			public static readonly DefinitionPropertyHandler Instance = new DefinitionPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Index.Definition domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DefinitionDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(IndexBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.Definition;
				//return element.GetValue<global::System.String>("Definition", element.definitionPropertyStorage);
				//return element.definitionPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(IndexBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.definitionPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Index"));
				}
			}
		}
		
		#endregion
		#region IndexType domain property code
		
		/// <summary>
		/// IndexType domain property Id.
		/// </summary>
		public static readonly global::System.Guid IndexTypeDomainPropertyId = new global::System.Guid(0x071e2916, 0x81d3, 0x4102, 0xa4, 0xab, 0xce, 0xe0, 0x18, 0x81, 0x88, 0x9b);
		
		/// <summary>
		/// Storage for IndexType
		/// </summary>
		private IndexTypeConstants indexTypePropertyStorage = IndexTypeConstants.User;
		
		/// <summary>
		/// Gets or sets the value of IndexType domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.Index/IndexType.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.Index/IndexType.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(IndexTypeConstants.User)]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("071e2916-81d3-4102-a4ab-cee01881889b")]
		public virtual IndexTypeConstants IndexType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return indexTypePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IndexTypePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Index.IndexType domain property.
		/// </summary>
		internal sealed partial class IndexTypePropertyHandler : DslModeling::DomainPropertyValueHandler<IndexBase, IndexTypeConstants>
		{
			private IndexTypePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Index.IndexType domain property value handler.
			/// </summary>
			public static readonly IndexTypePropertyHandler Instance = new IndexTypePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Index.IndexType domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IndexTypeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed IndexTypeConstants GetValue(IndexBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.IndexType;
				//return element.GetValue<IndexTypeConstants>("IndexType", element.indexTypePropertyStorage);
				//return element.indexTypePropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(IndexBase element, IndexTypeConstants newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				IndexTypeConstants oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.indexTypePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Index"));
				}
			}
		}
		
		#endregion
		#region ImportedName domain property code
		
		/// <summary>
		/// ImportedName domain property Id.
		/// </summary>
		public static readonly global::System.Guid ImportedNameDomainPropertyId = new global::System.Guid(0xb581adbf, 0x990b, 0x4bdf, 0x86, 0xa8, 0x05, 0x60, 0xd2, 0x60, 0x64, 0xc0);
		
		/// <summary>
		/// Storage for ImportedName
		/// </summary>
		private global::System.String importedNamePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of ImportedName domain property.
		/// The original name imported from database
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.Index/ImportedName.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.Index/ImportedName.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("b581adbf-990b-4bdf-86a8-0560d26064c0")]
		public virtual global::System.String ImportedName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return importedNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ImportedNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Index.ImportedName domain property.
		/// </summary>
		internal sealed partial class ImportedNamePropertyHandler : DslModeling::DomainPropertyValueHandler<IndexBase, global::System.String>
		{
			private ImportedNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Index.ImportedName domain property value handler.
			/// </summary>
			public static readonly ImportedNamePropertyHandler Instance = new ImportedNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Index.ImportedName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ImportedNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(IndexBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.ImportedName;
				//return element.GetValue<global::System.String>("ImportedName", element.importedNamePropertyStorage);
				//return element.importedNamePropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(IndexBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.importedNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Index"));
				}
			}
		}
		
		#endregion
		#region Clustered domain property code
		
		/// <summary>
		/// Clustered domain property Id.
		/// </summary>
		public static readonly global::System.Guid ClusteredDomainPropertyId = new global::System.Guid(0x075c5cd6, 0x2db6, 0x4112, 0x91, 0x4b, 0x64, 0x5d, 0xe3, 0xf7, 0x50, 0x7a);
		
		/// <summary>
		/// Storage for Clustered
		/// </summary>
		private global::System.Boolean clusteredPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of Clustered domain property.
		/// Create this a a clustered index
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.Index/Clustered.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.Index/Clustered.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.Index/Clustered.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("075c5cd6-2db6-4112-914b-645de3f7507a")]
		public virtual global::System.Boolean Clustered
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return clusteredPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ClusteredPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Index.Clustered domain property.
		/// </summary>
		internal sealed partial class ClusteredPropertyHandler : DslModeling::DomainPropertyValueHandler<IndexBase, global::System.Boolean>
		{
			private ClusteredPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Index.Clustered domain property value handler.
			/// </summary>
			public static readonly ClusteredPropertyHandler Instance = new ClusteredPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Index.Clustered domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ClusteredDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(IndexBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.Clustered;
				//return element.GetValue<global::System.Boolean>("Clustered", element.clusteredPropertyStorage);
				//return element.clusteredPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(IndexBase element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.clusteredPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Index"));
				}
			}
		}
		
		#endregion
		#region Entity opposite domain role accessor
		/// <summary>
		/// Gets or sets Entity.
		/// </summary>
		public virtual Entity Entity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::nHydrate2.Dsl.EntityHasIndexes.IndexDomainRoleId) as Entity;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::nHydrate2.Dsl.EntityHasIndexes.IndexDomainRoleId, value);
			}
		}
		#endregion
		#region IndexColumns opposite domain role accessor
		
		/// <summary>
		/// Gets a list of IndexColumns.
		/// Description for nHydrate2.Dsl.IndexHasIndexColumns.Index
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<IndexColumn> IndexColumns
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<IndexColumn>, IndexColumn>(global::nHydrate2.Dsl.IndexHasIndexColumns.IndexDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::nHydrate2.Dsl.IndexColumn.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::nHydrate2.Dsl.IndexColumn sourceIndexColumn1 = sourceElement as global::nHydrate2.Dsl.IndexColumn;
			if (sourceIndexColumn1 != null)
			{
				// Create link for path IndexHasIndexColumns.IndexColumns
				this.IndexColumns.Add(sourceIndexColumn1);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::nHydrate2.Dsl.IndexColumn sourceIndexColumn1 = sourceElement as global::nHydrate2.Dsl.IndexColumn;
			if (sourceIndexColumn1 != null)
			{
				// Delete link for path IndexHasIndexColumns.IndexColumns
				
				foreach (DslModeling::ElementLink link in global::nHydrate2.Dsl.IndexHasIndexColumns.GetLinks((global::nHydrate2.Dsl.Index)this, sourceIndexColumn1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::nHydrate2.Dsl.IndexHasIndexColumns.IndexDomainRoleId, global::nHydrate2.Dsl.IndexHasIndexColumns.IndexColumnDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
	/// <summary>
	/// DomainClass Index
	/// A defined index for an entity
	/// </summary>
	[global::System.CLSCompliant(true)]
			
	public partial class Index : IndexBase
	{
		#region Constructors
		// Constructors were not generated for this class because it had HasCustomConstructor
		// set to true. Please provide the constructors below in a partial class.
		///// <summary>
		///// Constructor
		///// </summary>
		///// <param name="store">Store where new element is to be created.</param>
		///// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		//public Index(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
		//	: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		//{
		//}
		//
		///// <summary>
		///// Constructor
		///// </summary>
		///// <param name="partition">Partition where new element is to be created.</param>
		///// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		//public Index(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
		//	: base(partition, propertyAssignments)
		//{
		//}
		#endregion
	}
}
namespace nHydrate2.Dsl
{
	/// <summary>
	/// Double-derived base class for DomainClass IndexColumn
	/// </summary>
	[DslDesign::DisplayNameResource("nHydrate2.Dsl.IndexColumn.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("nHydrate2.Dsl.IndexColumn.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::nHydrate2.Dsl.nHydrate2DomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("06e94c72-d866-4c92-b5a9-624fdbebdf9e")]
	public abstract partial class IndexColumnBase : DslModeling::ModelElement, System.ComponentModel.INotifyPropertyChanged
	{
		#region INotifyPropertyChanged
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs e)
		{
			if (this.PropertyChanged != null)
				this.PropertyChanged(this, e);
		}
		#endregion
	
		#region Constructors, domain class Id
	
		/// <summary>
		/// IndexColumn domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x06e94c72, 0xd866, 0x4c92, 0xb5, 0xa9, 0x62, 0x4f, 0xdb, 0xeb, 0xdf, 0x9e);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected IndexColumnBase(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region FieldID domain property code
		
		/// <summary>
		/// FieldID domain property Id.
		/// </summary>
		public static readonly global::System.Guid FieldIDDomainPropertyId = new global::System.Guid(0xa34ec5ca, 0xd4d4, 0x4fc6, 0x89, 0x38, 0x47, 0x3c, 0x73, 0xde, 0x49, 0x98);
		
		/// <summary>
		/// Storage for FieldID
		/// </summary>
		private global::System.Guid fieldIDPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of FieldID domain property.
		/// The referenced entity field
		/// </summary>
		[System.ComponentModel.Editor(typeof(nHydrate2.Dsl.Design.Editors.EntityFieldEditor), typeof(System.Drawing.Design.UITypeEditor))]
		[System.ComponentModel.TypeConverter(typeof(nHydrate2.Dsl.Design.Converters.EntityFieldConverter))]
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.IndexColumn/FieldID.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.IndexColumn/FieldID.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.IndexColumn/FieldID.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("a34ec5ca-d4d4-4fc6-8938-473c73de4998")]
		public virtual global::System.Guid FieldID
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return fieldIDPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				FieldIDPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the IndexColumn.FieldID domain property.
		/// </summary>
		internal sealed partial class FieldIDPropertyHandler : DslModeling::DomainPropertyValueHandler<IndexColumnBase, global::System.Guid>
		{
			private FieldIDPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the IndexColumn.FieldID domain property value handler.
			/// </summary>
			public static readonly FieldIDPropertyHandler Instance = new FieldIDPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the IndexColumn.FieldID domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return FieldIDDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Guid GetValue(IndexColumnBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.FieldID;
				//return element.GetValue<global::System.Guid>("FieldID", element.fieldIDPropertyStorage);
				//return element.fieldIDPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(IndexColumnBase element, global::System.Guid newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Guid oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.fieldIDPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("IndexColumn"));
				}
			}
		}
		
		#endregion
		#region Ascending domain property code
		
		/// <summary>
		/// Ascending domain property Id.
		/// </summary>
		public static readonly global::System.Guid AscendingDomainPropertyId = new global::System.Guid(0xd203b5ed, 0x1826, 0x4ce0, 0xab, 0x66, 0x0b, 0x9c, 0x0b, 0x65, 0xd0, 0xfb);
		
		/// <summary>
		/// Storage for Ascending
		/// </summary>
		private global::System.Boolean ascendingPropertyStorage = true;
		
		/// <summary>
		/// Gets or sets the value of Ascending domain property.
		/// Determines if this column is indexed in ascending order
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.IndexColumn/Ascending.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.IndexColumn/Ascending.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.IndexColumn/Ascending.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(true)]
		[DslModeling::DomainObjectId("d203b5ed-1826-4ce0-ab66-0b9c0b65d0fb")]
		public virtual global::System.Boolean Ascending
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return ascendingPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				AscendingPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the IndexColumn.Ascending domain property.
		/// </summary>
		internal sealed partial class AscendingPropertyHandler : DslModeling::DomainPropertyValueHandler<IndexColumnBase, global::System.Boolean>
		{
			private AscendingPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the IndexColumn.Ascending domain property value handler.
			/// </summary>
			public static readonly AscendingPropertyHandler Instance = new AscendingPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the IndexColumn.Ascending domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return AscendingDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(IndexColumnBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.Ascending;
				//return element.GetValue<global::System.Boolean>("Ascending", element.ascendingPropertyStorage);
				//return element.ascendingPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(IndexColumnBase element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.ascendingPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("IndexColumn"));
				}
			}
		}
		
		#endregion
		#region Definition domain property code
		
		/// <summary>
		/// Definition domain property Id.
		/// </summary>
		public static readonly global::System.Guid DefinitionDomainPropertyId = new global::System.Guid(0x390d4ff4, 0xe3d9, 0x4ca5, 0x92, 0xa4, 0xc4, 0x10, 0xf4, 0x80, 0x8b, 0xbb);
		
		/// <summary>
		/// Storage for Definition
		/// </summary>
		private global::System.String definitionPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Definition domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.IndexColumn/Definition.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.IndexColumn/Definition.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainObjectId("390d4ff4-e3d9-4ca5-92a4-c410f4808bbb")]
		public virtual global::System.String Definition
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return definitionPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			private set
			{
				DefinitionPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the IndexColumn.Definition domain property.
		/// </summary>
		internal sealed partial class DefinitionPropertyHandler : DslModeling::DomainPropertyValueHandler<IndexColumnBase, global::System.String>
		{
			private DefinitionPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the IndexColumn.Definition domain property value handler.
			/// </summary>
			public static readonly DefinitionPropertyHandler Instance = new DefinitionPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the IndexColumn.Definition domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DefinitionDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(IndexColumnBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.Definition;
				//return element.GetValue<global::System.String>("Definition", element.definitionPropertyStorage);
				//return element.definitionPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(IndexColumnBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.definitionPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("IndexColumn"));
				}
			}
		}
		
		#endregion
		#region SortOrder domain property code
		
		/// <summary>
		/// SortOrder domain property Id.
		/// </summary>
		public static readonly global::System.Guid SortOrderDomainPropertyId = new global::System.Guid(0x87394d79, 0x86a1, 0x4e18, 0x93, 0x5c, 0x29, 0x79, 0x3d, 0xf4, 0x5f, 0x39);
		
		/// <summary>
		/// Storage for SortOrder
		/// </summary>
		private global::System.Int32 sortOrderPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of SortOrder domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.IndexColumn/SortOrder.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.IndexColumn/SortOrder.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("87394d79-86a1-4e18-935c-29793df45f39")]
		public virtual global::System.Int32 SortOrder
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return sortOrderPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				SortOrderPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the IndexColumn.SortOrder domain property.
		/// </summary>
		internal sealed partial class SortOrderPropertyHandler : DslModeling::DomainPropertyValueHandler<IndexColumnBase, global::System.Int32>
		{
			private SortOrderPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the IndexColumn.SortOrder domain property value handler.
			/// </summary>
			public static readonly SortOrderPropertyHandler Instance = new SortOrderPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the IndexColumn.SortOrder domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return SortOrderDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Int32 GetValue(IndexColumnBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.SortOrder;
				//return element.GetValue<global::System.Int32>("SortOrder", element.sortOrderPropertyStorage);
				//return element.sortOrderPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(IndexColumnBase element, global::System.Int32 newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Int32 oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.sortOrderPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("IndexColumn"));
				}
			}
		}
		
		#endregion
		#region Index opposite domain role accessor
		/// <summary>
		/// Gets or sets Index.
		/// Description for nHydrate2.Dsl.IndexHasIndexColumns.IndexColumn
		/// </summary>
		public virtual Index Index
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::nHydrate2.Dsl.IndexHasIndexColumns.IndexColumnDomainRoleId) as Index;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::nHydrate2.Dsl.IndexHasIndexColumns.IndexColumnDomainRoleId, value);
			}
		}
		#endregion
	}
	/// <summary>
	/// DomainClass IndexColumn
	/// </summary>
	[global::System.CLSCompliant(true)]
			
	public partial class IndexColumn : IndexColumnBase
	{
		#region Constructors
		// Constructors were not generated for this class because it had HasCustomConstructor
		// set to true. Please provide the constructors below in a partial class.
		///// <summary>
		///// Constructor
		///// </summary>
		///// <param name="store">Store where new element is to be created.</param>
		///// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		//public IndexColumn(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
		//	: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		//{
		//}
		//
		///// <summary>
		///// Constructor
		///// </summary>
		///// <param name="partition">Partition where new element is to be created.</param>
		///// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		//public IndexColumn(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
		//	: base(partition, propertyAssignments)
		//{
		//}
		#endregion
	}
}
namespace nHydrate2.Dsl
{
	/// <summary>
	/// DomainClass ModelMetadata
	/// Description for nHydrate2.Dsl.ModelMetadata
	/// </summary>
	[DslDesign::DisplayNameResource("nHydrate2.Dsl.ModelMetadata.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("nHydrate2.Dsl.ModelMetadata.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::nHydrate2.Dsl.nHydrate2DomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("08609292-2eb3-4f13-a9a4-9455e9551a9e")]
	public partial class ModelMetadata : DslModeling::ModelElement, System.ComponentModel.INotifyPropertyChanged
	{
		#region INotifyPropertyChanged
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs e)
		{
			if (this.PropertyChanged != null)
				this.PropertyChanged(this, e);
		}
		#endregion
	
		#region Constructors, domain class Id
	
		/// <summary>
		/// ModelMetadata domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x08609292, 0x2eb3, 0x4f13, 0xa9, 0xa4, 0x94, 0x55, 0xe9, 0x55, 0x1a, 0x9e);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ModelMetadata(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ModelMetadata(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Key domain property code
		
		/// <summary>
		/// Key domain property Id.
		/// </summary>
		public static readonly global::System.Guid KeyDomainPropertyId = new global::System.Guid(0x2afda66a, 0x2834, 0x4ab9, 0x94, 0x4b, 0x88, 0xdc, 0x25, 0xd8, 0x45, 0x36);
		
		/// <summary>
		/// Storage for Key
		/// </summary>
		private global::System.String keyPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Key domain property.
		/// The unqiue key of this metadata
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.ModelMetadata/Key.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.ModelMetadata/Key.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.ModelMetadata/Key.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("2afda66a-2834-4ab9-944b-88dc25d84536")]
		public virtual global::System.String Key
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return keyPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				KeyPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelMetadata.Key domain property.
		/// </summary>
		internal sealed partial class KeyPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelMetadata, global::System.String>
		{
			private KeyPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelMetadata.Key domain property value handler.
			/// </summary>
			public static readonly KeyPropertyHandler Instance = new KeyPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelMetadata.Key domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return KeyDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ModelMetadata element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.Key;
				//return element.GetValue<global::System.String>("Key", element.keyPropertyStorage);
				//return element.keyPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelMetadata element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.keyPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("ModelMetadata"));
				}
			}
		}
		
		#endregion
		#region Value domain property code
		
		/// <summary>
		/// Value domain property Id.
		/// </summary>
		public static readonly global::System.Guid ValueDomainPropertyId = new global::System.Guid(0x621eaec6, 0xe972, 0x4324, 0x92, 0x36, 0x61, 0x99, 0xbe, 0x7b, 0x16, 0x12);
		
		/// <summary>
		/// Storage for Value
		/// </summary>
		private global::System.String valuePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Value domain property.
		/// The value of this metadata
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.ModelMetadata/Value.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.ModelMetadata/Value.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.ModelMetadata/Value.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("621eaec6-e972-4324-9236-6199be7b1612")]
		public virtual global::System.String Value
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return valuePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ValuePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelMetadata.Value domain property.
		/// </summary>
		internal sealed partial class ValuePropertyHandler : DslModeling::DomainPropertyValueHandler<ModelMetadata, global::System.String>
		{
			private ValuePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelMetadata.Value domain property value handler.
			/// </summary>
			public static readonly ValuePropertyHandler Instance = new ValuePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelMetadata.Value domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ValueDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ModelMetadata element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.Value;
				//return element.GetValue<global::System.String>("Value", element.valuePropertyStorage);
				//return element.valuePropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelMetadata element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.valuePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("ModelMetadata"));
				}
			}
		}
		
		#endregion
		#region nHydrateModel opposite domain role accessor
		/// <summary>
		/// Gets or sets nHydrateModel.
		/// Description for nHydrate2.Dsl.nHydrateModelHasModelMetadata.ModelMetadata
		/// </summary>
		public virtual nHydrateModel nHydrateModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::nHydrate2.Dsl.nHydrateModelHasModelMetadata.ModelMetadataDomainRoleId) as nHydrateModel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::nHydrate2.Dsl.nHydrateModelHasModelMetadata.ModelMetadataDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace nHydrate2.Dsl
{
	/// <summary>
	/// DomainClass IndexModule
	/// </summary>
	[DslDesign::DisplayNameResource("nHydrate2.Dsl.IndexModule.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("nHydrate2.Dsl.IndexModule.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::nHydrate2.Dsl.nHydrate2DomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("776ac2d1-1c43-4b77-81f2-a4187e374f56")]
	public partial class IndexModule : DslModeling::ModelElement, System.ComponentModel.INotifyPropertyChanged
	{
		#region INotifyPropertyChanged
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs e)
		{
			if (this.PropertyChanged != null)
				this.PropertyChanged(this, e);
		}
		#endregion
	
		#region Constructors, domain class Id
	
		/// <summary>
		/// IndexModule domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x776ac2d1, 0x1c43, 0x4b77, 0x81, 0xf2, 0xa4, 0x18, 0x7e, 0x37, 0x4f, 0x56);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public IndexModule(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public IndexModule(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region IndexID domain property code
		
		/// <summary>
		/// IndexID domain property Id.
		/// </summary>
		public static readonly global::System.Guid IndexIDDomainPropertyId = new global::System.Guid(0xb38a2405, 0x6511, 0x434e, 0xac, 0x57, 0x70, 0x86, 0x6a, 0x9a, 0xd2, 0x9c);
		
		/// <summary>
		/// Storage for IndexID
		/// </summary>
		private global::System.Guid indexIDPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of IndexID domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.IndexModule/IndexID.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.IndexModule/IndexID.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("b38a2405-6511-434e-ac57-70866a9ad29c")]
		public virtual global::System.Guid IndexID
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return indexIDPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IndexIDPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the IndexModule.IndexID domain property.
		/// </summary>
		internal sealed partial class IndexIDPropertyHandler : DslModeling::DomainPropertyValueHandler<IndexModule, global::System.Guid>
		{
			private IndexIDPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the IndexModule.IndexID domain property value handler.
			/// </summary>
			public static readonly IndexIDPropertyHandler Instance = new IndexIDPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the IndexModule.IndexID domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IndexIDDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Guid GetValue(IndexModule element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.IndexID;
				//return element.GetValue<global::System.Guid>("IndexID", element.indexIDPropertyStorage);
				//return element.indexIDPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(IndexModule element, global::System.Guid newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Guid oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.indexIDPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("IndexModule"));
				}
			}
		}
		
		#endregion
		#region ModuleId domain property code
		
		/// <summary>
		/// ModuleId domain property Id.
		/// </summary>
		public static readonly global::System.Guid ModuleIdDomainPropertyId = new global::System.Guid(0xf4f123c3, 0x878c, 0x4add, 0x8a, 0x3e, 0xd7, 0x99, 0x6b, 0xe8, 0x39, 0x78);
		
		/// <summary>
		/// Storage for ModuleId
		/// </summary>
		private global::System.Guid moduleIdPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of ModuleId domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.IndexModule/ModuleId.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.IndexModule/ModuleId.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("f4f123c3-878c-4add-8a3e-d7996be83978")]
		public virtual global::System.Guid ModuleId
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return moduleIdPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ModuleIdPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the IndexModule.ModuleId domain property.
		/// </summary>
		internal sealed partial class ModuleIdPropertyHandler : DslModeling::DomainPropertyValueHandler<IndexModule, global::System.Guid>
		{
			private ModuleIdPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the IndexModule.ModuleId domain property value handler.
			/// </summary>
			public static readonly ModuleIdPropertyHandler Instance = new ModuleIdPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the IndexModule.ModuleId domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ModuleIdDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Guid GetValue(IndexModule element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.ModuleId;
				//return element.GetValue<global::System.Guid>("ModuleId", element.moduleIdPropertyStorage);
				//return element.moduleIdPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(IndexModule element, global::System.Guid newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Guid oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.moduleIdPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("IndexModule"));
				}
			}
		}
		
		#endregion
		#region nHydrateModel opposite domain role accessor
		/// <summary>
		/// Gets or sets nHydrateModel.
		/// Description for nHydrate2.Dsl.nHydrateModelHasIndexModules.IndexModule
		/// </summary>
		public virtual nHydrateModel nHydrateModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::nHydrate2.Dsl.nHydrateModelHasIndexModules.IndexModuleDomainRoleId) as nHydrateModel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::nHydrate2.Dsl.nHydrateModelHasIndexModules.IndexModuleDomainRoleId, value);
			}
		}
		#endregion
	}
}
