//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace nHydrate2.Dsl
{
	/// <summary>
	/// DomainRelationship nHydrateModelHasEntities
	/// </summary>
	[DslDesign::DisplayNameResource("nHydrate2.Dsl.nHydrateModelHasEntities.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("nHydrate2.Dsl.nHydrateModelHasEntities.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::nHydrate2.Dsl.nHydrate2DomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("cd23608d-a10a-4e2e-9ff7-0897d5701618")]
	public partial class nHydrateModelHasEntities : DslModeling::ElementLink, System.ComponentModel.INotifyPropertyChanged
	{
		#region INotifyPropertyChanged
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs e)
		{
			if (this.PropertyChanged != null)
				this.PropertyChanged(this, e);
		}
		#endregion
	
		#region Constructors, domain class Id
		
		/// <summary>
		/// nHydrateModelHasEntities domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xcd23608d, 0xa10a, 0x4e2e, 0x9f, 0xf7, 0x08, 0x97, 0xd5, 0x70, 0x16, 0x18);
	
				
		/// <summary>
		/// Constructor
		/// Creates a nHydrateModelHasEntities link in the same Partition as the given nHydrateModel
		/// </summary>
		/// <param name="source">nHydrateModel to use as the source of the relationship.</param>
		/// <param name="target">Entity to use as the target of the relationship.</param>
		public nHydrateModelHasEntities(nHydrateModel source, Entity target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(nHydrateModelHasEntities.nHydrateModelDomainRoleId, source), new DslModeling::RoleAssignment(nHydrateModelHasEntities.EntityDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public nHydrateModelHasEntities(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public nHydrateModelHasEntities(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public nHydrateModelHasEntities(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public nHydrateModelHasEntities(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region nHydrateModel domain role code
		
		/// <summary>
		/// nHydrateModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid nHydrateModelDomainRoleId = new global::System.Guid(0xacfa23ed, 0xc266, 0x409f, 0xaf, 0xcc, 0x9c, 0xd9, 0x6d, 0x6f, 0x8f, 0xfc);
		
		/// <summary>
		/// DomainRole nHydrateModel
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.nHydrateModelHasEntities/nHydrateModel.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.nHydrateModelHasEntities/nHydrateModel.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Entities", PropertyDisplayNameKey="nHydrate2.Dsl.nHydrateModelHasEntities/nHydrateModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("acfa23ed-c266-409f-afcc-9cd96d6f8ffc")]
		public virtual nHydrateModel nHydrateModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (nHydrateModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, nHydrateModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, nHydrateModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access nHydrateModel of a Entity
		/// <summary>
		/// Gets nHydrateModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static nHydrateModel GetnHydrateModel(Entity element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, EntityDomainRoleId) as nHydrateModel;
		}
		
		/// <summary>
		/// Sets nHydrateModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetnHydrateModel(Entity element, nHydrateModel newnHydrateModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, EntityDomainRoleId, newnHydrateModel);
		}
		#endregion
		#region Entity domain role code
		
		/// <summary>
		/// Entity domain role Id.
		/// </summary>
		public static readonly global::System.Guid EntityDomainRoleId = new global::System.Guid(0x88e9e580, 0x082f, 0x4a9f, 0xa8, 0xf5, 0xb2, 0x94, 0x21, 0xd8, 0xd5, 0x6a);
		
		/// <summary>
		/// DomainRole Entity
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.nHydrateModelHasEntities/Entity.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.nHydrateModelHasEntities/Entity.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "nHydrateModel", PropertyDisplayNameKey="nHydrate2.Dsl.nHydrateModelHasEntities/Entity.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("88e9e580-082f-4a9f-a8f5-b29421d8d56a")]
		public virtual Entity Entity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Entity)DslModeling::DomainRoleInfo.GetRolePlayer(this, EntityDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, EntityDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Entities of a nHydrateModel
		/// <summary>
		/// Gets a list of Entities.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Entity> GetEntities(nHydrateModel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Entity>, Entity>(element, nHydrateModelDomainRoleId);
		}
		#endregion
		#region nHydrateModel link accessor
		/// <summary>
		/// Get the list of nHydrateModelHasEntities links to a nHydrateModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::nHydrate2.Dsl.nHydrateModelHasEntities> GetLinksToEntities ( global::nHydrate2.Dsl.nHydrateModel nHydrateModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate2.Dsl.nHydrateModelHasEntities>(nHydrateModelInstance, global::nHydrate2.Dsl.nHydrateModelHasEntities.nHydrateModelDomainRoleId);
		}
		#endregion
		#region Entity link accessor
		/// <summary>
		/// Get the nHydrateModelHasEntities link to a Entity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::nHydrate2.Dsl.nHydrateModelHasEntities GetLinkTonHydrateModel (global::nHydrate2.Dsl.Entity entityInstance)
		{
			global::System.Collections.Generic.IList<global::nHydrate2.Dsl.nHydrateModelHasEntities> links = DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate2.Dsl.nHydrateModelHasEntities>(entityInstance, global::nHydrate2.Dsl.nHydrateModelHasEntities.EntityDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Entity not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region nHydrateModelHasEntities instance accessors
		
		/// <summary>
		/// Get any nHydrateModelHasEntities links between a given nHydrateModel and a Entity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::nHydrate2.Dsl.nHydrateModelHasEntities> GetLinks( global::nHydrate2.Dsl.nHydrateModel source, global::nHydrate2.Dsl.Entity target )
		{
			global::System.Collections.Generic.List<global::nHydrate2.Dsl.nHydrateModelHasEntities> outLinks = new global::System.Collections.Generic.List<global::nHydrate2.Dsl.nHydrateModelHasEntities>();
			global::System.Collections.Generic.IList<global::nHydrate2.Dsl.nHydrateModelHasEntities> links = DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate2.Dsl.nHydrateModelHasEntities>(source, global::nHydrate2.Dsl.nHydrateModelHasEntities.nHydrateModelDomainRoleId);
			foreach ( global::nHydrate2.Dsl.nHydrateModelHasEntities link in links )
			{
				if ( target.Equals(link.Entity) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one nHydrateModelHasEntities link between a given nHydrateModeland a Entity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::nHydrate2.Dsl.nHydrateModelHasEntities GetLink( global::nHydrate2.Dsl.nHydrateModel source, global::nHydrate2.Dsl.Entity target )
		{
			global::System.Collections.Generic.IList<global::nHydrate2.Dsl.nHydrateModelHasEntities> links = DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate2.Dsl.nHydrateModelHasEntities>(source, global::nHydrate2.Dsl.nHydrateModelHasEntities.nHydrateModelDomainRoleId);
			foreach ( global::nHydrate2.Dsl.nHydrateModelHasEntities link in links )
			{
				if ( target.Equals(link.Entity) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace nHydrate2.Dsl
{
	/// <summary>
	/// Double-derived base class for DomainRelationship EntityHasEntities
	/// </summary>
	[DslDesign::DisplayNameResource("nHydrate2.Dsl.EntityHasEntities.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("nHydrate2.Dsl.EntityHasEntities.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::nHydrate2.Dsl.nHydrate2DomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(AllowsDuplicates = true)]
	[DslModeling::DomainObjectId("3ee482ac-9232-4953-b839-df2253d00079")]
	public abstract partial class EntityHasEntitiesBase : DslModeling::ElementLink, System.ComponentModel.INotifyPropertyChanged
	{
		#region INotifyPropertyChanged
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs e)
		{
			if (this.PropertyChanged != null)
				this.PropertyChanged(this, e);
		}
		#endregion
	
		#region Constructors, domain class Id
		
		/// <summary>
		/// EntityHasEntities domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x3ee482ac, 0x9232, 0x4953, 0xb8, 0x39, 0xdf, 0x22, 0x53, 0xd0, 0x00, 0x79);
	
		// Constructors were not generated for this relationship because it had HasCustomConstructor
		// set to true. Please provide the constructors below in a partial class.
		///// <summary>
		///// Constructor.
		///// </summary>
		///// <param name="partition">The Partition instance containing this ElementLink</param>
		///// <param name="roleAssignments">A set of role assignments for roleplayer initialization</param>
		///// <param name="propertyAssignments">A set of attribute assignments for attribute initialization</param>
		//protected EntityHasEntitiesBase(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
		//	: base(partition, roleAssignments, propertyAssignments)
		//{
		//}
		#endregion
		#region ParentEntity domain role code
		
		/// <summary>
		/// ParentEntity domain role Id.
		/// </summary>
		public static readonly global::System.Guid ParentEntityDomainRoleId = new global::System.Guid(0x6b449ed7, 0xd557, 0x4185, 0xac, 0xa4, 0x44, 0x92, 0x13, 0x68, 0xb0, 0x41);
		
		/// <summary>
		/// DomainRole ParentEntity
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.EntityHasEntities/ParentEntity.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.EntityHasEntities/ParentEntity.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ChildEntities", PropertyDisplayNameKey="nHydrate2.Dsl.EntityHasEntities/ParentEntity.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("6b449ed7-d557-4185-aca4-44921368b041")]
		public virtual Entity ParentEntity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Entity)DslModeling::DomainRoleInfo.GetRolePlayer(this, ParentEntityDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ParentEntityDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ParentEntity of a Entity
		/// <summary>
		/// Gets a list of ParentEntity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Entity> GetParentEntity(Entity element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Entity>, Entity>(element, ChildEntityDomainRoleId);
		}
		#endregion
		#region ChildEntity domain role code
		
		/// <summary>
		/// ChildEntity domain role Id.
		/// </summary>
		public static readonly global::System.Guid ChildEntityDomainRoleId = new global::System.Guid(0xc4467b71, 0x2045, 0x467c, 0xb5, 0x68, 0x0b, 0x53, 0x44, 0xff, 0x06, 0xda);
		
		/// <summary>
		/// DomainRole ChildEntity
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.EntityHasEntities/ChildEntity.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.EntityHasEntities/ChildEntity.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ParentEntity", PropertyDisplayNameKey="nHydrate2.Dsl.EntityHasEntities/ChildEntity.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("c4467b71-2045-467c-b568-0b5344ff06da")]
		public virtual Entity ChildEntity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Entity)DslModeling::DomainRoleInfo.GetRolePlayer(this, ChildEntityDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ChildEntityDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ChildEntities of a Entity
		/// <summary>
		/// Gets a list of ChildEntities.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Entity> GetChildEntities(Entity element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Entity>, Entity>(element, ParentEntityDomainRoleId);
		}
		#endregion
		#region Multiplicity domain property code
		
		/// <summary>
		/// Multiplicity domain property Id.
		/// </summary>
		public static readonly global::System.Guid MultiplicityDomainPropertyId = new global::System.Guid(0x1d1d755e, 0xc8eb, 0x4e62, 0x81, 0xdc, 0xd6, 0x0c, 0xd0, 0xa1, 0x28, 0xdb);
		
		/// <summary>
		/// Storage for Multiplicity
		/// </summary>
		private RelationshipTypeConstants multiplicityPropertyStorage = RelationshipTypeConstants.OneToMany;
		
		/// <summary>
		/// Gets or sets the value of Multiplicity domain property.
		/// Determines the multiplicity of this relationship
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.EntityHasEntities/Multiplicity.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.EntityHasEntities/Multiplicity.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.EntityHasEntities/Multiplicity.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(RelationshipTypeConstants.OneToMany)]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("1d1d755e-c8eb-4e62-81dc-d60cd0a128db")]
		public virtual RelationshipTypeConstants Multiplicity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return multiplicityPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				MultiplicityPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the EntityHasEntities.Multiplicity domain property.
		/// </summary>
		internal sealed partial class MultiplicityPropertyHandler : DslModeling::DomainPropertyValueHandler<EntityHasEntitiesBase, RelationshipTypeConstants>
		{
			private MultiplicityPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the EntityHasEntities.Multiplicity domain property value handler.
			/// </summary>
			public static readonly MultiplicityPropertyHandler Instance = new MultiplicityPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the EntityHasEntities.Multiplicity domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return MultiplicityDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed RelationshipTypeConstants GetValue(EntityHasEntitiesBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.Multiplicity;
				//return element.GetValue<RelationshipTypeConstants>("Multiplicity", element.multiplicityPropertyStorage);
				//return element.multiplicityPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(EntityHasEntitiesBase element, RelationshipTypeConstants newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				RelationshipTypeConstants oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.multiplicityPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("EntityHasEntities"));
				}
			}
		}
		
		#endregion
		#region RoleName domain property code
		
		/// <summary>
		/// RoleName domain property Id.
		/// </summary>
		public static readonly global::System.Guid RoleNameDomainPropertyId = new global::System.Guid(0x9b6d5ca2, 0xa1ad, 0x47dc, 0xa1, 0xdb, 0x88, 0x98, 0x88, 0xcb, 0x6a, 0x0e);
		
		/// <summary>
		/// Storage for RoleName
		/// </summary>
		private global::System.String roleNamePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of RoleName domain property.
		/// The named relation necessary when there is more than one relation between two
		/// entities
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.EntityHasEntities/RoleName.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.EntityHasEntities/RoleName.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.EntityHasEntities/RoleName.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("9b6d5ca2-a1ad-47dc-a1db-889888cb6a0e")]
		public virtual global::System.String RoleName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return roleNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				RoleNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the EntityHasEntities.RoleName domain property.
		/// </summary>
		internal sealed partial class RoleNamePropertyHandler : DslModeling::DomainPropertyValueHandler<EntityHasEntitiesBase, global::System.String>
		{
			private RoleNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the EntityHasEntities.RoleName domain property value handler.
			/// </summary>
			public static readonly RoleNamePropertyHandler Instance = new RoleNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the EntityHasEntities.RoleName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return RoleNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(EntityHasEntitiesBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.RoleName;
				//return element.GetValue<global::System.String>("RoleName", element.roleNamePropertyStorage);
				//return element.roleNamePropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(EntityHasEntitiesBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.roleNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("EntityHasEntities"));
				}
			}
		}
		
		#endregion
		#region IsEnforced domain property code
		
		/// <summary>
		/// IsEnforced domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsEnforcedDomainPropertyId = new global::System.Guid(0x483720f5, 0x89eb, 0x40a2, 0x8d, 0x50, 0x19, 0xe5, 0x9a, 0x9c, 0x0e, 0xb2);
		
		/// <summary>
		/// Storage for IsEnforced
		/// </summary>
		private global::System.Boolean isEnforcedPropertyStorage = true;
		
		/// <summary>
		/// Gets or sets the value of IsEnforced domain property.
		/// Determines if this relationship is enfored in the database or just in code
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.EntityHasEntities/IsEnforced.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.EntityHasEntities/IsEnforced.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.EntityHasEntities/IsEnforced.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(true)]
		[DslModeling::DomainObjectId("483720f5-89eb-40a2-8d50-19e59a9c0eb2")]
		public virtual global::System.Boolean IsEnforced
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isEnforcedPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsEnforcedPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the EntityHasEntities.IsEnforced domain property.
		/// </summary>
		internal sealed partial class IsEnforcedPropertyHandler : DslModeling::DomainPropertyValueHandler<EntityHasEntitiesBase, global::System.Boolean>
		{
			private IsEnforcedPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the EntityHasEntities.IsEnforced domain property value handler.
			/// </summary>
			public static readonly IsEnforcedPropertyHandler Instance = new IsEnforcedPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the EntityHasEntities.IsEnforced domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsEnforcedDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(EntityHasEntitiesBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.IsEnforced;
				//return element.GetValue<global::System.Boolean>("IsEnforced", element.isEnforcedPropertyStorage);
				//return element.isEnforcedPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(EntityHasEntitiesBase element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isEnforcedPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("EntityHasEntities"));
				}
			}
		}
		
		#endregion
		#region ImportData domain property code
		
		/// <summary>
		/// ImportData domain property Id.
		/// </summary>
		public static readonly global::System.Guid ImportDataDomainPropertyId = new global::System.Guid(0x0f07c726, 0x427f, 0x4fe7, 0x81, 0xc3, 0x9c, 0xc6, 0x4c, 0x8f, 0x4d, 0x92);
		
		/// <summary>
		/// Storage for ImportData
		/// </summary>
		private global::System.String importDataPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of ImportData domain property.
		/// Internal data to track imports
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.EntityHasEntities/ImportData.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.EntityHasEntities/ImportData.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("0f07c726-427f-4fe7-81c3-9cc64c8f4d92")]
		public virtual global::System.String ImportData
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return importDataPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ImportDataPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the EntityHasEntities.ImportData domain property.
		/// </summary>
		internal sealed partial class ImportDataPropertyHandler : DslModeling::DomainPropertyValueHandler<EntityHasEntitiesBase, global::System.String>
		{
			private ImportDataPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the EntityHasEntities.ImportData domain property value handler.
			/// </summary>
			public static readonly ImportDataPropertyHandler Instance = new ImportDataPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the EntityHasEntities.ImportData domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ImportDataDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(EntityHasEntitiesBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.ImportData;
				//return element.GetValue<global::System.String>("ImportData", element.importDataPropertyStorage);
				//return element.importDataPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(EntityHasEntitiesBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.importDataPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("EntityHasEntities"));
				}
			}
		}
		
		#endregion
		#region Summary domain property code
		
		/// <summary>
		/// Summary domain property Id.
		/// </summary>
		public static readonly global::System.Guid SummaryDomainPropertyId = new global::System.Guid(0x4faca3f2, 0x9fc5, 0x48e1, 0xbf, 0xb5, 0xdc, 0x37, 0x4d, 0xa9, 0x80, 0x0d);
		
		/// <summary>
		/// Storage for Summary
		/// </summary>
		private global::System.String summaryPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Summary domain property.
		/// Determines summary text were applicable
		/// </summary>
		[System.ComponentModel.Editor(typeof(System.ComponentModel.Design.MultilineStringEditor), typeof(System.Drawing.Design.UITypeEditor))]
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.EntityHasEntities/Summary.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.EntityHasEntities/Summary.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.EntityHasEntities/Summary.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("4faca3f2-9fc5-48e1-bfb5-dc374da9800d")]
		public virtual global::System.String Summary
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return summaryPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				SummaryPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the EntityHasEntities.Summary domain property.
		/// </summary>
		internal sealed partial class SummaryPropertyHandler : DslModeling::DomainPropertyValueHandler<EntityHasEntitiesBase, global::System.String>
		{
			private SummaryPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the EntityHasEntities.Summary domain property value handler.
			/// </summary>
			public static readonly SummaryPropertyHandler Instance = new SummaryPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the EntityHasEntities.Summary domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return SummaryDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(EntityHasEntitiesBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.Summary;
				//return element.GetValue<global::System.String>("Summary", element.summaryPropertyStorage);
				//return element.summaryPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(EntityHasEntitiesBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.summaryPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("EntityHasEntities"));
				}
			}
		}
		
		#endregion
		#region ImportedConstraintName domain property code
		
		/// <summary>
		/// ImportedConstraintName domain property Id.
		/// </summary>
		public static readonly global::System.Guid ImportedConstraintNameDomainPropertyId = new global::System.Guid(0x12b5d330, 0x0160, 0x43eb, 0xb1, 0xca, 0x94, 0xf8, 0x47, 0x81, 0xfa, 0x3c);
		
		/// <summary>
		/// Storage for ImportedConstraintName
		/// </summary>
		private global::System.String importedConstraintNamePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of ImportedConstraintName domain property.
		/// The imported database constraint name
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.EntityHasEntities/ImportedConstraintName.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.EntityHasEntities/ImportedConstraintName.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("12b5d330-0160-43eb-b1ca-94f84781fa3c")]
		public virtual global::System.String ImportedConstraintName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return importedConstraintNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ImportedConstraintNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the EntityHasEntities.ImportedConstraintName domain property.
		/// </summary>
		internal sealed partial class ImportedConstraintNamePropertyHandler : DslModeling::DomainPropertyValueHandler<EntityHasEntitiesBase, global::System.String>
		{
			private ImportedConstraintNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the EntityHasEntities.ImportedConstraintName domain property value handler.
			/// </summary>
			public static readonly ImportedConstraintNamePropertyHandler Instance = new ImportedConstraintNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the EntityHasEntities.ImportedConstraintName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ImportedConstraintNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(EntityHasEntitiesBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.ImportedConstraintName;
				//return element.GetValue<global::System.String>("ImportedConstraintName", element.importedConstraintNamePropertyStorage);
				//return element.importedConstraintNamePropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(EntityHasEntitiesBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.importedConstraintNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("EntityHasEntities"));
				}
			}
		}
		
		#endregion
		#region ParentEntity link accessor
		/// <summary>
		/// Get the list of EntityHasEntities links to a Entity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::nHydrate2.Dsl.EntityHasEntities> GetLinksToChildEntities ( global::nHydrate2.Dsl.Entity parentEntityInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate2.Dsl.EntityHasEntities>(parentEntityInstance, global::nHydrate2.Dsl.EntityHasEntities.ParentEntityDomainRoleId);
		}
		#endregion
		#region ChildEntity link accessor
		/// <summary>
		/// Get the list of EntityHasEntities links to a Entity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::nHydrate2.Dsl.EntityHasEntities> GetLinksToParentEntity ( global::nHydrate2.Dsl.Entity childEntityInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate2.Dsl.EntityHasEntities>(childEntityInstance, global::nHydrate2.Dsl.EntityHasEntities.ChildEntityDomainRoleId);
		}
		#endregion
		#region EntityHasEntities instance accessors
		
		/// <summary>
		/// Get any EntityHasEntities links between a given Entity and a Entity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::nHydrate2.Dsl.EntityHasEntities> GetLinks( global::nHydrate2.Dsl.Entity source, global::nHydrate2.Dsl.Entity target )
		{
			global::System.Collections.Generic.List<global::nHydrate2.Dsl.EntityHasEntities> outLinks = new global::System.Collections.Generic.List<global::nHydrate2.Dsl.EntityHasEntities>();
			global::System.Collections.Generic.IList<global::nHydrate2.Dsl.EntityHasEntities> links = DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate2.Dsl.EntityHasEntities>(source, global::nHydrate2.Dsl.EntityHasEntities.ParentEntityDomainRoleId);
			foreach ( global::nHydrate2.Dsl.EntityHasEntities link in links )
			{
				if ( target.Equals(link.ChildEntity) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		#endregion
	}
	/// <summary>
	/// DomainRelationship EntityHasEntities
	/// Association relationship between entities
	/// </summary>
	[global::System.CLSCompliant(true)]
	public partial class EntityHasEntities : EntityHasEntitiesBase
	{
		#region Constructors
		// Constructors were not generated for this relationship because it had HasCustomConstructor
		// set to true. Please provide the constructors below in a partial class.
		//		
		///// <summary>
		///// Constructor
		///// Creates a EntityHasEntities link in the same Partition as the given Entity
		///// </summary>
		///// <param name="source">Entity to use as the source of the relationship.</param>
		///// <param name="target">Entity to use as the target of the relationship.</param>
		//public EntityHasEntities(Entity source, Entity target)
		//	: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(EntityHasEntities.ParentEntityDomainRoleId, source), new DslModeling::RoleAssignment(EntityHasEntities.ChildEntityDomainRoleId, target)}, null)
		//{
		//}
		//
		///// <summary>
		///// Constructor
		///// </summary>
		///// <param name="store">Store where new link is to be created.</param>
		///// <param name="roleAssignments">List of relationship role assignments.</param>
		//public EntityHasEntities(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
		//	: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		//{
		//}
		//
		///// <summary>
		///// Constructor
		///// </summary>
		///// <param name="store">Store where new link is to be created.</param>
		///// <param name="roleAssignments">List of relationship role assignments.</param>
		///// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		//public EntityHasEntities(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
		//	: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		//{
		//}
		//
		///// <summary>
		///// Constructor
		///// </summary>
		///// <param name="partition">Partition where new link is to be created.</param>
		///// <param name="roleAssignments">List of relationship role assignments.</param>
		//public EntityHasEntities(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
		//	: base(partition, roleAssignments, null)
		//{
		//}
		//
		///// <summary>
		///// Constructor
		///// </summary>
		///// <param name="partition">Partition where new link is to be created.</param>
		///// <param name="roleAssignments">List of relationship role assignments.</param>
		///// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		//public EntityHasEntities(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
		//	: base(partition, roleAssignments, propertyAssignments)
		//{
		//}
		#endregion
	}
}
namespace nHydrate2.Dsl
{
	/// <summary>
	/// DomainRelationship EntityHasFields
	/// </summary>
	[DslDesign::DisplayNameResource("nHydrate2.Dsl.EntityHasFields.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("nHydrate2.Dsl.EntityHasFields.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::nHydrate2.Dsl.nHydrate2DomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("a66a58d9-2d27-44e9-8e41-4bc640a0452e")]
	public partial class EntityHasFields : DslModeling::ElementLink, System.ComponentModel.INotifyPropertyChanged
	{
		#region INotifyPropertyChanged
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs e)
		{
			if (this.PropertyChanged != null)
				this.PropertyChanged(this, e);
		}
		#endregion
	
		#region Constructors, domain class Id
		
		/// <summary>
		/// EntityHasFields domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xa66a58d9, 0x2d27, 0x44e9, 0x8e, 0x41, 0x4b, 0xc6, 0x40, 0xa0, 0x45, 0x2e);
	
				
		/// <summary>
		/// Constructor
		/// Creates a EntityHasFields link in the same Partition as the given Entity
		/// </summary>
		/// <param name="source">Entity to use as the source of the relationship.</param>
		/// <param name="target">Field to use as the target of the relationship.</param>
		public EntityHasFields(Entity source, Field target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(EntityHasFields.EntityDomainRoleId, source), new DslModeling::RoleAssignment(EntityHasFields.FieldDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EntityHasFields(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EntityHasFields(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EntityHasFields(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EntityHasFields(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Entity domain role code
		
		/// <summary>
		/// Entity domain role Id.
		/// </summary>
		public static readonly global::System.Guid EntityDomainRoleId = new global::System.Guid(0xcccabbdc, 0x2d1f, 0x4d73, 0xb8, 0x12, 0x7b, 0xf8, 0x8b, 0x24, 0x37, 0x4d);
		
		/// <summary>
		/// DomainRole Entity
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.EntityHasFields/Entity.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.EntityHasFields/Entity.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Fields", PropertyDisplayNameKey="nHydrate2.Dsl.EntityHasFields/Entity.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("cccabbdc-2d1f-4d73-b812-7bf88b24374d")]
		public virtual Entity Entity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Entity)DslModeling::DomainRoleInfo.GetRolePlayer(this, EntityDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, EntityDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Entity of a Field
		/// <summary>
		/// Gets Entity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Entity GetEntity(Field element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, FieldDomainRoleId) as Entity;
		}
		
		/// <summary>
		/// Sets Entity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetEntity(Field element, Entity newEntity)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, FieldDomainRoleId, newEntity);
		}
		#endregion
		#region Field domain role code
		
		/// <summary>
		/// Field domain role Id.
		/// </summary>
		public static readonly global::System.Guid FieldDomainRoleId = new global::System.Guid(0xf276b3f4, 0xbdf3, 0x42e2, 0xad, 0x29, 0xf6, 0x77, 0x4b, 0x6e, 0x3f, 0x25);
		
		/// <summary>
		/// DomainRole Field
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.EntityHasFields/Field.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.EntityHasFields/Field.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Entity", PropertyDisplayNameKey="nHydrate2.Dsl.EntityHasFields/Field.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("f276b3f4-bdf3-42e2-ad29-f6774b6e3f25")]
		public virtual Field Field
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Field)DslModeling::DomainRoleInfo.GetRolePlayer(this, FieldDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, FieldDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Fields of a Entity
		/// <summary>
		/// Gets a list of Fields.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Field> GetFields(Entity element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Field>, Field>(element, EntityDomainRoleId);
		}
		#endregion
		#region Entity link accessor
		/// <summary>
		/// Get the list of EntityHasFields links to a Entity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::nHydrate2.Dsl.EntityHasFields> GetLinksToFields ( global::nHydrate2.Dsl.Entity entityInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate2.Dsl.EntityHasFields>(entityInstance, global::nHydrate2.Dsl.EntityHasFields.EntityDomainRoleId);
		}
		#endregion
		#region Field link accessor
		/// <summary>
		/// Get the EntityHasFields link to a Field.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::nHydrate2.Dsl.EntityHasFields GetLinkToEntity (global::nHydrate2.Dsl.Field fieldInstance)
		{
			global::System.Collections.Generic.IList<global::nHydrate2.Dsl.EntityHasFields> links = DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate2.Dsl.EntityHasFields>(fieldInstance, global::nHydrate2.Dsl.EntityHasFields.FieldDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Field not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region EntityHasFields instance accessors
		
		/// <summary>
		/// Get any EntityHasFields links between a given Entity and a Field.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::nHydrate2.Dsl.EntityHasFields> GetLinks( global::nHydrate2.Dsl.Entity source, global::nHydrate2.Dsl.Field target )
		{
			global::System.Collections.Generic.List<global::nHydrate2.Dsl.EntityHasFields> outLinks = new global::System.Collections.Generic.List<global::nHydrate2.Dsl.EntityHasFields>();
			global::System.Collections.Generic.IList<global::nHydrate2.Dsl.EntityHasFields> links = DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate2.Dsl.EntityHasFields>(source, global::nHydrate2.Dsl.EntityHasFields.EntityDomainRoleId);
			foreach ( global::nHydrate2.Dsl.EntityHasFields link in links )
			{
				if ( target.Equals(link.Field) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one EntityHasFields link between a given Entityand a Field.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::nHydrate2.Dsl.EntityHasFields GetLink( global::nHydrate2.Dsl.Entity source, global::nHydrate2.Dsl.Field target )
		{
			global::System.Collections.Generic.IList<global::nHydrate2.Dsl.EntityHasFields> links = DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate2.Dsl.EntityHasFields>(source, global::nHydrate2.Dsl.EntityHasFields.EntityDomainRoleId);
			foreach ( global::nHydrate2.Dsl.EntityHasFields link in links )
			{
				if ( target.Equals(link.Field) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace nHydrate2.Dsl
{
	/// <summary>
	/// DomainRelationship nHydrateModelHasStoredProcedures
	/// </summary>
	[DslDesign::DisplayNameResource("nHydrate2.Dsl.nHydrateModelHasStoredProcedures.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("nHydrate2.Dsl.nHydrateModelHasStoredProcedures.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::nHydrate2.Dsl.nHydrate2DomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("e17b4278-be93-4c91-a2ea-be5c39700492")]
	public partial class nHydrateModelHasStoredProcedures : DslModeling::ElementLink, System.ComponentModel.INotifyPropertyChanged
	{
		#region INotifyPropertyChanged
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs e)
		{
			if (this.PropertyChanged != null)
				this.PropertyChanged(this, e);
		}
		#endregion
	
		#region Constructors, domain class Id
		
		/// <summary>
		/// nHydrateModelHasStoredProcedures domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xe17b4278, 0xbe93, 0x4c91, 0xa2, 0xea, 0xbe, 0x5c, 0x39, 0x70, 0x04, 0x92);
	
				
		/// <summary>
		/// Constructor
		/// Creates a nHydrateModelHasStoredProcedures link in the same Partition as the given nHydrateModel
		/// </summary>
		/// <param name="source">nHydrateModel to use as the source of the relationship.</param>
		/// <param name="target">StoredProcedure to use as the target of the relationship.</param>
		public nHydrateModelHasStoredProcedures(nHydrateModel source, StoredProcedure target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(nHydrateModelHasStoredProcedures.nHydrateModelDomainRoleId, source), new DslModeling::RoleAssignment(nHydrateModelHasStoredProcedures.StoredProcedureDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public nHydrateModelHasStoredProcedures(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public nHydrateModelHasStoredProcedures(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public nHydrateModelHasStoredProcedures(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public nHydrateModelHasStoredProcedures(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region nHydrateModel domain role code
		
		/// <summary>
		/// nHydrateModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid nHydrateModelDomainRoleId = new global::System.Guid(0xa751f422, 0x3d3f, 0x4480, 0x8f, 0x7b, 0xbe, 0x44, 0x54, 0xdf, 0x83, 0xd3);
		
		/// <summary>
		/// DomainRole nHydrateModel
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.nHydrateModelHasStoredProcedures/nHydrateModel.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.nHydrateModelHasStoredProcedures/nHydrateModel.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "StoredProcedures", PropertyDisplayNameKey="nHydrate2.Dsl.nHydrateModelHasStoredProcedures/nHydrateModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("a751f422-3d3f-4480-8f7b-be4454df83d3")]
		public virtual nHydrateModel nHydrateModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (nHydrateModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, nHydrateModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, nHydrateModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access nHydrateModel of a StoredProcedure
		/// <summary>
		/// Gets nHydrateModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static nHydrateModel GetnHydrateModel(StoredProcedure element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, StoredProcedureDomainRoleId) as nHydrateModel;
		}
		
		/// <summary>
		/// Sets nHydrateModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetnHydrateModel(StoredProcedure element, nHydrateModel newnHydrateModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, StoredProcedureDomainRoleId, newnHydrateModel);
		}
		#endregion
		#region StoredProcedure domain role code
		
		/// <summary>
		/// StoredProcedure domain role Id.
		/// </summary>
		public static readonly global::System.Guid StoredProcedureDomainRoleId = new global::System.Guid(0xbc83dec7, 0xcfbe, 0x4bb9, 0x9e, 0x42, 0x12, 0x8e, 0xfd, 0x1e, 0x2e, 0x5e);
		
		/// <summary>
		/// DomainRole StoredProcedure
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.nHydrateModelHasStoredProcedures/StoredProcedure.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.nHydrateModelHasStoredProcedures/StoredProcedure.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "nHydrateModel", PropertyDisplayNameKey="nHydrate2.Dsl.nHydrateModelHasStoredProcedures/StoredProcedure.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("bc83dec7-cfbe-4bb9-9e42-128efd1e2e5e")]
		public virtual StoredProcedure StoredProcedure
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (StoredProcedure)DslModeling::DomainRoleInfo.GetRolePlayer(this, StoredProcedureDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, StoredProcedureDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access StoredProcedures of a nHydrateModel
		/// <summary>
		/// Gets a list of StoredProcedures.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<StoredProcedure> GetStoredProcedures(nHydrateModel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<StoredProcedure>, StoredProcedure>(element, nHydrateModelDomainRoleId);
		}
		#endregion
		#region nHydrateModel link accessor
		/// <summary>
		/// Get the list of nHydrateModelHasStoredProcedures links to a nHydrateModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::nHydrate2.Dsl.nHydrateModelHasStoredProcedures> GetLinksToStoredProcedures ( global::nHydrate2.Dsl.nHydrateModel nHydrateModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate2.Dsl.nHydrateModelHasStoredProcedures>(nHydrateModelInstance, global::nHydrate2.Dsl.nHydrateModelHasStoredProcedures.nHydrateModelDomainRoleId);
		}
		#endregion
		#region StoredProcedure link accessor
		/// <summary>
		/// Get the nHydrateModelHasStoredProcedures link to a StoredProcedure.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::nHydrate2.Dsl.nHydrateModelHasStoredProcedures GetLinkTonHydrateModel (global::nHydrate2.Dsl.StoredProcedure storedProcedureInstance)
		{
			global::System.Collections.Generic.IList<global::nHydrate2.Dsl.nHydrateModelHasStoredProcedures> links = DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate2.Dsl.nHydrateModelHasStoredProcedures>(storedProcedureInstance, global::nHydrate2.Dsl.nHydrateModelHasStoredProcedures.StoredProcedureDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of StoredProcedure not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region nHydrateModelHasStoredProcedures instance accessors
		
		/// <summary>
		/// Get any nHydrateModelHasStoredProcedures links between a given nHydrateModel and a StoredProcedure.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::nHydrate2.Dsl.nHydrateModelHasStoredProcedures> GetLinks( global::nHydrate2.Dsl.nHydrateModel source, global::nHydrate2.Dsl.StoredProcedure target )
		{
			global::System.Collections.Generic.List<global::nHydrate2.Dsl.nHydrateModelHasStoredProcedures> outLinks = new global::System.Collections.Generic.List<global::nHydrate2.Dsl.nHydrateModelHasStoredProcedures>();
			global::System.Collections.Generic.IList<global::nHydrate2.Dsl.nHydrateModelHasStoredProcedures> links = DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate2.Dsl.nHydrateModelHasStoredProcedures>(source, global::nHydrate2.Dsl.nHydrateModelHasStoredProcedures.nHydrateModelDomainRoleId);
			foreach ( global::nHydrate2.Dsl.nHydrateModelHasStoredProcedures link in links )
			{
				if ( target.Equals(link.StoredProcedure) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one nHydrateModelHasStoredProcedures link between a given nHydrateModeland a StoredProcedure.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::nHydrate2.Dsl.nHydrateModelHasStoredProcedures GetLink( global::nHydrate2.Dsl.nHydrateModel source, global::nHydrate2.Dsl.StoredProcedure target )
		{
			global::System.Collections.Generic.IList<global::nHydrate2.Dsl.nHydrateModelHasStoredProcedures> links = DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate2.Dsl.nHydrateModelHasStoredProcedures>(source, global::nHydrate2.Dsl.nHydrateModelHasStoredProcedures.nHydrateModelDomainRoleId);
			foreach ( global::nHydrate2.Dsl.nHydrateModelHasStoredProcedures link in links )
			{
				if ( target.Equals(link.StoredProcedure) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace nHydrate2.Dsl
{
	/// <summary>
	/// DomainRelationship StoredProcedureHasFields
	/// </summary>
	[DslDesign::DisplayNameResource("nHydrate2.Dsl.StoredProcedureHasFields.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("nHydrate2.Dsl.StoredProcedureHasFields.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::nHydrate2.Dsl.nHydrate2DomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("4870cc73-c360-4c7c-9b2d-976e53f54dd7")]
	public partial class StoredProcedureHasFields : DslModeling::ElementLink, System.ComponentModel.INotifyPropertyChanged
	{
		#region INotifyPropertyChanged
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs e)
		{
			if (this.PropertyChanged != null)
				this.PropertyChanged(this, e);
		}
		#endregion
	
		#region Constructors, domain class Id
		
		/// <summary>
		/// StoredProcedureHasFields domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x4870cc73, 0xc360, 0x4c7c, 0x9b, 0x2d, 0x97, 0x6e, 0x53, 0xf5, 0x4d, 0xd7);
	
				
		/// <summary>
		/// Constructor
		/// Creates a StoredProcedureHasFields link in the same Partition as the given StoredProcedure
		/// </summary>
		/// <param name="source">StoredProcedure to use as the source of the relationship.</param>
		/// <param name="target">StoredProcedureField to use as the target of the relationship.</param>
		public StoredProcedureHasFields(StoredProcedure source, StoredProcedureField target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(StoredProcedureHasFields.StoredProcedureDomainRoleId, source), new DslModeling::RoleAssignment(StoredProcedureHasFields.StoredProcedureFieldDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public StoredProcedureHasFields(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public StoredProcedureHasFields(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public StoredProcedureHasFields(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public StoredProcedureHasFields(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region StoredProcedure domain role code
		
		/// <summary>
		/// StoredProcedure domain role Id.
		/// </summary>
		public static readonly global::System.Guid StoredProcedureDomainRoleId = new global::System.Guid(0xbdc7cdb9, 0xa588, 0x4e38, 0x84, 0x98, 0x35, 0xf3, 0x3c, 0x62, 0x25, 0xa8);
		
		/// <summary>
		/// DomainRole StoredProcedure
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.StoredProcedureHasFields/StoredProcedure.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.StoredProcedureHasFields/StoredProcedure.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Fields", PropertyDisplayNameKey="nHydrate2.Dsl.StoredProcedureHasFields/StoredProcedure.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("bdc7cdb9-a588-4e38-8498-35f33c6225a8")]
		public virtual StoredProcedure StoredProcedure
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (StoredProcedure)DslModeling::DomainRoleInfo.GetRolePlayer(this, StoredProcedureDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, StoredProcedureDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access StoredProcedure of a StoredProcedureField
		/// <summary>
		/// Gets StoredProcedure.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static StoredProcedure GetStoredProcedure(StoredProcedureField element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, StoredProcedureFieldDomainRoleId) as StoredProcedure;
		}
		
		/// <summary>
		/// Sets StoredProcedure.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetStoredProcedure(StoredProcedureField element, StoredProcedure newStoredProcedure)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, StoredProcedureFieldDomainRoleId, newStoredProcedure);
		}
		#endregion
		#region StoredProcedureField domain role code
		
		/// <summary>
		/// StoredProcedureField domain role Id.
		/// </summary>
		public static readonly global::System.Guid StoredProcedureFieldDomainRoleId = new global::System.Guid(0x4e93d360, 0xbe4b, 0x4996, 0xbf, 0xf4, 0x14, 0x93, 0xc4, 0x1c, 0x94, 0xd0);
		
		/// <summary>
		/// DomainRole StoredProcedureField
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.StoredProcedureHasFields/StoredProcedureField.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.StoredProcedureHasFields/StoredProcedureField.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "StoredProcedure", PropertyDisplayNameKey="nHydrate2.Dsl.StoredProcedureHasFields/StoredProcedureField.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("4e93d360-be4b-4996-bff4-1493c41c94d0")]
		public virtual StoredProcedureField StoredProcedureField
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (StoredProcedureField)DslModeling::DomainRoleInfo.GetRolePlayer(this, StoredProcedureFieldDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, StoredProcedureFieldDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Fields of a StoredProcedure
		/// <summary>
		/// Gets a list of Fields.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<StoredProcedureField> GetFields(StoredProcedure element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<StoredProcedureField>, StoredProcedureField>(element, StoredProcedureDomainRoleId);
		}
		#endregion
		#region StoredProcedure link accessor
		/// <summary>
		/// Get the list of StoredProcedureHasFields links to a StoredProcedure.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::nHydrate2.Dsl.StoredProcedureHasFields> GetLinksToFields ( global::nHydrate2.Dsl.StoredProcedure storedProcedureInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate2.Dsl.StoredProcedureHasFields>(storedProcedureInstance, global::nHydrate2.Dsl.StoredProcedureHasFields.StoredProcedureDomainRoleId);
		}
		#endregion
		#region StoredProcedureField link accessor
		/// <summary>
		/// Get the StoredProcedureHasFields link to a StoredProcedureField.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::nHydrate2.Dsl.StoredProcedureHasFields GetLinkToStoredProcedure (global::nHydrate2.Dsl.StoredProcedureField storedProcedureFieldInstance)
		{
			global::System.Collections.Generic.IList<global::nHydrate2.Dsl.StoredProcedureHasFields> links = DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate2.Dsl.StoredProcedureHasFields>(storedProcedureFieldInstance, global::nHydrate2.Dsl.StoredProcedureHasFields.StoredProcedureFieldDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of StoredProcedureField not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region StoredProcedureHasFields instance accessors
		
		/// <summary>
		/// Get any StoredProcedureHasFields links between a given StoredProcedure and a StoredProcedureField.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::nHydrate2.Dsl.StoredProcedureHasFields> GetLinks( global::nHydrate2.Dsl.StoredProcedure source, global::nHydrate2.Dsl.StoredProcedureField target )
		{
			global::System.Collections.Generic.List<global::nHydrate2.Dsl.StoredProcedureHasFields> outLinks = new global::System.Collections.Generic.List<global::nHydrate2.Dsl.StoredProcedureHasFields>();
			global::System.Collections.Generic.IList<global::nHydrate2.Dsl.StoredProcedureHasFields> links = DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate2.Dsl.StoredProcedureHasFields>(source, global::nHydrate2.Dsl.StoredProcedureHasFields.StoredProcedureDomainRoleId);
			foreach ( global::nHydrate2.Dsl.StoredProcedureHasFields link in links )
			{
				if ( target.Equals(link.StoredProcedureField) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one StoredProcedureHasFields link between a given StoredProcedureand a StoredProcedureField.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::nHydrate2.Dsl.StoredProcedureHasFields GetLink( global::nHydrate2.Dsl.StoredProcedure source, global::nHydrate2.Dsl.StoredProcedureField target )
		{
			global::System.Collections.Generic.IList<global::nHydrate2.Dsl.StoredProcedureHasFields> links = DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate2.Dsl.StoredProcedureHasFields>(source, global::nHydrate2.Dsl.StoredProcedureHasFields.StoredProcedureDomainRoleId);
			foreach ( global::nHydrate2.Dsl.StoredProcedureHasFields link in links )
			{
				if ( target.Equals(link.StoredProcedureField) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace nHydrate2.Dsl
{
	/// <summary>
	/// DomainRelationship StoredProcedureHasParameters
	/// </summary>
	[DslDesign::DisplayNameResource("nHydrate2.Dsl.StoredProcedureHasParameters.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("nHydrate2.Dsl.StoredProcedureHasParameters.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::nHydrate2.Dsl.nHydrate2DomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("4fdc3e26-1253-4cea-89c5-cc6078cbfb7e")]
	public partial class StoredProcedureHasParameters : DslModeling::ElementLink, System.ComponentModel.INotifyPropertyChanged
	{
		#region INotifyPropertyChanged
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs e)
		{
			if (this.PropertyChanged != null)
				this.PropertyChanged(this, e);
		}
		#endregion
	
		#region Constructors, domain class Id
		
		/// <summary>
		/// StoredProcedureHasParameters domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x4fdc3e26, 0x1253, 0x4cea, 0x89, 0xc5, 0xcc, 0x60, 0x78, 0xcb, 0xfb, 0x7e);
	
				
		/// <summary>
		/// Constructor
		/// Creates a StoredProcedureHasParameters link in the same Partition as the given StoredProcedure
		/// </summary>
		/// <param name="source">StoredProcedure to use as the source of the relationship.</param>
		/// <param name="target">StoredProcedureParameter to use as the target of the relationship.</param>
		public StoredProcedureHasParameters(StoredProcedure source, StoredProcedureParameter target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(StoredProcedureHasParameters.StoredProcedureDomainRoleId, source), new DslModeling::RoleAssignment(StoredProcedureHasParameters.StoredProcedureParameterDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public StoredProcedureHasParameters(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public StoredProcedureHasParameters(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public StoredProcedureHasParameters(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public StoredProcedureHasParameters(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region StoredProcedure domain role code
		
		/// <summary>
		/// StoredProcedure domain role Id.
		/// </summary>
		public static readonly global::System.Guid StoredProcedureDomainRoleId = new global::System.Guid(0x021e0136, 0x6b0e, 0x4617, 0x83, 0x08, 0xfa, 0x63, 0xd6, 0x6c, 0x8f, 0xf7);
		
		/// <summary>
		/// DomainRole StoredProcedure
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.StoredProcedureHasParameters/StoredProcedure.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.StoredProcedureHasParameters/StoredProcedure.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Parameters", PropertyDisplayNameKey="nHydrate2.Dsl.StoredProcedureHasParameters/StoredProcedure.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("021e0136-6b0e-4617-8308-fa63d66c8ff7")]
		public virtual StoredProcedure StoredProcedure
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (StoredProcedure)DslModeling::DomainRoleInfo.GetRolePlayer(this, StoredProcedureDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, StoredProcedureDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access StoredProcedure of a StoredProcedureParameter
		/// <summary>
		/// Gets StoredProcedure.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static StoredProcedure GetStoredProcedure(StoredProcedureParameter element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, StoredProcedureParameterDomainRoleId) as StoredProcedure;
		}
		
		/// <summary>
		/// Sets StoredProcedure.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetStoredProcedure(StoredProcedureParameter element, StoredProcedure newStoredProcedure)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, StoredProcedureParameterDomainRoleId, newStoredProcedure);
		}
		#endregion
		#region StoredProcedureParameter domain role code
		
		/// <summary>
		/// StoredProcedureParameter domain role Id.
		/// </summary>
		public static readonly global::System.Guid StoredProcedureParameterDomainRoleId = new global::System.Guid(0xd63e25f5, 0xce95, 0x4369, 0xbc, 0xd9, 0x95, 0x43, 0x62, 0xb9, 0x28, 0x3f);
		
		/// <summary>
		/// DomainRole StoredProcedureParameter
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.StoredProcedureHasParameters/StoredProcedureParameter.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.StoredProcedureHasParameters/StoredProcedureParameter.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "StoredProcedure", PropertyDisplayNameKey="nHydrate2.Dsl.StoredProcedureHasParameters/StoredProcedureParameter.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("d63e25f5-ce95-4369-bcd9-954362b9283f")]
		public virtual StoredProcedureParameter StoredProcedureParameter
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (StoredProcedureParameter)DslModeling::DomainRoleInfo.GetRolePlayer(this, StoredProcedureParameterDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, StoredProcedureParameterDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Parameters of a StoredProcedure
		/// <summary>
		/// Gets a list of Parameters.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<StoredProcedureParameter> GetParameters(StoredProcedure element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<StoredProcedureParameter>, StoredProcedureParameter>(element, StoredProcedureDomainRoleId);
		}
		#endregion
		#region StoredProcedure link accessor
		/// <summary>
		/// Get the list of StoredProcedureHasParameters links to a StoredProcedure.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::nHydrate2.Dsl.StoredProcedureHasParameters> GetLinksToParameters ( global::nHydrate2.Dsl.StoredProcedure storedProcedureInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate2.Dsl.StoredProcedureHasParameters>(storedProcedureInstance, global::nHydrate2.Dsl.StoredProcedureHasParameters.StoredProcedureDomainRoleId);
		}
		#endregion
		#region StoredProcedureParameter link accessor
		/// <summary>
		/// Get the StoredProcedureHasParameters link to a StoredProcedureParameter.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::nHydrate2.Dsl.StoredProcedureHasParameters GetLinkToStoredProcedure (global::nHydrate2.Dsl.StoredProcedureParameter storedProcedureParameterInstance)
		{
			global::System.Collections.Generic.IList<global::nHydrate2.Dsl.StoredProcedureHasParameters> links = DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate2.Dsl.StoredProcedureHasParameters>(storedProcedureParameterInstance, global::nHydrate2.Dsl.StoredProcedureHasParameters.StoredProcedureParameterDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of StoredProcedureParameter not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region StoredProcedureHasParameters instance accessors
		
		/// <summary>
		/// Get any StoredProcedureHasParameters links between a given StoredProcedure and a StoredProcedureParameter.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::nHydrate2.Dsl.StoredProcedureHasParameters> GetLinks( global::nHydrate2.Dsl.StoredProcedure source, global::nHydrate2.Dsl.StoredProcedureParameter target )
		{
			global::System.Collections.Generic.List<global::nHydrate2.Dsl.StoredProcedureHasParameters> outLinks = new global::System.Collections.Generic.List<global::nHydrate2.Dsl.StoredProcedureHasParameters>();
			global::System.Collections.Generic.IList<global::nHydrate2.Dsl.StoredProcedureHasParameters> links = DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate2.Dsl.StoredProcedureHasParameters>(source, global::nHydrate2.Dsl.StoredProcedureHasParameters.StoredProcedureDomainRoleId);
			foreach ( global::nHydrate2.Dsl.StoredProcedureHasParameters link in links )
			{
				if ( target.Equals(link.StoredProcedureParameter) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one StoredProcedureHasParameters link between a given StoredProcedureand a StoredProcedureParameter.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::nHydrate2.Dsl.StoredProcedureHasParameters GetLink( global::nHydrate2.Dsl.StoredProcedure source, global::nHydrate2.Dsl.StoredProcedureParameter target )
		{
			global::System.Collections.Generic.IList<global::nHydrate2.Dsl.StoredProcedureHasParameters> links = DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate2.Dsl.StoredProcedureHasParameters>(source, global::nHydrate2.Dsl.StoredProcedureHasParameters.StoredProcedureDomainRoleId);
			foreach ( global::nHydrate2.Dsl.StoredProcedureHasParameters link in links )
			{
				if ( target.Equals(link.StoredProcedureParameter) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace nHydrate2.Dsl
{
	/// <summary>
	/// DomainRelationship nHydrateModelHasViews
	/// </summary>
	[DslDesign::DisplayNameResource("nHydrate2.Dsl.nHydrateModelHasViews.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("nHydrate2.Dsl.nHydrateModelHasViews.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::nHydrate2.Dsl.nHydrate2DomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("4d1b0533-9248-40f1-aadc-09d8af388a29")]
	public partial class nHydrateModelHasViews : DslModeling::ElementLink, System.ComponentModel.INotifyPropertyChanged
	{
		#region INotifyPropertyChanged
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs e)
		{
			if (this.PropertyChanged != null)
				this.PropertyChanged(this, e);
		}
		#endregion
	
		#region Constructors, domain class Id
		
		/// <summary>
		/// nHydrateModelHasViews domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x4d1b0533, 0x9248, 0x40f1, 0xaa, 0xdc, 0x09, 0xd8, 0xaf, 0x38, 0x8a, 0x29);
	
				
		/// <summary>
		/// Constructor
		/// Creates a nHydrateModelHasViews link in the same Partition as the given nHydrateModel
		/// </summary>
		/// <param name="source">nHydrateModel to use as the source of the relationship.</param>
		/// <param name="target">View to use as the target of the relationship.</param>
		public nHydrateModelHasViews(nHydrateModel source, View target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(nHydrateModelHasViews.nHydrateModelDomainRoleId, source), new DslModeling::RoleAssignment(nHydrateModelHasViews.ViewDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public nHydrateModelHasViews(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public nHydrateModelHasViews(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public nHydrateModelHasViews(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public nHydrateModelHasViews(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region nHydrateModel domain role code
		
		/// <summary>
		/// nHydrateModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid nHydrateModelDomainRoleId = new global::System.Guid(0xe99ffbdf, 0xda6c, 0x46a3, 0xab, 0x93, 0xf0, 0x2a, 0xc9, 0x01, 0x8d, 0x5c);
		
		/// <summary>
		/// DomainRole nHydrateModel
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.nHydrateModelHasViews/nHydrateModel.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.nHydrateModelHasViews/nHydrateModel.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Views", PropertyDisplayNameKey="nHydrate2.Dsl.nHydrateModelHasViews/nHydrateModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("e99ffbdf-da6c-46a3-ab93-f02ac9018d5c")]
		public virtual nHydrateModel nHydrateModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (nHydrateModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, nHydrateModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, nHydrateModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access nHydrateModel of a View
		/// <summary>
		/// Gets nHydrateModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static nHydrateModel GetnHydrateModel(View element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ViewDomainRoleId) as nHydrateModel;
		}
		
		/// <summary>
		/// Sets nHydrateModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetnHydrateModel(View element, nHydrateModel newnHydrateModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ViewDomainRoleId, newnHydrateModel);
		}
		#endregion
		#region View domain role code
		
		/// <summary>
		/// View domain role Id.
		/// </summary>
		public static readonly global::System.Guid ViewDomainRoleId = new global::System.Guid(0xb16fb4a4, 0x410e, 0x4d49, 0xbc, 0xea, 0x08, 0x80, 0xea, 0xe5, 0xfb, 0xa0);
		
		/// <summary>
		/// DomainRole View
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.nHydrateModelHasViews/View.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.nHydrateModelHasViews/View.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "nHydrateModel", PropertyDisplayNameKey="nHydrate2.Dsl.nHydrateModelHasViews/View.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("b16fb4a4-410e-4d49-bcea-0880eae5fba0")]
		public virtual View View
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (View)DslModeling::DomainRoleInfo.GetRolePlayer(this, ViewDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ViewDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Views of a nHydrateModel
		/// <summary>
		/// Gets a list of Views.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<View> GetViews(nHydrateModel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<View>, View>(element, nHydrateModelDomainRoleId);
		}
		#endregion
		#region nHydrateModel link accessor
		/// <summary>
		/// Get the list of nHydrateModelHasViews links to a nHydrateModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::nHydrate2.Dsl.nHydrateModelHasViews> GetLinksToViews ( global::nHydrate2.Dsl.nHydrateModel nHydrateModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate2.Dsl.nHydrateModelHasViews>(nHydrateModelInstance, global::nHydrate2.Dsl.nHydrateModelHasViews.nHydrateModelDomainRoleId);
		}
		#endregion
		#region View link accessor
		/// <summary>
		/// Get the nHydrateModelHasViews link to a View.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::nHydrate2.Dsl.nHydrateModelHasViews GetLinkTonHydrateModel (global::nHydrate2.Dsl.View viewInstance)
		{
			global::System.Collections.Generic.IList<global::nHydrate2.Dsl.nHydrateModelHasViews> links = DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate2.Dsl.nHydrateModelHasViews>(viewInstance, global::nHydrate2.Dsl.nHydrateModelHasViews.ViewDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of View not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region nHydrateModelHasViews instance accessors
		
		/// <summary>
		/// Get any nHydrateModelHasViews links between a given nHydrateModel and a View.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::nHydrate2.Dsl.nHydrateModelHasViews> GetLinks( global::nHydrate2.Dsl.nHydrateModel source, global::nHydrate2.Dsl.View target )
		{
			global::System.Collections.Generic.List<global::nHydrate2.Dsl.nHydrateModelHasViews> outLinks = new global::System.Collections.Generic.List<global::nHydrate2.Dsl.nHydrateModelHasViews>();
			global::System.Collections.Generic.IList<global::nHydrate2.Dsl.nHydrateModelHasViews> links = DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate2.Dsl.nHydrateModelHasViews>(source, global::nHydrate2.Dsl.nHydrateModelHasViews.nHydrateModelDomainRoleId);
			foreach ( global::nHydrate2.Dsl.nHydrateModelHasViews link in links )
			{
				if ( target.Equals(link.View) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one nHydrateModelHasViews link between a given nHydrateModeland a View.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::nHydrate2.Dsl.nHydrateModelHasViews GetLink( global::nHydrate2.Dsl.nHydrateModel source, global::nHydrate2.Dsl.View target )
		{
			global::System.Collections.Generic.IList<global::nHydrate2.Dsl.nHydrateModelHasViews> links = DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate2.Dsl.nHydrateModelHasViews>(source, global::nHydrate2.Dsl.nHydrateModelHasViews.nHydrateModelDomainRoleId);
			foreach ( global::nHydrate2.Dsl.nHydrateModelHasViews link in links )
			{
				if ( target.Equals(link.View) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace nHydrate2.Dsl
{
	/// <summary>
	/// DomainRelationship ViewHasFields
	/// </summary>
	[DslDesign::DisplayNameResource("nHydrate2.Dsl.ViewHasFields.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("nHydrate2.Dsl.ViewHasFields.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::nHydrate2.Dsl.nHydrate2DomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("d33ecf57-1d21-4b06-8b2b-9e9d686e2be2")]
	public partial class ViewHasFields : DslModeling::ElementLink, System.ComponentModel.INotifyPropertyChanged
	{
		#region INotifyPropertyChanged
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs e)
		{
			if (this.PropertyChanged != null)
				this.PropertyChanged(this, e);
		}
		#endregion
	
		#region Constructors, domain class Id
		
		/// <summary>
		/// ViewHasFields domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xd33ecf57, 0x1d21, 0x4b06, 0x8b, 0x2b, 0x9e, 0x9d, 0x68, 0x6e, 0x2b, 0xe2);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ViewHasFields link in the same Partition as the given View
		/// </summary>
		/// <param name="source">View to use as the source of the relationship.</param>
		/// <param name="target">ViewField to use as the target of the relationship.</param>
		public ViewHasFields(View source, ViewField target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ViewHasFields.ViewDomainRoleId, source), new DslModeling::RoleAssignment(ViewHasFields.ViewFieldDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ViewHasFields(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ViewHasFields(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ViewHasFields(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ViewHasFields(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region View domain role code
		
		/// <summary>
		/// View domain role Id.
		/// </summary>
		public static readonly global::System.Guid ViewDomainRoleId = new global::System.Guid(0x5788dafc, 0x4131, 0x4e61, 0xba, 0xbf, 0xc9, 0x13, 0x04, 0x79, 0xfd, 0xc7);
		
		/// <summary>
		/// DomainRole View
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.ViewHasFields/View.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.ViewHasFields/View.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Fields", PropertyDisplayNameKey="nHydrate2.Dsl.ViewHasFields/View.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("5788dafc-4131-4e61-babf-c9130479fdc7")]
		public virtual View View
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (View)DslModeling::DomainRoleInfo.GetRolePlayer(this, ViewDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ViewDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access View of a ViewField
		/// <summary>
		/// Gets View.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static View GetView(ViewField element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ViewFieldDomainRoleId) as View;
		}
		
		/// <summary>
		/// Sets View.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetView(ViewField element, View newView)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ViewFieldDomainRoleId, newView);
		}
		#endregion
		#region ViewField domain role code
		
		/// <summary>
		/// ViewField domain role Id.
		/// </summary>
		public static readonly global::System.Guid ViewFieldDomainRoleId = new global::System.Guid(0x133d0662, 0x8715, 0x4686, 0x83, 0x2e, 0x84, 0x73, 0x9f, 0x6d, 0x91, 0x8a);
		
		/// <summary>
		/// DomainRole ViewField
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.ViewHasFields/ViewField.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.ViewHasFields/ViewField.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "View", PropertyDisplayNameKey="nHydrate2.Dsl.ViewHasFields/ViewField.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("133d0662-8715-4686-832e-84739f6d918a")]
		public virtual ViewField ViewField
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ViewField)DslModeling::DomainRoleInfo.GetRolePlayer(this, ViewFieldDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ViewFieldDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Fields of a View
		/// <summary>
		/// Gets a list of Fields.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ViewField> GetFields(View element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ViewField>, ViewField>(element, ViewDomainRoleId);
		}
		#endregion
		#region View link accessor
		/// <summary>
		/// Get the list of ViewHasFields links to a View.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::nHydrate2.Dsl.ViewHasFields> GetLinksToFields ( global::nHydrate2.Dsl.View viewInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate2.Dsl.ViewHasFields>(viewInstance, global::nHydrate2.Dsl.ViewHasFields.ViewDomainRoleId);
		}
		#endregion
		#region ViewField link accessor
		/// <summary>
		/// Get the ViewHasFields link to a ViewField.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::nHydrate2.Dsl.ViewHasFields GetLinkToView (global::nHydrate2.Dsl.ViewField viewFieldInstance)
		{
			global::System.Collections.Generic.IList<global::nHydrate2.Dsl.ViewHasFields> links = DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate2.Dsl.ViewHasFields>(viewFieldInstance, global::nHydrate2.Dsl.ViewHasFields.ViewFieldDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ViewField not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ViewHasFields instance accessors
		
		/// <summary>
		/// Get any ViewHasFields links between a given View and a ViewField.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::nHydrate2.Dsl.ViewHasFields> GetLinks( global::nHydrate2.Dsl.View source, global::nHydrate2.Dsl.ViewField target )
		{
			global::System.Collections.Generic.List<global::nHydrate2.Dsl.ViewHasFields> outLinks = new global::System.Collections.Generic.List<global::nHydrate2.Dsl.ViewHasFields>();
			global::System.Collections.Generic.IList<global::nHydrate2.Dsl.ViewHasFields> links = DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate2.Dsl.ViewHasFields>(source, global::nHydrate2.Dsl.ViewHasFields.ViewDomainRoleId);
			foreach ( global::nHydrate2.Dsl.ViewHasFields link in links )
			{
				if ( target.Equals(link.ViewField) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ViewHasFields link between a given Viewand a ViewField.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::nHydrate2.Dsl.ViewHasFields GetLink( global::nHydrate2.Dsl.View source, global::nHydrate2.Dsl.ViewField target )
		{
			global::System.Collections.Generic.IList<global::nHydrate2.Dsl.ViewHasFields> links = DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate2.Dsl.ViewHasFields>(source, global::nHydrate2.Dsl.ViewHasFields.ViewDomainRoleId);
			foreach ( global::nHydrate2.Dsl.ViewHasFields link in links )
			{
				if ( target.Equals(link.ViewField) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace nHydrate2.Dsl
{
	/// <summary>
	/// DomainRelationship nHydrateModelHasRelationFields
	/// </summary>
	[DslDesign::DisplayNameResource("nHydrate2.Dsl.nHydrateModelHasRelationFields.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("nHydrate2.Dsl.nHydrateModelHasRelationFields.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::nHydrate2.Dsl.nHydrate2DomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("72b736b5-132f-4d2c-89b6-23b3d3acd5b3")]
	public partial class nHydrateModelHasRelationFields : DslModeling::ElementLink, System.ComponentModel.INotifyPropertyChanged
	{
		#region INotifyPropertyChanged
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs e)
		{
			if (this.PropertyChanged != null)
				this.PropertyChanged(this, e);
		}
		#endregion
	
		#region Constructors, domain class Id
		
		/// <summary>
		/// nHydrateModelHasRelationFields domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x72b736b5, 0x132f, 0x4d2c, 0x89, 0xb6, 0x23, 0xb3, 0xd3, 0xac, 0xd5, 0xb3);
	
				
		/// <summary>
		/// Constructor
		/// Creates a nHydrateModelHasRelationFields link in the same Partition as the given nHydrateModel
		/// </summary>
		/// <param name="source">nHydrateModel to use as the source of the relationship.</param>
		/// <param name="target">RelationField to use as the target of the relationship.</param>
		public nHydrateModelHasRelationFields(nHydrateModel source, RelationField target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(nHydrateModelHasRelationFields.nHydrateModelDomainRoleId, source), new DslModeling::RoleAssignment(nHydrateModelHasRelationFields.RelationFieldDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public nHydrateModelHasRelationFields(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public nHydrateModelHasRelationFields(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public nHydrateModelHasRelationFields(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public nHydrateModelHasRelationFields(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region nHydrateModel domain role code
		
		/// <summary>
		/// nHydrateModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid nHydrateModelDomainRoleId = new global::System.Guid(0x48bbb21d, 0x2233, 0x4bbe, 0xa0, 0xf3, 0x79, 0x79, 0xba, 0x27, 0x12, 0x2d);
		
		/// <summary>
		/// DomainRole nHydrateModel
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.nHydrateModelHasRelationFields/nHydrateModel.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.nHydrateModelHasRelationFields/nHydrateModel.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "RelationFields", PropertyDisplayNameKey="nHydrate2.Dsl.nHydrateModelHasRelationFields/nHydrateModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("48bbb21d-2233-4bbe-a0f3-7979ba27122d")]
		public virtual nHydrateModel nHydrateModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (nHydrateModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, nHydrateModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, nHydrateModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access nHydrateModel of a RelationField
		/// <summary>
		/// Gets nHydrateModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static nHydrateModel GetnHydrateModel(RelationField element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, RelationFieldDomainRoleId) as nHydrateModel;
		}
		
		/// <summary>
		/// Sets nHydrateModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetnHydrateModel(RelationField element, nHydrateModel newnHydrateModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, RelationFieldDomainRoleId, newnHydrateModel);
		}
		#endregion
		#region RelationField domain role code
		
		/// <summary>
		/// RelationField domain role Id.
		/// </summary>
		public static readonly global::System.Guid RelationFieldDomainRoleId = new global::System.Guid(0x74e8ccb4, 0x6cc4, 0x4874, 0x99, 0xbe, 0x1f, 0x93, 0xf1, 0x7e, 0xcd, 0xc1);
		
		/// <summary>
		/// DomainRole RelationField
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.nHydrateModelHasRelationFields/RelationField.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.nHydrateModelHasRelationFields/RelationField.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "nHydrateModel", PropertyDisplayNameKey="nHydrate2.Dsl.nHydrateModelHasRelationFields/RelationField.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("74e8ccb4-6cc4-4874-99be-1f93f17ecdc1")]
		public virtual RelationField RelationField
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (RelationField)DslModeling::DomainRoleInfo.GetRolePlayer(this, RelationFieldDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, RelationFieldDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access RelationFields of a nHydrateModel
		/// <summary>
		/// Gets a list of RelationFields.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<RelationField> GetRelationFields(nHydrateModel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<RelationField>, RelationField>(element, nHydrateModelDomainRoleId);
		}
		#endregion
		#region nHydrateModel link accessor
		/// <summary>
		/// Get the list of nHydrateModelHasRelationFields links to a nHydrateModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::nHydrate2.Dsl.nHydrateModelHasRelationFields> GetLinksToRelationFields ( global::nHydrate2.Dsl.nHydrateModel nHydrateModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate2.Dsl.nHydrateModelHasRelationFields>(nHydrateModelInstance, global::nHydrate2.Dsl.nHydrateModelHasRelationFields.nHydrateModelDomainRoleId);
		}
		#endregion
		#region RelationField link accessor
		/// <summary>
		/// Get the nHydrateModelHasRelationFields link to a RelationField.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::nHydrate2.Dsl.nHydrateModelHasRelationFields GetLinkTonHydrateModel (global::nHydrate2.Dsl.RelationField relationFieldInstance)
		{
			global::System.Collections.Generic.IList<global::nHydrate2.Dsl.nHydrateModelHasRelationFields> links = DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate2.Dsl.nHydrateModelHasRelationFields>(relationFieldInstance, global::nHydrate2.Dsl.nHydrateModelHasRelationFields.RelationFieldDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of RelationField not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region nHydrateModelHasRelationFields instance accessors
		
		/// <summary>
		/// Get any nHydrateModelHasRelationFields links between a given nHydrateModel and a RelationField.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::nHydrate2.Dsl.nHydrateModelHasRelationFields> GetLinks( global::nHydrate2.Dsl.nHydrateModel source, global::nHydrate2.Dsl.RelationField target )
		{
			global::System.Collections.Generic.List<global::nHydrate2.Dsl.nHydrateModelHasRelationFields> outLinks = new global::System.Collections.Generic.List<global::nHydrate2.Dsl.nHydrateModelHasRelationFields>();
			global::System.Collections.Generic.IList<global::nHydrate2.Dsl.nHydrateModelHasRelationFields> links = DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate2.Dsl.nHydrateModelHasRelationFields>(source, global::nHydrate2.Dsl.nHydrateModelHasRelationFields.nHydrateModelDomainRoleId);
			foreach ( global::nHydrate2.Dsl.nHydrateModelHasRelationFields link in links )
			{
				if ( target.Equals(link.RelationField) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one nHydrateModelHasRelationFields link between a given nHydrateModeland a RelationField.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::nHydrate2.Dsl.nHydrateModelHasRelationFields GetLink( global::nHydrate2.Dsl.nHydrateModel source, global::nHydrate2.Dsl.RelationField target )
		{
			global::System.Collections.Generic.IList<global::nHydrate2.Dsl.nHydrateModelHasRelationFields> links = DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate2.Dsl.nHydrateModelHasRelationFields>(source, global::nHydrate2.Dsl.nHydrateModelHasRelationFields.nHydrateModelDomainRoleId);
			foreach ( global::nHydrate2.Dsl.nHydrateModelHasRelationFields link in links )
			{
				if ( target.Equals(link.RelationField) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace nHydrate2.Dsl
{
	/// <summary>
	/// DomainRelationship EntityHasStaticDatum
	/// </summary>
	[DslDesign::DisplayNameResource("nHydrate2.Dsl.EntityHasStaticDatum.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("nHydrate2.Dsl.EntityHasStaticDatum.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::nHydrate2.Dsl.nHydrate2DomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("b1472bb7-1e34-4d07-b001-d36410e89265")]
	public partial class EntityHasStaticDatum : DslModeling::ElementLink, System.ComponentModel.INotifyPropertyChanged
	{
		#region INotifyPropertyChanged
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs e)
		{
			if (this.PropertyChanged != null)
				this.PropertyChanged(this, e);
		}
		#endregion
	
		#region Constructors, domain class Id
		
		/// <summary>
		/// EntityHasStaticDatum domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xb1472bb7, 0x1e34, 0x4d07, 0xb0, 0x01, 0xd3, 0x64, 0x10, 0xe8, 0x92, 0x65);
	
				
		/// <summary>
		/// Constructor
		/// Creates a EntityHasStaticDatum link in the same Partition as the given Entity
		/// </summary>
		/// <param name="source">Entity to use as the source of the relationship.</param>
		/// <param name="target">StaticData to use as the target of the relationship.</param>
		public EntityHasStaticDatum(Entity source, StaticData target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(EntityHasStaticDatum.EntityDomainRoleId, source), new DslModeling::RoleAssignment(EntityHasStaticDatum.StaticDataDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EntityHasStaticDatum(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EntityHasStaticDatum(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EntityHasStaticDatum(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EntityHasStaticDatum(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Entity domain role code
		
		/// <summary>
		/// Entity domain role Id.
		/// </summary>
		public static readonly global::System.Guid EntityDomainRoleId = new global::System.Guid(0x8f45174c, 0x512a, 0x489a, 0x84, 0x02, 0x13, 0xb6, 0xeb, 0x56, 0x0b, 0xe3);
		
		/// <summary>
		/// DomainRole Entity
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.EntityHasStaticDatum/Entity.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.EntityHasStaticDatum/Entity.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "StaticDatum", PropertyDisplayNameKey="nHydrate2.Dsl.EntityHasStaticDatum/Entity.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("8f45174c-512a-489a-8402-13b6eb560be3")]
		public virtual Entity Entity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Entity)DslModeling::DomainRoleInfo.GetRolePlayer(this, EntityDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, EntityDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Entity of a StaticData
		/// <summary>
		/// Gets Entity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Entity GetEntity(StaticData element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, StaticDataDomainRoleId) as Entity;
		}
		
		/// <summary>
		/// Sets Entity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetEntity(StaticData element, Entity newEntity)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, StaticDataDomainRoleId, newEntity);
		}
		#endregion
		#region StaticData domain role code
		
		/// <summary>
		/// StaticData domain role Id.
		/// </summary>
		public static readonly global::System.Guid StaticDataDomainRoleId = new global::System.Guid(0x5c59db95, 0xcf44, 0x4553, 0xa2, 0x96, 0x84, 0xce, 0x04, 0x52, 0x96, 0xc5);
		
		/// <summary>
		/// DomainRole StaticData
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.EntityHasStaticDatum/StaticData.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.EntityHasStaticDatum/StaticData.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Entity", PropertyDisplayNameKey="nHydrate2.Dsl.EntityHasStaticDatum/StaticData.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("5c59db95-cf44-4553-a296-84ce045296c5")]
		public virtual StaticData StaticData
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (StaticData)DslModeling::DomainRoleInfo.GetRolePlayer(this, StaticDataDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, StaticDataDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access StaticDatum of a Entity
		/// <summary>
		/// Gets a list of StaticDatum.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<StaticData> GetStaticDatum(Entity element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<StaticData>, StaticData>(element, EntityDomainRoleId);
		}
		#endregion
		#region Entity link accessor
		/// <summary>
		/// Get the list of EntityHasStaticDatum links to a Entity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::nHydrate2.Dsl.EntityHasStaticDatum> GetLinksToStaticDatum ( global::nHydrate2.Dsl.Entity entityInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate2.Dsl.EntityHasStaticDatum>(entityInstance, global::nHydrate2.Dsl.EntityHasStaticDatum.EntityDomainRoleId);
		}
		#endregion
		#region StaticData link accessor
		/// <summary>
		/// Get the EntityHasStaticDatum link to a StaticData.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::nHydrate2.Dsl.EntityHasStaticDatum GetLinkToEntity (global::nHydrate2.Dsl.StaticData staticDataInstance)
		{
			global::System.Collections.Generic.IList<global::nHydrate2.Dsl.EntityHasStaticDatum> links = DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate2.Dsl.EntityHasStaticDatum>(staticDataInstance, global::nHydrate2.Dsl.EntityHasStaticDatum.StaticDataDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of StaticData not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region EntityHasStaticDatum instance accessors
		
		/// <summary>
		/// Get any EntityHasStaticDatum links between a given Entity and a StaticData.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::nHydrate2.Dsl.EntityHasStaticDatum> GetLinks( global::nHydrate2.Dsl.Entity source, global::nHydrate2.Dsl.StaticData target )
		{
			global::System.Collections.Generic.List<global::nHydrate2.Dsl.EntityHasStaticDatum> outLinks = new global::System.Collections.Generic.List<global::nHydrate2.Dsl.EntityHasStaticDatum>();
			global::System.Collections.Generic.IList<global::nHydrate2.Dsl.EntityHasStaticDatum> links = DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate2.Dsl.EntityHasStaticDatum>(source, global::nHydrate2.Dsl.EntityHasStaticDatum.EntityDomainRoleId);
			foreach ( global::nHydrate2.Dsl.EntityHasStaticDatum link in links )
			{
				if ( target.Equals(link.StaticData) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one EntityHasStaticDatum link between a given Entityand a StaticData.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::nHydrate2.Dsl.EntityHasStaticDatum GetLink( global::nHydrate2.Dsl.Entity source, global::nHydrate2.Dsl.StaticData target )
		{
			global::System.Collections.Generic.IList<global::nHydrate2.Dsl.EntityHasStaticDatum> links = DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate2.Dsl.EntityHasStaticDatum>(source, global::nHydrate2.Dsl.EntityHasStaticDatum.EntityDomainRoleId);
			foreach ( global::nHydrate2.Dsl.EntityHasStaticDatum link in links )
			{
				if ( target.Equals(link.StaticData) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace nHydrate2.Dsl
{
	/// <summary>
	/// Double-derived base class for DomainRelationship EntityInheritsEntity
	/// </summary>
	[DslDesign::DisplayNameResource("nHydrate2.Dsl.EntityInheritsEntity.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("nHydrate2.Dsl.EntityInheritsEntity.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::nHydrate2.Dsl.nHydrate2DomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("e18bfada-9d87-480c-bbc9-adb50d39ef74")]
	public abstract partial class EntityInheritsEntityBase : DslModeling::ElementLink, System.ComponentModel.INotifyPropertyChanged
	{
		#region INotifyPropertyChanged
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs e)
		{
			if (this.PropertyChanged != null)
				this.PropertyChanged(this, e);
		}
		#endregion
	
		#region Constructors, domain class Id
		
		/// <summary>
		/// EntityInheritsEntity domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xe18bfada, 0x9d87, 0x480c, 0xbb, 0xc9, 0xad, 0xb5, 0x0d, 0x39, 0xef, 0x74);
	
		// Constructors were not generated for this relationship because it had HasCustomConstructor
		// set to true. Please provide the constructors below in a partial class.
		///// <summary>
		///// Constructor.
		///// </summary>
		///// <param name="partition">The Partition instance containing this ElementLink</param>
		///// <param name="roleAssignments">A set of role assignments for roleplayer initialization</param>
		///// <param name="propertyAssignments">A set of attribute assignments for attribute initialization</param>
		//protected EntityInheritsEntityBase(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
		//	: base(partition, roleAssignments, propertyAssignments)
		//{
		//}
		#endregion
		#region ParentInheritedEntity domain role code
		
		/// <summary>
		/// ParentInheritedEntity domain role Id.
		/// </summary>
		public static readonly global::System.Guid ParentInheritedEntityDomainRoleId = new global::System.Guid(0xe28724cf, 0xd273, 0x4d1e, 0x82, 0x92, 0x4e, 0xf2, 0x0e, 0x15, 0x9a, 0xfb);
		
		/// <summary>
		/// DomainRole ParentInheritedEntity
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.EntityInheritsEntity/ParentInheritedEntity.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.EntityInheritsEntity/ParentInheritedEntity.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.EntityInheritsEntity/ParentInheritedEntity.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ParentInheritedEntity", PropertyDisplayNameKey="nHydrate2.Dsl.EntityInheritsEntity/ParentInheritedEntity.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("e28724cf-d273-4d1e-8292-4ef20e159afb")]
		public virtual Entity ParentInheritedEntity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Entity)DslModeling::DomainRoleInfo.GetRolePlayer(this, ParentInheritedEntityDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ParentInheritedEntityDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ChildDerivedEntities of a Entity
		/// <summary>
		/// Gets a list of ChildDerivedEntities.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Entity> GetChildDerivedEntities(Entity element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Entity>, Entity>(element, ChildDerivedEntitiesDomainRoleId);
		}
		#endregion
		#region ChildDerivedEntities domain role code
		
		/// <summary>
		/// ChildDerivedEntities domain role Id.
		/// </summary>
		public static readonly global::System.Guid ChildDerivedEntitiesDomainRoleId = new global::System.Guid(0x2095e234, 0x5112, 0x4a60, 0xa3, 0xde, 0xf6, 0xad, 0x40, 0x71, 0x2a, 0x46);
		
		/// <summary>
		/// DomainRole ChildDerivedEntities
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.EntityInheritsEntity/ChildDerivedEntities.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.EntityInheritsEntity/ChildDerivedEntities.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.EntityInheritsEntity/ChildDerivedEntities.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ChildDerivedEntities", PropertyDisplayNameKey="nHydrate2.Dsl.EntityInheritsEntity/ChildDerivedEntities.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("2095e234-5112-4a60-a3de-f6ad40712a46")]
		public virtual Entity ChildDerivedEntities
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Entity)DslModeling::DomainRoleInfo.GetRolePlayer(this, ChildDerivedEntitiesDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ChildDerivedEntitiesDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ParentInheritedEntity of a Entity
		/// <summary>
		/// Gets ParentInheritedEntity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Entity GetParentInheritedEntity(Entity element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ParentInheritedEntityDomainRoleId) as Entity;
		}
		
		/// <summary>
		/// Sets ParentInheritedEntity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetParentInheritedEntity(Entity element, Entity newChildDerivedEntities)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ParentInheritedEntityDomainRoleId, newChildDerivedEntities);
		}
		#endregion
		#region RoleName domain property code
		
		/// <summary>
		/// RoleName domain property Id.
		/// </summary>
		public static readonly global::System.Guid RoleNameDomainPropertyId = new global::System.Guid(0xe1d48068, 0xbba9, 0x4ddc, 0xa5, 0xcd, 0x37, 0xf7, 0xa4, 0x61, 0xbb, 0xde);
		
		/// <summary>
		/// Storage for RoleName
		/// </summary>
		private global::System.String roleNamePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of RoleName domain property.
		/// The named relation necessary when there is more than one relation between two
		/// entities
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.EntityInheritsEntity/RoleName.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.EntityInheritsEntity/RoleName.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.EntityInheritsEntity/RoleName.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("e1d48068-bba9-4ddc-a5cd-37f7a461bbde")]
		public virtual global::System.String RoleName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return roleNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				RoleNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the EntityInheritsEntity.RoleName domain property.
		/// </summary>
		internal sealed partial class RoleNamePropertyHandler : DslModeling::DomainPropertyValueHandler<EntityInheritsEntityBase, global::System.String>
		{
			private RoleNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the EntityInheritsEntity.RoleName domain property value handler.
			/// </summary>
			public static readonly RoleNamePropertyHandler Instance = new RoleNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the EntityInheritsEntity.RoleName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return RoleNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(EntityInheritsEntityBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.RoleName;
				//return element.GetValue<global::System.String>("RoleName", element.roleNamePropertyStorage);
				//return element.roleNamePropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(EntityInheritsEntityBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.roleNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("EntityInheritsEntity"));
				}
			}
		}
		
		#endregion
		#region IsEnforced domain property code
		
		/// <summary>
		/// IsEnforced domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsEnforcedDomainPropertyId = new global::System.Guid(0x1a54f2fc, 0xfb88, 0x49a9, 0xb4, 0xdc, 0x7c, 0x59, 0xf0, 0xa3, 0xc2, 0x80);
		
		/// <summary>
		/// Storage for IsEnforced
		/// </summary>
		private global::System.Boolean isEnforcedPropertyStorage = true;
		
		/// <summary>
		/// Gets or sets the value of IsEnforced domain property.
		/// Determines if this relationship is enfored in the database or just in code
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.EntityInheritsEntity/IsEnforced.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.EntityInheritsEntity/IsEnforced.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.EntityInheritsEntity/IsEnforced.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(true)]
		[DslModeling::DomainObjectId("1a54f2fc-fb88-49a9-b4dc-7c59f0a3c280")]
		public virtual global::System.Boolean IsEnforced
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isEnforcedPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsEnforcedPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the EntityInheritsEntity.IsEnforced domain property.
		/// </summary>
		internal sealed partial class IsEnforcedPropertyHandler : DslModeling::DomainPropertyValueHandler<EntityInheritsEntityBase, global::System.Boolean>
		{
			private IsEnforcedPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the EntityInheritsEntity.IsEnforced domain property value handler.
			/// </summary>
			public static readonly IsEnforcedPropertyHandler Instance = new IsEnforcedPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the EntityInheritsEntity.IsEnforced domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsEnforcedDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(EntityInheritsEntityBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.IsEnforced;
				//return element.GetValue<global::System.Boolean>("IsEnforced", element.isEnforcedPropertyStorage);
				//return element.isEnforcedPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(EntityInheritsEntityBase element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isEnforcedPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("EntityInheritsEntity"));
				}
			}
		}
		
		#endregion
		#region Summary domain property code
		
		/// <summary>
		/// Summary domain property Id.
		/// </summary>
		public static readonly global::System.Guid SummaryDomainPropertyId = new global::System.Guid(0xd7e7ea0c, 0x5374, 0x408b, 0x94, 0x70, 0x08, 0x8b, 0xb8, 0x46, 0x7c, 0x0a);
		
		/// <summary>
		/// Storage for Summary
		/// </summary>
		private global::System.String summaryPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Summary domain property.
		/// Determines summary text were applicable
		/// </summary>
		[System.ComponentModel.Editor(typeof(System.ComponentModel.Design.MultilineStringEditor), typeof(System.Drawing.Design.UITypeEditor))]
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.EntityInheritsEntity/Summary.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.EntityInheritsEntity/Summary.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.EntityInheritsEntity/Summary.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("d7e7ea0c-5374-408b-9470-088bb8467c0a")]
		public virtual global::System.String Summary
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return summaryPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				SummaryPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the EntityInheritsEntity.Summary domain property.
		/// </summary>
		internal sealed partial class SummaryPropertyHandler : DslModeling::DomainPropertyValueHandler<EntityInheritsEntityBase, global::System.String>
		{
			private SummaryPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the EntityInheritsEntity.Summary domain property value handler.
			/// </summary>
			public static readonly SummaryPropertyHandler Instance = new SummaryPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the EntityInheritsEntity.Summary domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return SummaryDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(EntityInheritsEntityBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.Summary;
				//return element.GetValue<global::System.String>("Summary", element.summaryPropertyStorage);
				//return element.summaryPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(EntityInheritsEntityBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.summaryPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("EntityInheritsEntity"));
				}
			}
		}
		
		#endregion
		#region ParentInheritedEntity link accessor
		/// <summary>
		/// Get the EntityInheritsEntity link to a Entity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::nHydrate2.Dsl.EntityInheritsEntity GetLinkToParentInheritedEntity (global::nHydrate2.Dsl.Entity parentInheritedEntityInstance)
		{
			global::System.Collections.Generic.IList<global::nHydrate2.Dsl.EntityInheritsEntity> links = DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate2.Dsl.EntityInheritsEntity>(parentInheritedEntityInstance, global::nHydrate2.Dsl.EntityInheritsEntity.ParentInheritedEntityDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ParentInheritedEntity not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ChildDerivedEntities link accessor
		/// <summary>
		/// Get the list of EntityInheritsEntity links to a Entity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::nHydrate2.Dsl.EntityInheritsEntity> GetLinksToChildDerivedEntities ( global::nHydrate2.Dsl.Entity childDerivedEntitiesInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate2.Dsl.EntityInheritsEntity>(childDerivedEntitiesInstance, global::nHydrate2.Dsl.EntityInheritsEntity.ChildDerivedEntitiesDomainRoleId);
		}
		#endregion
		#region EntityInheritsEntity instance accessors
		
		/// <summary>
		/// Get any EntityInheritsEntity links between a given Entity and a Entity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::nHydrate2.Dsl.EntityInheritsEntity> GetLinks( global::nHydrate2.Dsl.Entity source, global::nHydrate2.Dsl.Entity target )
		{
			global::System.Collections.Generic.List<global::nHydrate2.Dsl.EntityInheritsEntity> outLinks = new global::System.Collections.Generic.List<global::nHydrate2.Dsl.EntityInheritsEntity>();
			global::System.Collections.Generic.IList<global::nHydrate2.Dsl.EntityInheritsEntity> links = DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate2.Dsl.EntityInheritsEntity>(source, global::nHydrate2.Dsl.EntityInheritsEntity.ParentInheritedEntityDomainRoleId);
			foreach ( global::nHydrate2.Dsl.EntityInheritsEntity link in links )
			{
				if ( target.Equals(link.ChildDerivedEntities) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one EntityInheritsEntity link between a given Entityand a Entity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::nHydrate2.Dsl.EntityInheritsEntity GetLink( global::nHydrate2.Dsl.Entity source, global::nHydrate2.Dsl.Entity target )
		{
			global::System.Collections.Generic.IList<global::nHydrate2.Dsl.EntityInheritsEntity> links = DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate2.Dsl.EntityInheritsEntity>(source, global::nHydrate2.Dsl.EntityInheritsEntity.ParentInheritedEntityDomainRoleId);
			foreach ( global::nHydrate2.Dsl.EntityInheritsEntity link in links )
			{
				if ( target.Equals(link.ChildDerivedEntities) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
	/// <summary>
	/// DomainRelationship EntityInheritsEntity
	/// </summary>
	[global::System.CLSCompliant(true)]
	public partial class EntityInheritsEntity : EntityInheritsEntityBase
	{
		#region Constructors
		// Constructors were not generated for this relationship because it had HasCustomConstructor
		// set to true. Please provide the constructors below in a partial class.
		//		
		///// <summary>
		///// Constructor
		///// Creates a EntityInheritsEntity link in the same Partition as the given Entity
		///// </summary>
		///// <param name="source">Entity to use as the source of the relationship.</param>
		///// <param name="target">Entity to use as the target of the relationship.</param>
		//public EntityInheritsEntity(Entity source, Entity target)
		//	: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(EntityInheritsEntity.ParentInheritedEntityDomainRoleId, source), new DslModeling::RoleAssignment(EntityInheritsEntity.ChildDerivedEntitiesDomainRoleId, target)}, null)
		//{
		//}
		//
		///// <summary>
		///// Constructor
		///// </summary>
		///// <param name="store">Store where new link is to be created.</param>
		///// <param name="roleAssignments">List of relationship role assignments.</param>
		//public EntityInheritsEntity(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
		//	: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		//{
		//}
		//
		///// <summary>
		///// Constructor
		///// </summary>
		///// <param name="store">Store where new link is to be created.</param>
		///// <param name="roleAssignments">List of relationship role assignments.</param>
		///// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		//public EntityInheritsEntity(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
		//	: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		//{
		//}
		//
		///// <summary>
		///// Constructor
		///// </summary>
		///// <param name="partition">Partition where new link is to be created.</param>
		///// <param name="roleAssignments">List of relationship role assignments.</param>
		//public EntityInheritsEntity(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
		//	: base(partition, roleAssignments, null)
		//{
		//}
		//
		///// <summary>
		///// Constructor
		///// </summary>
		///// <param name="partition">Partition where new link is to be created.</param>
		///// <param name="roleAssignments">List of relationship role assignments.</param>
		///// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		//public EntityInheritsEntity(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
		//	: base(partition, roleAssignments, propertyAssignments)
		//{
		//}
		#endregion
	}
}
namespace nHydrate2.Dsl
{
	/// <summary>
	/// DomainRelationship EntityHasComposites
	/// </summary>
	[DslDesign::DisplayNameResource("nHydrate2.Dsl.EntityHasComposites.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("nHydrate2.Dsl.EntityHasComposites.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::nHydrate2.Dsl.nHydrate2DomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("196f7f0d-bf28-494a-916f-17f515856f7e")]
	public partial class EntityHasComposites : DslModeling::ElementLink, System.ComponentModel.INotifyPropertyChanged
	{
		#region INotifyPropertyChanged
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs e)
		{
			if (this.PropertyChanged != null)
				this.PropertyChanged(this, e);
		}
		#endregion
	
		#region Constructors, domain class Id
		
		/// <summary>
		/// EntityHasComposites domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x196f7f0d, 0xbf28, 0x494a, 0x91, 0x6f, 0x17, 0xf5, 0x15, 0x85, 0x6f, 0x7e);
	
				
		/// <summary>
		/// Constructor
		/// Creates a EntityHasComposites link in the same Partition as the given Entity
		/// </summary>
		/// <param name="source">Entity to use as the source of the relationship.</param>
		/// <param name="target">Composite to use as the target of the relationship.</param>
		public EntityHasComposites(Entity source, Composite target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(EntityHasComposites.EntityDomainRoleId, source), new DslModeling::RoleAssignment(EntityHasComposites.CompositeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EntityHasComposites(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EntityHasComposites(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EntityHasComposites(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EntityHasComposites(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Entity domain role code
		
		/// <summary>
		/// Entity domain role Id.
		/// </summary>
		public static readonly global::System.Guid EntityDomainRoleId = new global::System.Guid(0x7c3a4c96, 0x7c33, 0x4e7c, 0x80, 0xe1, 0x90, 0x5a, 0x7c, 0x15, 0xa2, 0x48);
		
		/// <summary>
		/// DomainRole Entity
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.EntityHasComposites/Entity.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.EntityHasComposites/Entity.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Composites", PropertyDisplayNameKey="nHydrate2.Dsl.EntityHasComposites/Entity.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("7c3a4c96-7c33-4e7c-80e1-905a7c15a248")]
		public virtual Entity Entity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Entity)DslModeling::DomainRoleInfo.GetRolePlayer(this, EntityDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, EntityDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Entity of a Composite
		/// <summary>
		/// Gets Entity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Entity GetEntity(Composite element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, CompositeDomainRoleId) as Entity;
		}
		
		/// <summary>
		/// Sets Entity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetEntity(Composite element, Entity newEntity)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, CompositeDomainRoleId, newEntity);
		}
		#endregion
		#region Composite domain role code
		
		/// <summary>
		/// Composite domain role Id.
		/// </summary>
		public static readonly global::System.Guid CompositeDomainRoleId = new global::System.Guid(0x906a19ba, 0xd657, 0x4536, 0x87, 0xc5, 0x9c, 0x49, 0xb8, 0x4e, 0x95, 0xef);
		
		/// <summary>
		/// DomainRole Composite
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.EntityHasComposites/Composite.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.EntityHasComposites/Composite.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Entity", PropertyDisplayNameKey="nHydrate2.Dsl.EntityHasComposites/Composite.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("906a19ba-d657-4536-87c5-9c49b84e95ef")]
		public virtual Composite Composite
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Composite)DslModeling::DomainRoleInfo.GetRolePlayer(this, CompositeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CompositeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Composites of a Entity
		/// <summary>
		/// Gets a list of Composites.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Composite> GetComposites(Entity element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Composite>, Composite>(element, EntityDomainRoleId);
		}
		#endregion
		#region Entity link accessor
		/// <summary>
		/// Get the list of EntityHasComposites links to a Entity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::nHydrate2.Dsl.EntityHasComposites> GetLinksToComposites ( global::nHydrate2.Dsl.Entity entityInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate2.Dsl.EntityHasComposites>(entityInstance, global::nHydrate2.Dsl.EntityHasComposites.EntityDomainRoleId);
		}
		#endregion
		#region Composite link accessor
		/// <summary>
		/// Get the EntityHasComposites link to a Composite.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::nHydrate2.Dsl.EntityHasComposites GetLinkToEntity (global::nHydrate2.Dsl.Composite compositeInstance)
		{
			global::System.Collections.Generic.IList<global::nHydrate2.Dsl.EntityHasComposites> links = DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate2.Dsl.EntityHasComposites>(compositeInstance, global::nHydrate2.Dsl.EntityHasComposites.CompositeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Composite not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region EntityHasComposites instance accessors
		
		/// <summary>
		/// Get any EntityHasComposites links between a given Entity and a Composite.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::nHydrate2.Dsl.EntityHasComposites> GetLinks( global::nHydrate2.Dsl.Entity source, global::nHydrate2.Dsl.Composite target )
		{
			global::System.Collections.Generic.List<global::nHydrate2.Dsl.EntityHasComposites> outLinks = new global::System.Collections.Generic.List<global::nHydrate2.Dsl.EntityHasComposites>();
			global::System.Collections.Generic.IList<global::nHydrate2.Dsl.EntityHasComposites> links = DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate2.Dsl.EntityHasComposites>(source, global::nHydrate2.Dsl.EntityHasComposites.EntityDomainRoleId);
			foreach ( global::nHydrate2.Dsl.EntityHasComposites link in links )
			{
				if ( target.Equals(link.Composite) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one EntityHasComposites link between a given Entityand a Composite.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::nHydrate2.Dsl.EntityHasComposites GetLink( global::nHydrate2.Dsl.Entity source, global::nHydrate2.Dsl.Composite target )
		{
			global::System.Collections.Generic.IList<global::nHydrate2.Dsl.EntityHasComposites> links = DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate2.Dsl.EntityHasComposites>(source, global::nHydrate2.Dsl.EntityHasComposites.EntityDomainRoleId);
			foreach ( global::nHydrate2.Dsl.EntityHasComposites link in links )
			{
				if ( target.Equals(link.Composite) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace nHydrate2.Dsl
{
	/// <summary>
	/// DomainRelationship CompositeHasFields
	/// </summary>
	[DslDesign::DisplayNameResource("nHydrate2.Dsl.CompositeHasFields.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("nHydrate2.Dsl.CompositeHasFields.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::nHydrate2.Dsl.nHydrate2DomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("fcf0b894-a572-4b7c-b00b-b7ef50a0b5bc")]
	public partial class CompositeHasFields : DslModeling::ElementLink, System.ComponentModel.INotifyPropertyChanged
	{
		#region INotifyPropertyChanged
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs e)
		{
			if (this.PropertyChanged != null)
				this.PropertyChanged(this, e);
		}
		#endregion
	
		#region Constructors, domain class Id
		
		/// <summary>
		/// CompositeHasFields domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xfcf0b894, 0xa572, 0x4b7c, 0xb0, 0x0b, 0xb7, 0xef, 0x50, 0xa0, 0xb5, 0xbc);
	
				
		/// <summary>
		/// Constructor
		/// Creates a CompositeHasFields link in the same Partition as the given Composite
		/// </summary>
		/// <param name="source">Composite to use as the source of the relationship.</param>
		/// <param name="target">CompositeField to use as the target of the relationship.</param>
		public CompositeHasFields(Composite source, CompositeField target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(CompositeHasFields.CompositeDomainRoleId, source), new DslModeling::RoleAssignment(CompositeHasFields.CompositeFieldDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CompositeHasFields(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CompositeHasFields(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CompositeHasFields(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CompositeHasFields(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Composite domain role code
		
		/// <summary>
		/// Composite domain role Id.
		/// </summary>
		public static readonly global::System.Guid CompositeDomainRoleId = new global::System.Guid(0xd442f05a, 0xb561, 0x4029, 0xac, 0xd7, 0xd3, 0x35, 0x01, 0x09, 0x81, 0x83);
		
		/// <summary>
		/// DomainRole Composite
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.CompositeHasFields/Composite.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.CompositeHasFields/Composite.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Fields", PropertyDisplayNameKey="nHydrate2.Dsl.CompositeHasFields/Composite.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("d442f05a-b561-4029-acd7-d33501098183")]
		public virtual Composite Composite
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Composite)DslModeling::DomainRoleInfo.GetRolePlayer(this, CompositeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CompositeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Composite of a CompositeField
		/// <summary>
		/// Gets Composite.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Composite GetComposite(CompositeField element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, CompositeFieldDomainRoleId) as Composite;
		}
		
		/// <summary>
		/// Sets Composite.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetComposite(CompositeField element, Composite newComposite)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, CompositeFieldDomainRoleId, newComposite);
		}
		#endregion
		#region CompositeField domain role code
		
		/// <summary>
		/// CompositeField domain role Id.
		/// </summary>
		public static readonly global::System.Guid CompositeFieldDomainRoleId = new global::System.Guid(0x17b23d49, 0x303f, 0x471f, 0x9d, 0x87, 0xcf, 0x5e, 0x36, 0xc8, 0x0a, 0x2a);
		
		/// <summary>
		/// DomainRole CompositeField
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.CompositeHasFields/CompositeField.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.CompositeHasFields/CompositeField.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Composite", PropertyDisplayNameKey="nHydrate2.Dsl.CompositeHasFields/CompositeField.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("17b23d49-303f-471f-9d87-cf5e36c80a2a")]
		public virtual CompositeField CompositeField
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (CompositeField)DslModeling::DomainRoleInfo.GetRolePlayer(this, CompositeFieldDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CompositeFieldDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Fields of a Composite
		/// <summary>
		/// Gets a list of Fields.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<CompositeField> GetFields(Composite element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<CompositeField>, CompositeField>(element, CompositeDomainRoleId);
		}
		#endregion
		#region Composite link accessor
		/// <summary>
		/// Get the list of CompositeHasFields links to a Composite.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::nHydrate2.Dsl.CompositeHasFields> GetLinksToFields ( global::nHydrate2.Dsl.Composite compositeInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate2.Dsl.CompositeHasFields>(compositeInstance, global::nHydrate2.Dsl.CompositeHasFields.CompositeDomainRoleId);
		}
		#endregion
		#region CompositeField link accessor
		/// <summary>
		/// Get the CompositeHasFields link to a CompositeField.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::nHydrate2.Dsl.CompositeHasFields GetLinkToComposite (global::nHydrate2.Dsl.CompositeField compositeFieldInstance)
		{
			global::System.Collections.Generic.IList<global::nHydrate2.Dsl.CompositeHasFields> links = DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate2.Dsl.CompositeHasFields>(compositeFieldInstance, global::nHydrate2.Dsl.CompositeHasFields.CompositeFieldDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of CompositeField not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region CompositeHasFields instance accessors
		
		/// <summary>
		/// Get any CompositeHasFields links between a given Composite and a CompositeField.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::nHydrate2.Dsl.CompositeHasFields> GetLinks( global::nHydrate2.Dsl.Composite source, global::nHydrate2.Dsl.CompositeField target )
		{
			global::System.Collections.Generic.List<global::nHydrate2.Dsl.CompositeHasFields> outLinks = new global::System.Collections.Generic.List<global::nHydrate2.Dsl.CompositeHasFields>();
			global::System.Collections.Generic.IList<global::nHydrate2.Dsl.CompositeHasFields> links = DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate2.Dsl.CompositeHasFields>(source, global::nHydrate2.Dsl.CompositeHasFields.CompositeDomainRoleId);
			foreach ( global::nHydrate2.Dsl.CompositeHasFields link in links )
			{
				if ( target.Equals(link.CompositeField) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one CompositeHasFields link between a given Compositeand a CompositeField.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::nHydrate2.Dsl.CompositeHasFields GetLink( global::nHydrate2.Dsl.Composite source, global::nHydrate2.Dsl.CompositeField target )
		{
			global::System.Collections.Generic.IList<global::nHydrate2.Dsl.CompositeHasFields> links = DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate2.Dsl.CompositeHasFields>(source, global::nHydrate2.Dsl.CompositeHasFields.CompositeDomainRoleId);
			foreach ( global::nHydrate2.Dsl.CompositeHasFields link in links )
			{
				if ( target.Equals(link.CompositeField) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace nHydrate2.Dsl
{
	/// <summary>
	/// Double-derived base class for DomainRelationship EntityHasMetadata
	/// </summary>
	[DslDesign::DisplayNameResource("nHydrate2.Dsl.EntityHasMetadata.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("nHydrate2.Dsl.EntityHasMetadata.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::nHydrate2.Dsl.nHydrate2DomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("d8f52b3f-4006-4795-b93f-d47721cc13d3")]
	public abstract partial class EntityHasMetadataBase : DslModeling::ElementLink, System.ComponentModel.INotifyPropertyChanged
	{
		#region INotifyPropertyChanged
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs e)
		{
			if (this.PropertyChanged != null)
				this.PropertyChanged(this, e);
		}
		#endregion
	
		#region Constructors, domain class Id
		
		/// <summary>
		/// EntityHasMetadata domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xd8f52b3f, 0x4006, 0x4795, 0xb9, 0x3f, 0xd4, 0x77, 0x21, 0xcc, 0x13, 0xd3);
	
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">The Partition instance containing this ElementLink</param>
		/// <param name="roleAssignments">A set of role assignments for roleplayer initialization</param>
		/// <param name="propertyAssignments">A set of attribute assignments for attribute initialization</param>
		protected EntityHasMetadataBase(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Entity domain role code
		
		/// <summary>
		/// Entity domain role Id.
		/// </summary>
		public static readonly global::System.Guid EntityDomainRoleId = new global::System.Guid(0xc3d56be9, 0x0465, 0x4928, 0x99, 0x2d, 0xfb, 0xd0, 0xef, 0xda, 0xe2, 0xc4);
		
		/// <summary>
		/// DomainRole Entity
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.EntityHasMetadata/Entity.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.EntityHasMetadata/Entity.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "EntityMetadata", PropertyDisplayNameKey="nHydrate2.Dsl.EntityHasMetadata/Entity.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("c3d56be9-0465-4928-992d-fbd0efdae2c4")]
		public virtual Entity Entity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Entity)DslModeling::DomainRoleInfo.GetRolePlayer(this, EntityDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, EntityDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Entity of a EntityMetadata
		/// <summary>
		/// Gets Entity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Entity GetEntity(EntityMetadata element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, EntityMetadataDomainRoleId) as Entity;
		}
		
		/// <summary>
		/// Sets Entity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetEntity(EntityMetadata element, Entity newEntity)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, EntityMetadataDomainRoleId, newEntity);
		}
		#endregion
		#region EntityMetadata domain role code
		
		/// <summary>
		/// EntityMetadata domain role Id.
		/// </summary>
		public static readonly global::System.Guid EntityMetadataDomainRoleId = new global::System.Guid(0x1e3785e5, 0x2c22, 0x4ede, 0xb5, 0x96, 0x24, 0xc8, 0xff, 0x7f, 0x1d, 0x2e);
		
		/// <summary>
		/// DomainRole EntityMetadata
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.EntityHasMetadata/EntityMetadata.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.EntityHasMetadata/EntityMetadata.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Entity", PropertyDisplayNameKey="nHydrate2.Dsl.EntityHasMetadata/EntityMetadata.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("1e3785e5-2c22-4ede-b596-24c8ff7f1d2e")]
		public virtual EntityMetadata EntityMetadata
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (EntityMetadata)DslModeling::DomainRoleInfo.GetRolePlayer(this, EntityMetadataDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, EntityMetadataDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access EntityMetadata of a Entity
		/// <summary>
		/// Gets a list of EntityMetadata.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<EntityMetadata> GetEntityMetadata(Entity element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<EntityMetadata>, EntityMetadata>(element, EntityDomainRoleId);
		}
		#endregion
		#region Entity link accessor
		/// <summary>
		/// Get the list of EntityHasMetadata links to a Entity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::nHydrate2.Dsl.EntityHasMetadata> GetLinksToEntityMetadata ( global::nHydrate2.Dsl.Entity entityInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate2.Dsl.EntityHasMetadata>(entityInstance, global::nHydrate2.Dsl.EntityHasMetadata.EntityDomainRoleId);
		}
		#endregion
		#region EntityMetadata link accessor
		/// <summary>
		/// Get the EntityHasMetadata link to a EntityMetadata.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::nHydrate2.Dsl.EntityHasMetadata GetLinkToEntity (global::nHydrate2.Dsl.EntityMetadata entityMetadataInstance)
		{
			global::System.Collections.Generic.IList<global::nHydrate2.Dsl.EntityHasMetadata> links = DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate2.Dsl.EntityHasMetadata>(entityMetadataInstance, global::nHydrate2.Dsl.EntityHasMetadata.EntityMetadataDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of EntityMetadata not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region EntityHasMetadata instance accessors
		
		/// <summary>
		/// Get any EntityHasMetadata links between a given Entity and a EntityMetadata.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::nHydrate2.Dsl.EntityHasMetadata> GetLinks( global::nHydrate2.Dsl.Entity source, global::nHydrate2.Dsl.EntityMetadata target )
		{
			global::System.Collections.Generic.List<global::nHydrate2.Dsl.EntityHasMetadata> outLinks = new global::System.Collections.Generic.List<global::nHydrate2.Dsl.EntityHasMetadata>();
			global::System.Collections.Generic.IList<global::nHydrate2.Dsl.EntityHasMetadata> links = DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate2.Dsl.EntityHasMetadata>(source, global::nHydrate2.Dsl.EntityHasMetadata.EntityDomainRoleId);
			foreach ( global::nHydrate2.Dsl.EntityHasMetadata link in links )
			{
				if ( target.Equals(link.EntityMetadata) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one EntityHasMetadata link between a given Entityand a EntityMetadata.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::nHydrate2.Dsl.EntityHasMetadata GetLink( global::nHydrate2.Dsl.Entity source, global::nHydrate2.Dsl.EntityMetadata target )
		{
			global::System.Collections.Generic.IList<global::nHydrate2.Dsl.EntityHasMetadata> links = DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate2.Dsl.EntityHasMetadata>(source, global::nHydrate2.Dsl.EntityHasMetadata.EntityDomainRoleId);
			foreach ( global::nHydrate2.Dsl.EntityHasMetadata link in links )
			{
				if ( target.Equals(link.EntityMetadata) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
	/// <summary>
	/// DomainRelationship EntityHasMetadata
	/// </summary>
	[global::System.CLSCompliant(true)]
	public partial class EntityHasMetadata : EntityHasMetadataBase
	{
		#region Constructors
				
		/// <summary>
		/// Constructor
		/// Creates a EntityHasMetadata link in the same Partition as the given Entity
		/// </summary>
		/// <param name="source">Entity to use as the source of the relationship.</param>
		/// <param name="target">EntityMetadata to use as the target of the relationship.</param>
		public EntityHasMetadata(Entity source, EntityMetadata target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(EntityHasMetadata.EntityDomainRoleId, source), new DslModeling::RoleAssignment(EntityHasMetadata.EntityMetadataDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EntityHasMetadata(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EntityHasMetadata(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EntityHasMetadata(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EntityHasMetadata(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace nHydrate2.Dsl
{
	/// <summary>
	/// DomainRelationship FieldHasMetadata
	/// </summary>
	[DslDesign::DisplayNameResource("nHydrate2.Dsl.FieldHasMetadata.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("nHydrate2.Dsl.FieldHasMetadata.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::nHydrate2.Dsl.nHydrate2DomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("c28d2f9b-cdfc-4855-b347-2282af8306ec")]
	public partial class FieldHasMetadata : DslModeling::ElementLink, System.ComponentModel.INotifyPropertyChanged
	{
		#region INotifyPropertyChanged
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs e)
		{
			if (this.PropertyChanged != null)
				this.PropertyChanged(this, e);
		}
		#endregion
	
		#region Constructors, domain class Id
		
		/// <summary>
		/// FieldHasMetadata domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xc28d2f9b, 0xcdfc, 0x4855, 0xb3, 0x47, 0x22, 0x82, 0xaf, 0x83, 0x06, 0xec);
	
				
		/// <summary>
		/// Constructor
		/// Creates a FieldHasMetadata link in the same Partition as the given Field
		/// </summary>
		/// <param name="source">Field to use as the source of the relationship.</param>
		/// <param name="target">FieldMetadata to use as the target of the relationship.</param>
		public FieldHasMetadata(Field source, FieldMetadata target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(FieldHasMetadata.FieldDomainRoleId, source), new DslModeling::RoleAssignment(FieldHasMetadata.FieldMetadataDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FieldHasMetadata(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FieldHasMetadata(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FieldHasMetadata(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FieldHasMetadata(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Field domain role code
		
		/// <summary>
		/// Field domain role Id.
		/// </summary>
		public static readonly global::System.Guid FieldDomainRoleId = new global::System.Guid(0xb9da33f0, 0x6f75, 0x4c5e, 0xb9, 0xc9, 0x2b, 0x04, 0x7a, 0xc1, 0x64, 0xd4);
		
		/// <summary>
		/// DomainRole Field
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.FieldHasMetadata/Field.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.FieldHasMetadata/Field.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "FieldMetadata", PropertyDisplayNameKey="nHydrate2.Dsl.FieldHasMetadata/Field.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("b9da33f0-6f75-4c5e-b9c9-2b047ac164d4")]
		public virtual Field Field
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Field)DslModeling::DomainRoleInfo.GetRolePlayer(this, FieldDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, FieldDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Field of a FieldMetadata
		/// <summary>
		/// Gets Field.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Field GetField(FieldMetadata element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, FieldMetadataDomainRoleId) as Field;
		}
		
		/// <summary>
		/// Sets Field.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetField(FieldMetadata element, Field newField)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, FieldMetadataDomainRoleId, newField);
		}
		#endregion
		#region FieldMetadata domain role code
		
		/// <summary>
		/// FieldMetadata domain role Id.
		/// </summary>
		public static readonly global::System.Guid FieldMetadataDomainRoleId = new global::System.Guid(0xce82ad42, 0x2d12, 0x445f, 0xa7, 0xf0, 0x45, 0xce, 0x86, 0x29, 0xd3, 0x04);
		
		/// <summary>
		/// DomainRole FieldMetadata
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.FieldHasMetadata/FieldMetadata.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.FieldHasMetadata/FieldMetadata.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Field", PropertyDisplayNameKey="nHydrate2.Dsl.FieldHasMetadata/FieldMetadata.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("ce82ad42-2d12-445f-a7f0-45ce8629d304")]
		public virtual FieldMetadata FieldMetadata
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (FieldMetadata)DslModeling::DomainRoleInfo.GetRolePlayer(this, FieldMetadataDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, FieldMetadataDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access FieldMetadata of a Field
		/// <summary>
		/// Gets a list of FieldMetadata.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<FieldMetadata> GetFieldMetadata(Field element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<FieldMetadata>, FieldMetadata>(element, FieldDomainRoleId);
		}
		#endregion
		#region Field link accessor
		/// <summary>
		/// Get the list of FieldHasMetadata links to a Field.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::nHydrate2.Dsl.FieldHasMetadata> GetLinksToFieldMetadata ( global::nHydrate2.Dsl.Field fieldInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate2.Dsl.FieldHasMetadata>(fieldInstance, global::nHydrate2.Dsl.FieldHasMetadata.FieldDomainRoleId);
		}
		#endregion
		#region FieldMetadata link accessor
		/// <summary>
		/// Get the FieldHasMetadata link to a FieldMetadata.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::nHydrate2.Dsl.FieldHasMetadata GetLinkToField (global::nHydrate2.Dsl.FieldMetadata fieldMetadataInstance)
		{
			global::System.Collections.Generic.IList<global::nHydrate2.Dsl.FieldHasMetadata> links = DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate2.Dsl.FieldHasMetadata>(fieldMetadataInstance, global::nHydrate2.Dsl.FieldHasMetadata.FieldMetadataDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of FieldMetadata not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region FieldHasMetadata instance accessors
		
		/// <summary>
		/// Get any FieldHasMetadata links between a given Field and a FieldMetadata.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::nHydrate2.Dsl.FieldHasMetadata> GetLinks( global::nHydrate2.Dsl.Field source, global::nHydrate2.Dsl.FieldMetadata target )
		{
			global::System.Collections.Generic.List<global::nHydrate2.Dsl.FieldHasMetadata> outLinks = new global::System.Collections.Generic.List<global::nHydrate2.Dsl.FieldHasMetadata>();
			global::System.Collections.Generic.IList<global::nHydrate2.Dsl.FieldHasMetadata> links = DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate2.Dsl.FieldHasMetadata>(source, global::nHydrate2.Dsl.FieldHasMetadata.FieldDomainRoleId);
			foreach ( global::nHydrate2.Dsl.FieldHasMetadata link in links )
			{
				if ( target.Equals(link.FieldMetadata) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one FieldHasMetadata link between a given Fieldand a FieldMetadata.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::nHydrate2.Dsl.FieldHasMetadata GetLink( global::nHydrate2.Dsl.Field source, global::nHydrate2.Dsl.FieldMetadata target )
		{
			global::System.Collections.Generic.IList<global::nHydrate2.Dsl.FieldHasMetadata> links = DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate2.Dsl.FieldHasMetadata>(source, global::nHydrate2.Dsl.FieldHasMetadata.FieldDomainRoleId);
			foreach ( global::nHydrate2.Dsl.FieldHasMetadata link in links )
			{
				if ( target.Equals(link.FieldMetadata) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace nHydrate2.Dsl
{
	/// <summary>
	/// DomainRelationship nHydrateModelHasFunctions
	/// </summary>
	[DslDesign::DisplayNameResource("nHydrate2.Dsl.nHydrateModelHasFunctions.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("nHydrate2.Dsl.nHydrateModelHasFunctions.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::nHydrate2.Dsl.nHydrate2DomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("49d512a7-4209-42e8-b803-65a006e4e87c")]
	public partial class nHydrateModelHasFunctions : DslModeling::ElementLink, System.ComponentModel.INotifyPropertyChanged
	{
		#region INotifyPropertyChanged
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs e)
		{
			if (this.PropertyChanged != null)
				this.PropertyChanged(this, e);
		}
		#endregion
	
		#region Constructors, domain class Id
		
		/// <summary>
		/// nHydrateModelHasFunctions domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x49d512a7, 0x4209, 0x42e8, 0xb8, 0x03, 0x65, 0xa0, 0x06, 0xe4, 0xe8, 0x7c);
	
				
		/// <summary>
		/// Constructor
		/// Creates a nHydrateModelHasFunctions link in the same Partition as the given nHydrateModel
		/// </summary>
		/// <param name="source">nHydrateModel to use as the source of the relationship.</param>
		/// <param name="target">Function to use as the target of the relationship.</param>
		public nHydrateModelHasFunctions(nHydrateModel source, Function target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(nHydrateModelHasFunctions.nHydrateModelDomainRoleId, source), new DslModeling::RoleAssignment(nHydrateModelHasFunctions.FunctionDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public nHydrateModelHasFunctions(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public nHydrateModelHasFunctions(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public nHydrateModelHasFunctions(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public nHydrateModelHasFunctions(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region nHydrateModel domain role code
		
		/// <summary>
		/// nHydrateModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid nHydrateModelDomainRoleId = new global::System.Guid(0x842bef0d, 0xfaae, 0x40f9, 0xbf, 0xc0, 0xab, 0x1e, 0x3f, 0x20, 0xe4, 0xa4);
		
		/// <summary>
		/// DomainRole nHydrateModel
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.nHydrateModelHasFunctions/nHydrateModel.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.nHydrateModelHasFunctions/nHydrateModel.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Functions", PropertyDisplayNameKey="nHydrate2.Dsl.nHydrateModelHasFunctions/nHydrateModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("842bef0d-faae-40f9-bfc0-ab1e3f20e4a4")]
		public virtual nHydrateModel nHydrateModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (nHydrateModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, nHydrateModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, nHydrateModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access nHydrateModel of a Function
		/// <summary>
		/// Gets nHydrateModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static nHydrateModel GetnHydrateModel(Function element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, FunctionDomainRoleId) as nHydrateModel;
		}
		
		/// <summary>
		/// Sets nHydrateModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetnHydrateModel(Function element, nHydrateModel newnHydrateModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, FunctionDomainRoleId, newnHydrateModel);
		}
		#endregion
		#region Function domain role code
		
		/// <summary>
		/// Function domain role Id.
		/// </summary>
		public static readonly global::System.Guid FunctionDomainRoleId = new global::System.Guid(0x5b22120e, 0x1b7a, 0x41ed, 0xa0, 0xce, 0xd9, 0x55, 0x09, 0x8d, 0x7e, 0xa8);
		
		/// <summary>
		/// DomainRole Function
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.nHydrateModelHasFunctions/Function.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.nHydrateModelHasFunctions/Function.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "nHydrateModel", PropertyDisplayNameKey="nHydrate2.Dsl.nHydrateModelHasFunctions/Function.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("5b22120e-1b7a-41ed-a0ce-d955098d7ea8")]
		public virtual Function Function
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Function)DslModeling::DomainRoleInfo.GetRolePlayer(this, FunctionDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, FunctionDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Functions of a nHydrateModel
		/// <summary>
		/// Gets a list of Functions.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Function> GetFunctions(nHydrateModel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Function>, Function>(element, nHydrateModelDomainRoleId);
		}
		#endregion
		#region nHydrateModel link accessor
		/// <summary>
		/// Get the list of nHydrateModelHasFunctions links to a nHydrateModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::nHydrate2.Dsl.nHydrateModelHasFunctions> GetLinksToFunctions ( global::nHydrate2.Dsl.nHydrateModel nHydrateModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate2.Dsl.nHydrateModelHasFunctions>(nHydrateModelInstance, global::nHydrate2.Dsl.nHydrateModelHasFunctions.nHydrateModelDomainRoleId);
		}
		#endregion
		#region Function link accessor
		/// <summary>
		/// Get the nHydrateModelHasFunctions link to a Function.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::nHydrate2.Dsl.nHydrateModelHasFunctions GetLinkTonHydrateModel (global::nHydrate2.Dsl.Function functionInstance)
		{
			global::System.Collections.Generic.IList<global::nHydrate2.Dsl.nHydrateModelHasFunctions> links = DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate2.Dsl.nHydrateModelHasFunctions>(functionInstance, global::nHydrate2.Dsl.nHydrateModelHasFunctions.FunctionDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Function not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region nHydrateModelHasFunctions instance accessors
		
		/// <summary>
		/// Get any nHydrateModelHasFunctions links between a given nHydrateModel and a Function.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::nHydrate2.Dsl.nHydrateModelHasFunctions> GetLinks( global::nHydrate2.Dsl.nHydrateModel source, global::nHydrate2.Dsl.Function target )
		{
			global::System.Collections.Generic.List<global::nHydrate2.Dsl.nHydrateModelHasFunctions> outLinks = new global::System.Collections.Generic.List<global::nHydrate2.Dsl.nHydrateModelHasFunctions>();
			global::System.Collections.Generic.IList<global::nHydrate2.Dsl.nHydrateModelHasFunctions> links = DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate2.Dsl.nHydrateModelHasFunctions>(source, global::nHydrate2.Dsl.nHydrateModelHasFunctions.nHydrateModelDomainRoleId);
			foreach ( global::nHydrate2.Dsl.nHydrateModelHasFunctions link in links )
			{
				if ( target.Equals(link.Function) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one nHydrateModelHasFunctions link between a given nHydrateModeland a Function.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::nHydrate2.Dsl.nHydrateModelHasFunctions GetLink( global::nHydrate2.Dsl.nHydrateModel source, global::nHydrate2.Dsl.Function target )
		{
			global::System.Collections.Generic.IList<global::nHydrate2.Dsl.nHydrateModelHasFunctions> links = DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate2.Dsl.nHydrateModelHasFunctions>(source, global::nHydrate2.Dsl.nHydrateModelHasFunctions.nHydrateModelDomainRoleId);
			foreach ( global::nHydrate2.Dsl.nHydrateModelHasFunctions link in links )
			{
				if ( target.Equals(link.Function) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace nHydrate2.Dsl
{
	/// <summary>
	/// DomainRelationship FunctionHasParameters
	/// </summary>
	[DslDesign::DisplayNameResource("nHydrate2.Dsl.FunctionHasParameters.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("nHydrate2.Dsl.FunctionHasParameters.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::nHydrate2.Dsl.nHydrate2DomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("9a1cb63f-3055-4763-b2bf-0929d7853416")]
	public partial class FunctionHasParameters : DslModeling::ElementLink, System.ComponentModel.INotifyPropertyChanged
	{
		#region INotifyPropertyChanged
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs e)
		{
			if (this.PropertyChanged != null)
				this.PropertyChanged(this, e);
		}
		#endregion
	
		#region Constructors, domain class Id
		
		/// <summary>
		/// FunctionHasParameters domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x9a1cb63f, 0x3055, 0x4763, 0xb2, 0xbf, 0x09, 0x29, 0xd7, 0x85, 0x34, 0x16);
	
				
		/// <summary>
		/// Constructor
		/// Creates a FunctionHasParameters link in the same Partition as the given Function
		/// </summary>
		/// <param name="source">Function to use as the source of the relationship.</param>
		/// <param name="target">FunctionParameter to use as the target of the relationship.</param>
		public FunctionHasParameters(Function source, FunctionParameter target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(FunctionHasParameters.FunctionDomainRoleId, source), new DslModeling::RoleAssignment(FunctionHasParameters.FunctionParameterDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FunctionHasParameters(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FunctionHasParameters(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FunctionHasParameters(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FunctionHasParameters(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Function domain role code
		
		/// <summary>
		/// Function domain role Id.
		/// </summary>
		public static readonly global::System.Guid FunctionDomainRoleId = new global::System.Guid(0x88d7fe70, 0xc77a, 0x49af, 0xb9, 0xde, 0x51, 0x2e, 0x58, 0xad, 0xeb, 0x79);
		
		/// <summary>
		/// DomainRole Function
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.FunctionHasParameters/Function.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.FunctionHasParameters/Function.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Parameters", PropertyDisplayNameKey="nHydrate2.Dsl.FunctionHasParameters/Function.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("88d7fe70-c77a-49af-b9de-512e58adeb79")]
		public virtual Function Function
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Function)DslModeling::DomainRoleInfo.GetRolePlayer(this, FunctionDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, FunctionDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Function of a FunctionParameter
		/// <summary>
		/// Gets Function.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Function GetFunction(FunctionParameter element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, FunctionParameterDomainRoleId) as Function;
		}
		
		/// <summary>
		/// Sets Function.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetFunction(FunctionParameter element, Function newFunction)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, FunctionParameterDomainRoleId, newFunction);
		}
		#endregion
		#region FunctionParameter domain role code
		
		/// <summary>
		/// FunctionParameter domain role Id.
		/// </summary>
		public static readonly global::System.Guid FunctionParameterDomainRoleId = new global::System.Guid(0x01353901, 0x6ff3, 0x4a4a, 0xb8, 0xcf, 0x88, 0x7b, 0x52, 0xe4, 0xc7, 0xc2);
		
		/// <summary>
		/// DomainRole FunctionParameter
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.FunctionHasParameters/FunctionParameter.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.FunctionHasParameters/FunctionParameter.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Function", PropertyDisplayNameKey="nHydrate2.Dsl.FunctionHasParameters/FunctionParameter.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("01353901-6ff3-4a4a-b8cf-887b52e4c7c2")]
		public virtual FunctionParameter FunctionParameter
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (FunctionParameter)DslModeling::DomainRoleInfo.GetRolePlayer(this, FunctionParameterDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, FunctionParameterDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Parameters of a Function
		/// <summary>
		/// Gets a list of Parameters.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<FunctionParameter> GetParameters(Function element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<FunctionParameter>, FunctionParameter>(element, FunctionDomainRoleId);
		}
		#endregion
		#region Function link accessor
		/// <summary>
		/// Get the list of FunctionHasParameters links to a Function.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::nHydrate2.Dsl.FunctionHasParameters> GetLinksToParameters ( global::nHydrate2.Dsl.Function functionInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate2.Dsl.FunctionHasParameters>(functionInstance, global::nHydrate2.Dsl.FunctionHasParameters.FunctionDomainRoleId);
		}
		#endregion
		#region FunctionParameter link accessor
		/// <summary>
		/// Get the FunctionHasParameters link to a FunctionParameter.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::nHydrate2.Dsl.FunctionHasParameters GetLinkToFunction (global::nHydrate2.Dsl.FunctionParameter functionParameterInstance)
		{
			global::System.Collections.Generic.IList<global::nHydrate2.Dsl.FunctionHasParameters> links = DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate2.Dsl.FunctionHasParameters>(functionParameterInstance, global::nHydrate2.Dsl.FunctionHasParameters.FunctionParameterDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of FunctionParameter not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region FunctionHasParameters instance accessors
		
		/// <summary>
		/// Get any FunctionHasParameters links between a given Function and a FunctionParameter.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::nHydrate2.Dsl.FunctionHasParameters> GetLinks( global::nHydrate2.Dsl.Function source, global::nHydrate2.Dsl.FunctionParameter target )
		{
			global::System.Collections.Generic.List<global::nHydrate2.Dsl.FunctionHasParameters> outLinks = new global::System.Collections.Generic.List<global::nHydrate2.Dsl.FunctionHasParameters>();
			global::System.Collections.Generic.IList<global::nHydrate2.Dsl.FunctionHasParameters> links = DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate2.Dsl.FunctionHasParameters>(source, global::nHydrate2.Dsl.FunctionHasParameters.FunctionDomainRoleId);
			foreach ( global::nHydrate2.Dsl.FunctionHasParameters link in links )
			{
				if ( target.Equals(link.FunctionParameter) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one FunctionHasParameters link between a given Functionand a FunctionParameter.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::nHydrate2.Dsl.FunctionHasParameters GetLink( global::nHydrate2.Dsl.Function source, global::nHydrate2.Dsl.FunctionParameter target )
		{
			global::System.Collections.Generic.IList<global::nHydrate2.Dsl.FunctionHasParameters> links = DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate2.Dsl.FunctionHasParameters>(source, global::nHydrate2.Dsl.FunctionHasParameters.FunctionDomainRoleId);
			foreach ( global::nHydrate2.Dsl.FunctionHasParameters link in links )
			{
				if ( target.Equals(link.FunctionParameter) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace nHydrate2.Dsl
{
	/// <summary>
	/// DomainRelationship FunctionHasFields
	/// </summary>
	[DslDesign::DisplayNameResource("nHydrate2.Dsl.FunctionHasFields.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("nHydrate2.Dsl.FunctionHasFields.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::nHydrate2.Dsl.nHydrate2DomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("14ca3dd8-4973-439b-a145-0ec6525bb4e4")]
	public partial class FunctionHasFields : DslModeling::ElementLink, System.ComponentModel.INotifyPropertyChanged
	{
		#region INotifyPropertyChanged
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs e)
		{
			if (this.PropertyChanged != null)
				this.PropertyChanged(this, e);
		}
		#endregion
	
		#region Constructors, domain class Id
		
		/// <summary>
		/// FunctionHasFields domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x14ca3dd8, 0x4973, 0x439b, 0xa1, 0x45, 0x0e, 0xc6, 0x52, 0x5b, 0xb4, 0xe4);
	
				
		/// <summary>
		/// Constructor
		/// Creates a FunctionHasFields link in the same Partition as the given Function
		/// </summary>
		/// <param name="source">Function to use as the source of the relationship.</param>
		/// <param name="target">FunctionField to use as the target of the relationship.</param>
		public FunctionHasFields(Function source, FunctionField target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(FunctionHasFields.FunctionDomainRoleId, source), new DslModeling::RoleAssignment(FunctionHasFields.FunctionFieldDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FunctionHasFields(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FunctionHasFields(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FunctionHasFields(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FunctionHasFields(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Function domain role code
		
		/// <summary>
		/// Function domain role Id.
		/// </summary>
		public static readonly global::System.Guid FunctionDomainRoleId = new global::System.Guid(0x451ee2f4, 0x7d2a, 0x4a33, 0xae, 0xd9, 0x4e, 0xd1, 0xdf, 0xd4, 0x33, 0x96);
		
		/// <summary>
		/// DomainRole Function
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.FunctionHasFields/Function.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.FunctionHasFields/Function.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Fields", PropertyDisplayNameKey="nHydrate2.Dsl.FunctionHasFields/Function.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("451ee2f4-7d2a-4a33-aed9-4ed1dfd43396")]
		public virtual Function Function
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Function)DslModeling::DomainRoleInfo.GetRolePlayer(this, FunctionDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, FunctionDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Function of a FunctionField
		/// <summary>
		/// Gets Function.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Function GetFunction(FunctionField element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, FunctionFieldDomainRoleId) as Function;
		}
		
		/// <summary>
		/// Sets Function.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetFunction(FunctionField element, Function newFunction)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, FunctionFieldDomainRoleId, newFunction);
		}
		#endregion
		#region FunctionField domain role code
		
		/// <summary>
		/// FunctionField domain role Id.
		/// </summary>
		public static readonly global::System.Guid FunctionFieldDomainRoleId = new global::System.Guid(0xa36eb8f4, 0xc611, 0x4a64, 0xad, 0x22, 0x2d, 0xb3, 0xc7, 0x98, 0xcd, 0xa4);
		
		/// <summary>
		/// DomainRole FunctionField
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.FunctionHasFields/FunctionField.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.FunctionHasFields/FunctionField.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Function", PropertyDisplayNameKey="nHydrate2.Dsl.FunctionHasFields/FunctionField.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("a36eb8f4-c611-4a64-ad22-2db3c798cda4")]
		public virtual FunctionField FunctionField
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (FunctionField)DslModeling::DomainRoleInfo.GetRolePlayer(this, FunctionFieldDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, FunctionFieldDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Fields of a Function
		/// <summary>
		/// Gets a list of Fields.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<FunctionField> GetFields(Function element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<FunctionField>, FunctionField>(element, FunctionDomainRoleId);
		}
		#endregion
		#region Function link accessor
		/// <summary>
		/// Get the list of FunctionHasFields links to a Function.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::nHydrate2.Dsl.FunctionHasFields> GetLinksToFields ( global::nHydrate2.Dsl.Function functionInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate2.Dsl.FunctionHasFields>(functionInstance, global::nHydrate2.Dsl.FunctionHasFields.FunctionDomainRoleId);
		}
		#endregion
		#region FunctionField link accessor
		/// <summary>
		/// Get the FunctionHasFields link to a FunctionField.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::nHydrate2.Dsl.FunctionHasFields GetLinkToFunction (global::nHydrate2.Dsl.FunctionField functionFieldInstance)
		{
			global::System.Collections.Generic.IList<global::nHydrate2.Dsl.FunctionHasFields> links = DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate2.Dsl.FunctionHasFields>(functionFieldInstance, global::nHydrate2.Dsl.FunctionHasFields.FunctionFieldDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of FunctionField not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region FunctionHasFields instance accessors
		
		/// <summary>
		/// Get any FunctionHasFields links between a given Function and a FunctionField.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::nHydrate2.Dsl.FunctionHasFields> GetLinks( global::nHydrate2.Dsl.Function source, global::nHydrate2.Dsl.FunctionField target )
		{
			global::System.Collections.Generic.List<global::nHydrate2.Dsl.FunctionHasFields> outLinks = new global::System.Collections.Generic.List<global::nHydrate2.Dsl.FunctionHasFields>();
			global::System.Collections.Generic.IList<global::nHydrate2.Dsl.FunctionHasFields> links = DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate2.Dsl.FunctionHasFields>(source, global::nHydrate2.Dsl.FunctionHasFields.FunctionDomainRoleId);
			foreach ( global::nHydrate2.Dsl.FunctionHasFields link in links )
			{
				if ( target.Equals(link.FunctionField) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one FunctionHasFields link between a given Functionand a FunctionField.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::nHydrate2.Dsl.FunctionHasFields GetLink( global::nHydrate2.Dsl.Function source, global::nHydrate2.Dsl.FunctionField target )
		{
			global::System.Collections.Generic.IList<global::nHydrate2.Dsl.FunctionHasFields> links = DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate2.Dsl.FunctionHasFields>(source, global::nHydrate2.Dsl.FunctionHasFields.FunctionDomainRoleId);
			foreach ( global::nHydrate2.Dsl.FunctionHasFields link in links )
			{
				if ( target.Equals(link.FunctionField) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace nHydrate2.Dsl
{
	/// <summary>
	/// DomainRelationship nHydrateModelHasModules
	/// </summary>
	[DslDesign::DisplayNameResource("nHydrate2.Dsl.nHydrateModelHasModules.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("nHydrate2.Dsl.nHydrateModelHasModules.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::nHydrate2.Dsl.nHydrate2DomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("7dc59c60-a41c-40cd-8089-23ede64cf6ba")]
	public partial class nHydrateModelHasModules : DslModeling::ElementLink, System.ComponentModel.INotifyPropertyChanged
	{
		#region INotifyPropertyChanged
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs e)
		{
			if (this.PropertyChanged != null)
				this.PropertyChanged(this, e);
		}
		#endregion
	
		#region Constructors, domain class Id
		
		/// <summary>
		/// nHydrateModelHasModules domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x7dc59c60, 0xa41c, 0x40cd, 0x80, 0x89, 0x23, 0xed, 0xe6, 0x4c, 0xf6, 0xba);
	
				
		/// <summary>
		/// Constructor
		/// Creates a nHydrateModelHasModules link in the same Partition as the given nHydrateModel
		/// </summary>
		/// <param name="source">nHydrateModel to use as the source of the relationship.</param>
		/// <param name="target">Module to use as the target of the relationship.</param>
		public nHydrateModelHasModules(nHydrateModel source, Module target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(nHydrateModelHasModules.nHydrateModelDomainRoleId, source), new DslModeling::RoleAssignment(nHydrateModelHasModules.ModuleDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public nHydrateModelHasModules(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public nHydrateModelHasModules(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public nHydrateModelHasModules(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public nHydrateModelHasModules(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region nHydrateModel domain role code
		
		/// <summary>
		/// nHydrateModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid nHydrateModelDomainRoleId = new global::System.Guid(0x536fb7b9, 0x3fc4, 0x42e0, 0x99, 0x2a, 0xee, 0x28, 0xc5, 0x3b, 0x75, 0xd6);
		
		/// <summary>
		/// DomainRole nHydrateModel
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.nHydrateModelHasModules/nHydrateModel.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.nHydrateModelHasModules/nHydrateModel.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Modules", PropertyDisplayNameKey="nHydrate2.Dsl.nHydrateModelHasModules/nHydrateModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("536fb7b9-3fc4-42e0-992a-ee28c53b75d6")]
		public virtual nHydrateModel nHydrateModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (nHydrateModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, nHydrateModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, nHydrateModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access nHydrateModel of a Module
		/// <summary>
		/// Gets nHydrateModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static nHydrateModel GetnHydrateModel(Module element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ModuleDomainRoleId) as nHydrateModel;
		}
		
		/// <summary>
		/// Sets nHydrateModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetnHydrateModel(Module element, nHydrateModel newnHydrateModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ModuleDomainRoleId, newnHydrateModel);
		}
		#endregion
		#region Module domain role code
		
		/// <summary>
		/// Module domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModuleDomainRoleId = new global::System.Guid(0xfc4998e0, 0x9a90, 0x49b4, 0x95, 0x6d, 0x19, 0x0b, 0xbd, 0x95, 0x2e, 0x61);
		
		/// <summary>
		/// DomainRole Module
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.nHydrateModelHasModules/Module.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.nHydrateModelHasModules/Module.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "nHydrateModel", PropertyDisplayNameKey="nHydrate2.Dsl.nHydrateModelHasModules/Module.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("fc4998e0-9a90-49b4-956d-190bbd952e61")]
		public virtual Module Module
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Module)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModuleDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModuleDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Modules of a nHydrateModel
		/// <summary>
		/// Gets a list of Modules.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Module> GetModules(nHydrateModel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Module>, Module>(element, nHydrateModelDomainRoleId);
		}
		#endregion
		#region nHydrateModel link accessor
		/// <summary>
		/// Get the list of nHydrateModelHasModules links to a nHydrateModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::nHydrate2.Dsl.nHydrateModelHasModules> GetLinksToModules ( global::nHydrate2.Dsl.nHydrateModel nHydrateModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate2.Dsl.nHydrateModelHasModules>(nHydrateModelInstance, global::nHydrate2.Dsl.nHydrateModelHasModules.nHydrateModelDomainRoleId);
		}
		#endregion
		#region Module link accessor
		/// <summary>
		/// Get the nHydrateModelHasModules link to a Module.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::nHydrate2.Dsl.nHydrateModelHasModules GetLinkTonHydrateModel (global::nHydrate2.Dsl.Module moduleInstance)
		{
			global::System.Collections.Generic.IList<global::nHydrate2.Dsl.nHydrateModelHasModules> links = DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate2.Dsl.nHydrateModelHasModules>(moduleInstance, global::nHydrate2.Dsl.nHydrateModelHasModules.ModuleDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Module not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region nHydrateModelHasModules instance accessors
		
		/// <summary>
		/// Get any nHydrateModelHasModules links between a given nHydrateModel and a Module.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::nHydrate2.Dsl.nHydrateModelHasModules> GetLinks( global::nHydrate2.Dsl.nHydrateModel source, global::nHydrate2.Dsl.Module target )
		{
			global::System.Collections.Generic.List<global::nHydrate2.Dsl.nHydrateModelHasModules> outLinks = new global::System.Collections.Generic.List<global::nHydrate2.Dsl.nHydrateModelHasModules>();
			global::System.Collections.Generic.IList<global::nHydrate2.Dsl.nHydrateModelHasModules> links = DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate2.Dsl.nHydrateModelHasModules>(source, global::nHydrate2.Dsl.nHydrateModelHasModules.nHydrateModelDomainRoleId);
			foreach ( global::nHydrate2.Dsl.nHydrateModelHasModules link in links )
			{
				if ( target.Equals(link.Module) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one nHydrateModelHasModules link between a given nHydrateModeland a Module.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::nHydrate2.Dsl.nHydrateModelHasModules GetLink( global::nHydrate2.Dsl.nHydrateModel source, global::nHydrate2.Dsl.Module target )
		{
			global::System.Collections.Generic.IList<global::nHydrate2.Dsl.nHydrateModelHasModules> links = DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate2.Dsl.nHydrateModelHasModules>(source, global::nHydrate2.Dsl.nHydrateModelHasModules.nHydrateModelDomainRoleId);
			foreach ( global::nHydrate2.Dsl.nHydrateModelHasModules link in links )
			{
				if ( target.Equals(link.Module) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace nHydrate2.Dsl
{
	/// <summary>
	/// DomainRelationship FunctionReferencesModules
	/// </summary>
	[DslDesign::DisplayNameResource("nHydrate2.Dsl.FunctionReferencesModules.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("nHydrate2.Dsl.FunctionReferencesModules.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::nHydrate2.Dsl.nHydrate2DomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("f1cd3837-4ae7-4258-9092-f6af1931d0e6")]
	public partial class FunctionReferencesModules : DslModeling::ElementLink, System.ComponentModel.INotifyPropertyChanged
	{
		#region INotifyPropertyChanged
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs e)
		{
			if (this.PropertyChanged != null)
				this.PropertyChanged(this, e);
		}
		#endregion
	
		#region Constructors, domain class Id
		
		/// <summary>
		/// FunctionReferencesModules domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xf1cd3837, 0x4ae7, 0x4258, 0x90, 0x92, 0xf6, 0xaf, 0x19, 0x31, 0xd0, 0xe6);
	
				
		/// <summary>
		/// Constructor
		/// Creates a FunctionReferencesModules link in the same Partition as the given Function
		/// </summary>
		/// <param name="source">Function to use as the source of the relationship.</param>
		/// <param name="target">Module to use as the target of the relationship.</param>
		public FunctionReferencesModules(Function source, Module target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(FunctionReferencesModules.FunctionDomainRoleId, source), new DslModeling::RoleAssignment(FunctionReferencesModules.ModuleDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FunctionReferencesModules(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FunctionReferencesModules(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FunctionReferencesModules(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FunctionReferencesModules(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Function domain role code
		
		/// <summary>
		/// Function domain role Id.
		/// </summary>
		public static readonly global::System.Guid FunctionDomainRoleId = new global::System.Guid(0xbc343ccc, 0xe73c, 0x401a, 0xb6, 0x86, 0xfe, 0x03, 0x6e, 0xf8, 0x19, 0xfe);
		
		/// <summary>
		/// DomainRole Function
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.FunctionReferencesModules/Function.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.FunctionReferencesModules/Function.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Modules", PropertyDisplayNameKey="nHydrate2.Dsl.FunctionReferencesModules/Function.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("bc343ccc-e73c-401a-b686-fe036ef819fe")]
		public virtual Function Function
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Function)DslModeling::DomainRoleInfo.GetRolePlayer(this, FunctionDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, FunctionDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Functions of a Module
		/// <summary>
		/// Gets a list of Functions.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Function> GetFunctions(Module element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Function>, Function>(element, ModuleDomainRoleId);
		}
		#endregion
		#region Module domain role code
		
		/// <summary>
		/// Module domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModuleDomainRoleId = new global::System.Guid(0xc9223f95, 0x89ed, 0x43b9, 0xb4, 0xf1, 0x18, 0xac, 0xf2, 0xb0, 0x72, 0xe8);
		
		/// <summary>
		/// DomainRole Module
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.FunctionReferencesModules/Module.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.FunctionReferencesModules/Module.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Functions", PropertyDisplayNameKey="nHydrate2.Dsl.FunctionReferencesModules/Module.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("c9223f95-89ed-43b9-b4f1-18acf2b072e8")]
		public virtual Module Module
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Module)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModuleDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModuleDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Modules of a Function
		/// <summary>
		/// Gets a list of Modules.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Module> GetModules(Function element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Module>, Module>(element, FunctionDomainRoleId);
		}
		#endregion
		#region Function link accessor
		/// <summary>
		/// Get the list of FunctionReferencesModules links to a Function.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::nHydrate2.Dsl.FunctionReferencesModules> GetLinksToModules ( global::nHydrate2.Dsl.Function functionInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate2.Dsl.FunctionReferencesModules>(functionInstance, global::nHydrate2.Dsl.FunctionReferencesModules.FunctionDomainRoleId);
		}
		#endregion
		#region Module link accessor
		/// <summary>
		/// Get the list of FunctionReferencesModules links to a Module.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::nHydrate2.Dsl.FunctionReferencesModules> GetLinksToFunctions ( global::nHydrate2.Dsl.Module moduleInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate2.Dsl.FunctionReferencesModules>(moduleInstance, global::nHydrate2.Dsl.FunctionReferencesModules.ModuleDomainRoleId);
		}
		#endregion
		#region FunctionReferencesModules instance accessors
		
		/// <summary>
		/// Get any FunctionReferencesModules links between a given Function and a Module.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::nHydrate2.Dsl.FunctionReferencesModules> GetLinks( global::nHydrate2.Dsl.Function source, global::nHydrate2.Dsl.Module target )
		{
			global::System.Collections.Generic.List<global::nHydrate2.Dsl.FunctionReferencesModules> outLinks = new global::System.Collections.Generic.List<global::nHydrate2.Dsl.FunctionReferencesModules>();
			global::System.Collections.Generic.IList<global::nHydrate2.Dsl.FunctionReferencesModules> links = DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate2.Dsl.FunctionReferencesModules>(source, global::nHydrate2.Dsl.FunctionReferencesModules.FunctionDomainRoleId);
			foreach ( global::nHydrate2.Dsl.FunctionReferencesModules link in links )
			{
				if ( target.Equals(link.Module) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one FunctionReferencesModules link between a given Functionand a Module.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::nHydrate2.Dsl.FunctionReferencesModules GetLink( global::nHydrate2.Dsl.Function source, global::nHydrate2.Dsl.Module target )
		{
			global::System.Collections.Generic.IList<global::nHydrate2.Dsl.FunctionReferencesModules> links = DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate2.Dsl.FunctionReferencesModules>(source, global::nHydrate2.Dsl.FunctionReferencesModules.FunctionDomainRoleId);
			foreach ( global::nHydrate2.Dsl.FunctionReferencesModules link in links )
			{
				if ( target.Equals(link.Module) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace nHydrate2.Dsl
{
	/// <summary>
	/// DomainRelationship ViewReferencesModules
	/// </summary>
	[DslDesign::DisplayNameResource("nHydrate2.Dsl.ViewReferencesModules.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("nHydrate2.Dsl.ViewReferencesModules.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::nHydrate2.Dsl.nHydrate2DomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("864ca82b-4b9f-4789-aff6-8d09a35458be")]
	public partial class ViewReferencesModules : DslModeling::ElementLink, System.ComponentModel.INotifyPropertyChanged
	{
		#region INotifyPropertyChanged
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs e)
		{
			if (this.PropertyChanged != null)
				this.PropertyChanged(this, e);
		}
		#endregion
	
		#region Constructors, domain class Id
		
		/// <summary>
		/// ViewReferencesModules domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x864ca82b, 0x4b9f, 0x4789, 0xaf, 0xf6, 0x8d, 0x09, 0xa3, 0x54, 0x58, 0xbe);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ViewReferencesModules link in the same Partition as the given View
		/// </summary>
		/// <param name="source">View to use as the source of the relationship.</param>
		/// <param name="target">Module to use as the target of the relationship.</param>
		public ViewReferencesModules(View source, Module target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ViewReferencesModules.ViewDomainRoleId, source), new DslModeling::RoleAssignment(ViewReferencesModules.ModuleDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ViewReferencesModules(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ViewReferencesModules(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ViewReferencesModules(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ViewReferencesModules(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region View domain role code
		
		/// <summary>
		/// View domain role Id.
		/// </summary>
		public static readonly global::System.Guid ViewDomainRoleId = new global::System.Guid(0xe3badaaf, 0x3c03, 0x4591, 0xbc, 0x64, 0x3a, 0x24, 0xb5, 0x26, 0x72, 0xbe);
		
		/// <summary>
		/// DomainRole View
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.ViewReferencesModules/View.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.ViewReferencesModules/View.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Modules", PropertyDisplayNameKey="nHydrate2.Dsl.ViewReferencesModules/View.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("e3badaaf-3c03-4591-bc64-3a24b52672be")]
		public virtual View View
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (View)DslModeling::DomainRoleInfo.GetRolePlayer(this, ViewDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ViewDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Views of a Module
		/// <summary>
		/// Gets a list of Views.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<View> GetViews(Module element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<View>, View>(element, ModuleDomainRoleId);
		}
		#endregion
		#region Module domain role code
		
		/// <summary>
		/// Module domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModuleDomainRoleId = new global::System.Guid(0xe0aa72a9, 0xf768, 0x42d6, 0x8c, 0xdd, 0x76, 0x1c, 0x0e, 0x29, 0xb5, 0xbf);
		
		/// <summary>
		/// DomainRole Module
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.ViewReferencesModules/Module.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.ViewReferencesModules/Module.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Views", PropertyDisplayNameKey="nHydrate2.Dsl.ViewReferencesModules/Module.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("e0aa72a9-f768-42d6-8cdd-761c0e29b5bf")]
		public virtual Module Module
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Module)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModuleDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModuleDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Modules of a View
		/// <summary>
		/// Gets a list of Modules.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Module> GetModules(View element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Module>, Module>(element, ViewDomainRoleId);
		}
		#endregion
		#region View link accessor
		/// <summary>
		/// Get the list of ViewReferencesModules links to a View.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::nHydrate2.Dsl.ViewReferencesModules> GetLinksToModules ( global::nHydrate2.Dsl.View viewInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate2.Dsl.ViewReferencesModules>(viewInstance, global::nHydrate2.Dsl.ViewReferencesModules.ViewDomainRoleId);
		}
		#endregion
		#region Module link accessor
		/// <summary>
		/// Get the list of ViewReferencesModules links to a Module.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::nHydrate2.Dsl.ViewReferencesModules> GetLinksToViews ( global::nHydrate2.Dsl.Module moduleInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate2.Dsl.ViewReferencesModules>(moduleInstance, global::nHydrate2.Dsl.ViewReferencesModules.ModuleDomainRoleId);
		}
		#endregion
		#region ViewReferencesModules instance accessors
		
		/// <summary>
		/// Get any ViewReferencesModules links between a given View and a Module.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::nHydrate2.Dsl.ViewReferencesModules> GetLinks( global::nHydrate2.Dsl.View source, global::nHydrate2.Dsl.Module target )
		{
			global::System.Collections.Generic.List<global::nHydrate2.Dsl.ViewReferencesModules> outLinks = new global::System.Collections.Generic.List<global::nHydrate2.Dsl.ViewReferencesModules>();
			global::System.Collections.Generic.IList<global::nHydrate2.Dsl.ViewReferencesModules> links = DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate2.Dsl.ViewReferencesModules>(source, global::nHydrate2.Dsl.ViewReferencesModules.ViewDomainRoleId);
			foreach ( global::nHydrate2.Dsl.ViewReferencesModules link in links )
			{
				if ( target.Equals(link.Module) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ViewReferencesModules link between a given Viewand a Module.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::nHydrate2.Dsl.ViewReferencesModules GetLink( global::nHydrate2.Dsl.View source, global::nHydrate2.Dsl.Module target )
		{
			global::System.Collections.Generic.IList<global::nHydrate2.Dsl.ViewReferencesModules> links = DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate2.Dsl.ViewReferencesModules>(source, global::nHydrate2.Dsl.ViewReferencesModules.ViewDomainRoleId);
			foreach ( global::nHydrate2.Dsl.ViewReferencesModules link in links )
			{
				if ( target.Equals(link.Module) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace nHydrate2.Dsl
{
	/// <summary>
	/// DomainRelationship StoredProcedureReferencesModules
	/// </summary>
	[DslDesign::DisplayNameResource("nHydrate2.Dsl.StoredProcedureReferencesModules.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("nHydrate2.Dsl.StoredProcedureReferencesModules.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::nHydrate2.Dsl.nHydrate2DomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("14f0b73a-8b9c-440f-8104-95dd375446e9")]
	public partial class StoredProcedureReferencesModules : DslModeling::ElementLink, System.ComponentModel.INotifyPropertyChanged
	{
		#region INotifyPropertyChanged
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs e)
		{
			if (this.PropertyChanged != null)
				this.PropertyChanged(this, e);
		}
		#endregion
	
		#region Constructors, domain class Id
		
		/// <summary>
		/// StoredProcedureReferencesModules domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x14f0b73a, 0x8b9c, 0x440f, 0x81, 0x04, 0x95, 0xdd, 0x37, 0x54, 0x46, 0xe9);
	
				
		/// <summary>
		/// Constructor
		/// Creates a StoredProcedureReferencesModules link in the same Partition as the given StoredProcedure
		/// </summary>
		/// <param name="source">StoredProcedure to use as the source of the relationship.</param>
		/// <param name="target">Module to use as the target of the relationship.</param>
		public StoredProcedureReferencesModules(StoredProcedure source, Module target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(StoredProcedureReferencesModules.StoredProcedureDomainRoleId, source), new DslModeling::RoleAssignment(StoredProcedureReferencesModules.ModuleDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public StoredProcedureReferencesModules(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public StoredProcedureReferencesModules(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public StoredProcedureReferencesModules(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public StoredProcedureReferencesModules(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region StoredProcedure domain role code
		
		/// <summary>
		/// StoredProcedure domain role Id.
		/// </summary>
		public static readonly global::System.Guid StoredProcedureDomainRoleId = new global::System.Guid(0x74dc297f, 0x50d0, 0x407d, 0x86, 0x5c, 0xb0, 0x2d, 0x1d, 0xbf, 0x55, 0xfd);
		
		/// <summary>
		/// DomainRole StoredProcedure
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.StoredProcedureReferencesModules/StoredProcedure.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.StoredProcedureReferencesModules/StoredProcedure.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Modules", PropertyDisplayNameKey="nHydrate2.Dsl.StoredProcedureReferencesModules/StoredProcedure.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("74dc297f-50d0-407d-865c-b02d1dbf55fd")]
		public virtual StoredProcedure StoredProcedure
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (StoredProcedure)DslModeling::DomainRoleInfo.GetRolePlayer(this, StoredProcedureDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, StoredProcedureDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access StoredProcedures of a Module
		/// <summary>
		/// Gets a list of StoredProcedures.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<StoredProcedure> GetStoredProcedures(Module element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<StoredProcedure>, StoredProcedure>(element, ModuleDomainRoleId);
		}
		#endregion
		#region Module domain role code
		
		/// <summary>
		/// Module domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModuleDomainRoleId = new global::System.Guid(0x974a57aa, 0x20c4, 0x4835, 0xb4, 0xda, 0x65, 0xad, 0xb9, 0x84, 0xe5, 0x65);
		
		/// <summary>
		/// DomainRole Module
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.StoredProcedureReferencesModules/Module.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.StoredProcedureReferencesModules/Module.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "StoredProcedures", PropertyDisplayNameKey="nHydrate2.Dsl.StoredProcedureReferencesModules/Module.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("974a57aa-20c4-4835-b4da-65adb984e565")]
		public virtual Module Module
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Module)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModuleDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModuleDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Modules of a StoredProcedure
		/// <summary>
		/// Gets a list of Modules.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Module> GetModules(StoredProcedure element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Module>, Module>(element, StoredProcedureDomainRoleId);
		}
		#endregion
		#region StoredProcedure link accessor
		/// <summary>
		/// Get the list of StoredProcedureReferencesModules links to a StoredProcedure.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::nHydrate2.Dsl.StoredProcedureReferencesModules> GetLinksToModules ( global::nHydrate2.Dsl.StoredProcedure storedProcedureInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate2.Dsl.StoredProcedureReferencesModules>(storedProcedureInstance, global::nHydrate2.Dsl.StoredProcedureReferencesModules.StoredProcedureDomainRoleId);
		}
		#endregion
		#region Module link accessor
		/// <summary>
		/// Get the list of StoredProcedureReferencesModules links to a Module.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::nHydrate2.Dsl.StoredProcedureReferencesModules> GetLinksToStoredProcedures ( global::nHydrate2.Dsl.Module moduleInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate2.Dsl.StoredProcedureReferencesModules>(moduleInstance, global::nHydrate2.Dsl.StoredProcedureReferencesModules.ModuleDomainRoleId);
		}
		#endregion
		#region StoredProcedureReferencesModules instance accessors
		
		/// <summary>
		/// Get any StoredProcedureReferencesModules links between a given StoredProcedure and a Module.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::nHydrate2.Dsl.StoredProcedureReferencesModules> GetLinks( global::nHydrate2.Dsl.StoredProcedure source, global::nHydrate2.Dsl.Module target )
		{
			global::System.Collections.Generic.List<global::nHydrate2.Dsl.StoredProcedureReferencesModules> outLinks = new global::System.Collections.Generic.List<global::nHydrate2.Dsl.StoredProcedureReferencesModules>();
			global::System.Collections.Generic.IList<global::nHydrate2.Dsl.StoredProcedureReferencesModules> links = DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate2.Dsl.StoredProcedureReferencesModules>(source, global::nHydrate2.Dsl.StoredProcedureReferencesModules.StoredProcedureDomainRoleId);
			foreach ( global::nHydrate2.Dsl.StoredProcedureReferencesModules link in links )
			{
				if ( target.Equals(link.Module) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one StoredProcedureReferencesModules link between a given StoredProcedureand a Module.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::nHydrate2.Dsl.StoredProcedureReferencesModules GetLink( global::nHydrate2.Dsl.StoredProcedure source, global::nHydrate2.Dsl.Module target )
		{
			global::System.Collections.Generic.IList<global::nHydrate2.Dsl.StoredProcedureReferencesModules> links = DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate2.Dsl.StoredProcedureReferencesModules>(source, global::nHydrate2.Dsl.StoredProcedureReferencesModules.StoredProcedureDomainRoleId);
			foreach ( global::nHydrate2.Dsl.StoredProcedureReferencesModules link in links )
			{
				if ( target.Equals(link.Module) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace nHydrate2.Dsl
{
	/// <summary>
	/// DomainRelationship EntityReferencesModules
	/// </summary>
	[DslDesign::DisplayNameResource("nHydrate2.Dsl.EntityReferencesModules.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("nHydrate2.Dsl.EntityReferencesModules.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::nHydrate2.Dsl.nHydrate2DomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("bc309d93-1b8b-491e-9e04-7114b1f3991c")]
	public partial class EntityReferencesModules : DslModeling::ElementLink, System.ComponentModel.INotifyPropertyChanged
	{
		#region INotifyPropertyChanged
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs e)
		{
			if (this.PropertyChanged != null)
				this.PropertyChanged(this, e);
		}
		#endregion
	
		#region Constructors, domain class Id
		
		/// <summary>
		/// EntityReferencesModules domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xbc309d93, 0x1b8b, 0x491e, 0x9e, 0x04, 0x71, 0x14, 0xb1, 0xf3, 0x99, 0x1c);
	
				
		/// <summary>
		/// Constructor
		/// Creates a EntityReferencesModules link in the same Partition as the given Entity
		/// </summary>
		/// <param name="source">Entity to use as the source of the relationship.</param>
		/// <param name="target">Module to use as the target of the relationship.</param>
		public EntityReferencesModules(Entity source, Module target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(EntityReferencesModules.EntityDomainRoleId, source), new DslModeling::RoleAssignment(EntityReferencesModules.ModuleDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EntityReferencesModules(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EntityReferencesModules(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EntityReferencesModules(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EntityReferencesModules(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Entity domain role code
		
		/// <summary>
		/// Entity domain role Id.
		/// </summary>
		public static readonly global::System.Guid EntityDomainRoleId = new global::System.Guid(0x9921890f, 0x3210, 0x4d22, 0xa8, 0x0b, 0xad, 0x60, 0xa0, 0x4b, 0xab, 0xf4);
		
		/// <summary>
		/// DomainRole Entity
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.EntityReferencesModules/Entity.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.EntityReferencesModules/Entity.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Modules", PropertyDisplayNameKey="nHydrate2.Dsl.EntityReferencesModules/Entity.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("9921890f-3210-4d22-a80b-ad60a04babf4")]
		public virtual Entity Entity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Entity)DslModeling::DomainRoleInfo.GetRolePlayer(this, EntityDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, EntityDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Entities of a Module
		/// <summary>
		/// Gets a list of Entities.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Entity> GetEntities(Module element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Entity>, Entity>(element, ModuleDomainRoleId);
		}
		#endregion
		#region Module domain role code
		
		/// <summary>
		/// Module domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModuleDomainRoleId = new global::System.Guid(0x634b3be3, 0xb507, 0x4353, 0x93, 0xe7, 0x1e, 0x35, 0xac, 0xb2, 0x5a, 0x2d);
		
		/// <summary>
		/// DomainRole Module
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.EntityReferencesModules/Module.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.EntityReferencesModules/Module.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Entities", PropertyDisplayNameKey="nHydrate2.Dsl.EntityReferencesModules/Module.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("634b3be3-b507-4353-93e7-1e35acb25a2d")]
		public virtual Module Module
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Module)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModuleDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModuleDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Modules of a Entity
		/// <summary>
		/// Gets a list of Modules.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Module> GetModules(Entity element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Module>, Module>(element, EntityDomainRoleId);
		}
		#endregion
		#region Entity link accessor
		/// <summary>
		/// Get the list of EntityReferencesModules links to a Entity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::nHydrate2.Dsl.EntityReferencesModules> GetLinksToModules ( global::nHydrate2.Dsl.Entity entityInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate2.Dsl.EntityReferencesModules>(entityInstance, global::nHydrate2.Dsl.EntityReferencesModules.EntityDomainRoleId);
		}
		#endregion
		#region Module link accessor
		/// <summary>
		/// Get the list of EntityReferencesModules links to a Module.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::nHydrate2.Dsl.EntityReferencesModules> GetLinksToEntities ( global::nHydrate2.Dsl.Module moduleInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate2.Dsl.EntityReferencesModules>(moduleInstance, global::nHydrate2.Dsl.EntityReferencesModules.ModuleDomainRoleId);
		}
		#endregion
		#region EntityReferencesModules instance accessors
		
		/// <summary>
		/// Get any EntityReferencesModules links between a given Entity and a Module.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::nHydrate2.Dsl.EntityReferencesModules> GetLinks( global::nHydrate2.Dsl.Entity source, global::nHydrate2.Dsl.Module target )
		{
			global::System.Collections.Generic.List<global::nHydrate2.Dsl.EntityReferencesModules> outLinks = new global::System.Collections.Generic.List<global::nHydrate2.Dsl.EntityReferencesModules>();
			global::System.Collections.Generic.IList<global::nHydrate2.Dsl.EntityReferencesModules> links = DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate2.Dsl.EntityReferencesModules>(source, global::nHydrate2.Dsl.EntityReferencesModules.EntityDomainRoleId);
			foreach ( global::nHydrate2.Dsl.EntityReferencesModules link in links )
			{
				if ( target.Equals(link.Module) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one EntityReferencesModules link between a given Entityand a Module.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::nHydrate2.Dsl.EntityReferencesModules GetLink( global::nHydrate2.Dsl.Entity source, global::nHydrate2.Dsl.Module target )
		{
			global::System.Collections.Generic.IList<global::nHydrate2.Dsl.EntityReferencesModules> links = DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate2.Dsl.EntityReferencesModules>(source, global::nHydrate2.Dsl.EntityReferencesModules.EntityDomainRoleId);
			foreach ( global::nHydrate2.Dsl.EntityReferencesModules link in links )
			{
				if ( target.Equals(link.Module) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace nHydrate2.Dsl
{
	/// <summary>
	/// DomainRelationship FieldReferencesModules
	/// </summary>
	[DslDesign::DisplayNameResource("nHydrate2.Dsl.FieldReferencesModules.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("nHydrate2.Dsl.FieldReferencesModules.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::nHydrate2.Dsl.nHydrate2DomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("f07e8dd2-a74e-4e61-b7f7-b704a373d9c0")]
	public partial class FieldReferencesModules : DslModeling::ElementLink, System.ComponentModel.INotifyPropertyChanged
	{
		#region INotifyPropertyChanged
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs e)
		{
			if (this.PropertyChanged != null)
				this.PropertyChanged(this, e);
		}
		#endregion
	
		#region Constructors, domain class Id
		
		/// <summary>
		/// FieldReferencesModules domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xf07e8dd2, 0xa74e, 0x4e61, 0xb7, 0xf7, 0xb7, 0x04, 0xa3, 0x73, 0xd9, 0xc0);
	
				
		/// <summary>
		/// Constructor
		/// Creates a FieldReferencesModules link in the same Partition as the given Field
		/// </summary>
		/// <param name="source">Field to use as the source of the relationship.</param>
		/// <param name="target">Module to use as the target of the relationship.</param>
		public FieldReferencesModules(Field source, Module target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(FieldReferencesModules.FieldDomainRoleId, source), new DslModeling::RoleAssignment(FieldReferencesModules.ModuleDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FieldReferencesModules(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FieldReferencesModules(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FieldReferencesModules(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FieldReferencesModules(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Field domain role code
		
		/// <summary>
		/// Field domain role Id.
		/// </summary>
		public static readonly global::System.Guid FieldDomainRoleId = new global::System.Guid(0xba2d3941, 0x91ea, 0x4ad6, 0x99, 0x22, 0x11, 0xad, 0xc3, 0xea, 0x63, 0x03);
		
		/// <summary>
		/// DomainRole Field
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.FieldReferencesModules/Field.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.FieldReferencesModules/Field.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Modules", PropertyDisplayNameKey="nHydrate2.Dsl.FieldReferencesModules/Field.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("ba2d3941-91ea-4ad6-9922-11adc3ea6303")]
		public virtual Field Field
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Field)DslModeling::DomainRoleInfo.GetRolePlayer(this, FieldDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, FieldDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Fields of a Module
		/// <summary>
		/// Gets a list of Fields.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Field> GetFields(Module element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Field>, Field>(element, ModuleDomainRoleId);
		}
		#endregion
		#region Module domain role code
		
		/// <summary>
		/// Module domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModuleDomainRoleId = new global::System.Guid(0x18791071, 0x92e0, 0x4629, 0xb6, 0x3f, 0x9d, 0x80, 0xf1, 0x06, 0x41, 0x3c);
		
		/// <summary>
		/// DomainRole Module
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.FieldReferencesModules/Module.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.FieldReferencesModules/Module.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Fields", PropertyDisplayNameKey="nHydrate2.Dsl.FieldReferencesModules/Module.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("18791071-92e0-4629-b63f-9d80f106413c")]
		public virtual Module Module
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Module)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModuleDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModuleDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Modules of a Field
		/// <summary>
		/// Gets a list of Modules.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Module> GetModules(Field element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Module>, Module>(element, FieldDomainRoleId);
		}
		#endregion
		#region Field link accessor
		/// <summary>
		/// Get the list of FieldReferencesModules links to a Field.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::nHydrate2.Dsl.FieldReferencesModules> GetLinksToModules ( global::nHydrate2.Dsl.Field fieldInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate2.Dsl.FieldReferencesModules>(fieldInstance, global::nHydrate2.Dsl.FieldReferencesModules.FieldDomainRoleId);
		}
		#endregion
		#region Module link accessor
		/// <summary>
		/// Get the list of FieldReferencesModules links to a Module.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::nHydrate2.Dsl.FieldReferencesModules> GetLinksToFields ( global::nHydrate2.Dsl.Module moduleInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate2.Dsl.FieldReferencesModules>(moduleInstance, global::nHydrate2.Dsl.FieldReferencesModules.ModuleDomainRoleId);
		}
		#endregion
		#region FieldReferencesModules instance accessors
		
		/// <summary>
		/// Get any FieldReferencesModules links between a given Field and a Module.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::nHydrate2.Dsl.FieldReferencesModules> GetLinks( global::nHydrate2.Dsl.Field source, global::nHydrate2.Dsl.Module target )
		{
			global::System.Collections.Generic.List<global::nHydrate2.Dsl.FieldReferencesModules> outLinks = new global::System.Collections.Generic.List<global::nHydrate2.Dsl.FieldReferencesModules>();
			global::System.Collections.Generic.IList<global::nHydrate2.Dsl.FieldReferencesModules> links = DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate2.Dsl.FieldReferencesModules>(source, global::nHydrate2.Dsl.FieldReferencesModules.FieldDomainRoleId);
			foreach ( global::nHydrate2.Dsl.FieldReferencesModules link in links )
			{
				if ( target.Equals(link.Module) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one FieldReferencesModules link between a given Fieldand a Module.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::nHydrate2.Dsl.FieldReferencesModules GetLink( global::nHydrate2.Dsl.Field source, global::nHydrate2.Dsl.Module target )
		{
			global::System.Collections.Generic.IList<global::nHydrate2.Dsl.FieldReferencesModules> links = DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate2.Dsl.FieldReferencesModules>(source, global::nHydrate2.Dsl.FieldReferencesModules.FieldDomainRoleId);
			foreach ( global::nHydrate2.Dsl.FieldReferencesModules link in links )
			{
				if ( target.Equals(link.Module) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace nHydrate2.Dsl
{
	/// <summary>
	/// DomainRelationship nHydrateModelHasRelationModules
	/// </summary>
	[DslDesign::DisplayNameResource("nHydrate2.Dsl.nHydrateModelHasRelationModules.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("nHydrate2.Dsl.nHydrateModelHasRelationModules.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::nHydrate2.Dsl.nHydrate2DomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("d6fcf125-9fc1-4537-a9fc-80b04ab84d22")]
	public partial class nHydrateModelHasRelationModules : DslModeling::ElementLink, System.ComponentModel.INotifyPropertyChanged
	{
		#region INotifyPropertyChanged
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs e)
		{
			if (this.PropertyChanged != null)
				this.PropertyChanged(this, e);
		}
		#endregion
	
		#region Constructors, domain class Id
		
		/// <summary>
		/// nHydrateModelHasRelationModules domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xd6fcf125, 0x9fc1, 0x4537, 0xa9, 0xfc, 0x80, 0xb0, 0x4a, 0xb8, 0x4d, 0x22);
	
				
		/// <summary>
		/// Constructor
		/// Creates a nHydrateModelHasRelationModules link in the same Partition as the given nHydrateModel
		/// </summary>
		/// <param name="source">nHydrateModel to use as the source of the relationship.</param>
		/// <param name="target">RelationModule to use as the target of the relationship.</param>
		public nHydrateModelHasRelationModules(nHydrateModel source, RelationModule target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(nHydrateModelHasRelationModules.nHydrateModelDomainRoleId, source), new DslModeling::RoleAssignment(nHydrateModelHasRelationModules.RelationModuleDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public nHydrateModelHasRelationModules(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public nHydrateModelHasRelationModules(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public nHydrateModelHasRelationModules(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public nHydrateModelHasRelationModules(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region nHydrateModel domain role code
		
		/// <summary>
		/// nHydrateModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid nHydrateModelDomainRoleId = new global::System.Guid(0xb398c97f, 0x1a9d, 0x40a2, 0xb4, 0x28, 0x94, 0x46, 0x78, 0xec, 0x75, 0xeb);
		
		/// <summary>
		/// DomainRole nHydrateModel
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.nHydrateModelHasRelationModules/nHydrateModel.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.nHydrateModelHasRelationModules/nHydrateModel.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "RelationModules", PropertyDisplayNameKey="nHydrate2.Dsl.nHydrateModelHasRelationModules/nHydrateModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("b398c97f-1a9d-40a2-b428-944678ec75eb")]
		public virtual nHydrateModel nHydrateModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (nHydrateModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, nHydrateModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, nHydrateModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access nHydrateModel of a RelationModule
		/// <summary>
		/// Gets nHydrateModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static nHydrateModel GetnHydrateModel(RelationModule element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, RelationModuleDomainRoleId) as nHydrateModel;
		}
		
		/// <summary>
		/// Sets nHydrateModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetnHydrateModel(RelationModule element, nHydrateModel newnHydrateModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, RelationModuleDomainRoleId, newnHydrateModel);
		}
		#endregion
		#region RelationModule domain role code
		
		/// <summary>
		/// RelationModule domain role Id.
		/// </summary>
		public static readonly global::System.Guid RelationModuleDomainRoleId = new global::System.Guid(0x5b5fe496, 0x4fcb, 0x47b7, 0xa6, 0xf8, 0x9c, 0x06, 0x96, 0x1b, 0x10, 0x3c);
		
		/// <summary>
		/// DomainRole RelationModule
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.nHydrateModelHasRelationModules/RelationModule.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.nHydrateModelHasRelationModules/RelationModule.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "nHydrateModel", PropertyDisplayNameKey="nHydrate2.Dsl.nHydrateModelHasRelationModules/RelationModule.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("5b5fe496-4fcb-47b7-a6f8-9c06961b103c")]
		public virtual RelationModule RelationModule
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (RelationModule)DslModeling::DomainRoleInfo.GetRolePlayer(this, RelationModuleDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, RelationModuleDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access RelationModules of a nHydrateModel
		/// <summary>
		/// Gets a list of RelationModules.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<RelationModule> GetRelationModules(nHydrateModel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<RelationModule>, RelationModule>(element, nHydrateModelDomainRoleId);
		}
		#endregion
		#region nHydrateModel link accessor
		/// <summary>
		/// Get the list of nHydrateModelHasRelationModules links to a nHydrateModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::nHydrate2.Dsl.nHydrateModelHasRelationModules> GetLinksToRelationModules ( global::nHydrate2.Dsl.nHydrateModel nHydrateModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate2.Dsl.nHydrateModelHasRelationModules>(nHydrateModelInstance, global::nHydrate2.Dsl.nHydrateModelHasRelationModules.nHydrateModelDomainRoleId);
		}
		#endregion
		#region RelationModule link accessor
		/// <summary>
		/// Get the nHydrateModelHasRelationModules link to a RelationModule.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::nHydrate2.Dsl.nHydrateModelHasRelationModules GetLinkTonHydrateModel (global::nHydrate2.Dsl.RelationModule relationModuleInstance)
		{
			global::System.Collections.Generic.IList<global::nHydrate2.Dsl.nHydrateModelHasRelationModules> links = DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate2.Dsl.nHydrateModelHasRelationModules>(relationModuleInstance, global::nHydrate2.Dsl.nHydrateModelHasRelationModules.RelationModuleDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of RelationModule not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region nHydrateModelHasRelationModules instance accessors
		
		/// <summary>
		/// Get any nHydrateModelHasRelationModules links between a given nHydrateModel and a RelationModule.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::nHydrate2.Dsl.nHydrateModelHasRelationModules> GetLinks( global::nHydrate2.Dsl.nHydrateModel source, global::nHydrate2.Dsl.RelationModule target )
		{
			global::System.Collections.Generic.List<global::nHydrate2.Dsl.nHydrateModelHasRelationModules> outLinks = new global::System.Collections.Generic.List<global::nHydrate2.Dsl.nHydrateModelHasRelationModules>();
			global::System.Collections.Generic.IList<global::nHydrate2.Dsl.nHydrateModelHasRelationModules> links = DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate2.Dsl.nHydrateModelHasRelationModules>(source, global::nHydrate2.Dsl.nHydrateModelHasRelationModules.nHydrateModelDomainRoleId);
			foreach ( global::nHydrate2.Dsl.nHydrateModelHasRelationModules link in links )
			{
				if ( target.Equals(link.RelationModule) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one nHydrateModelHasRelationModules link between a given nHydrateModeland a RelationModule.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::nHydrate2.Dsl.nHydrateModelHasRelationModules GetLink( global::nHydrate2.Dsl.nHydrateModel source, global::nHydrate2.Dsl.RelationModule target )
		{
			global::System.Collections.Generic.IList<global::nHydrate2.Dsl.nHydrateModelHasRelationModules> links = DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate2.Dsl.nHydrateModelHasRelationModules>(source, global::nHydrate2.Dsl.nHydrateModelHasRelationModules.nHydrateModelDomainRoleId);
			foreach ( global::nHydrate2.Dsl.nHydrateModelHasRelationModules link in links )
			{
				if ( target.Equals(link.RelationModule) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace nHydrate2.Dsl
{
	/// <summary>
	/// DomainRelationship ModuleHasModuleRules
	/// </summary>
	[DslDesign::DisplayNameResource("nHydrate2.Dsl.ModuleHasModuleRules.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("nHydrate2.Dsl.ModuleHasModuleRules.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::nHydrate2.Dsl.nHydrate2DomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("63aea98f-70cb-494c-8c26-8d263ba80627")]
	public partial class ModuleHasModuleRules : DslModeling::ElementLink, System.ComponentModel.INotifyPropertyChanged
	{
		#region INotifyPropertyChanged
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs e)
		{
			if (this.PropertyChanged != null)
				this.PropertyChanged(this, e);
		}
		#endregion
	
		#region Constructors, domain class Id
		
		/// <summary>
		/// ModuleHasModuleRules domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x63aea98f, 0x70cb, 0x494c, 0x8c, 0x26, 0x8d, 0x26, 0x3b, 0xa8, 0x06, 0x27);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ModuleHasModuleRules link in the same Partition as the given Module
		/// </summary>
		/// <param name="source">Module to use as the source of the relationship.</param>
		/// <param name="target">ModuleRule to use as the target of the relationship.</param>
		public ModuleHasModuleRules(Module source, ModuleRule target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ModuleHasModuleRules.ModuleDomainRoleId, source), new DslModeling::RoleAssignment(ModuleHasModuleRules.ModuleRuleDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModuleHasModuleRules(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModuleHasModuleRules(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModuleHasModuleRules(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModuleHasModuleRules(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Module domain role code
		
		/// <summary>
		/// Module domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModuleDomainRoleId = new global::System.Guid(0xc7332f35, 0x4438, 0x4f33, 0x94, 0x5e, 0x6a, 0xf7, 0xf4, 0x33, 0x30, 0xcc);
		
		/// <summary>
		/// DomainRole Module
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.ModuleHasModuleRules/Module.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.ModuleHasModuleRules/Module.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ModuleRules", PropertyDisplayNameKey="nHydrate2.Dsl.ModuleHasModuleRules/Module.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("c7332f35-4438-4f33-945e-6af7f43330cc")]
		public virtual Module Module
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Module)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModuleDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModuleDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Module of a ModuleRule
		/// <summary>
		/// Gets Module.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Module GetModule(ModuleRule element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ModuleRuleDomainRoleId) as Module;
		}
		
		/// <summary>
		/// Sets Module.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModule(ModuleRule element, Module newModule)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ModuleRuleDomainRoleId, newModule);
		}
		#endregion
		#region ModuleRule domain role code
		
		/// <summary>
		/// ModuleRule domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModuleRuleDomainRoleId = new global::System.Guid(0x249cd8e2, 0x030c, 0x4c5a, 0xbc, 0xde, 0x4c, 0x05, 0x5b, 0x4d, 0x05, 0x2e);
		
		/// <summary>
		/// DomainRole ModuleRule
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.ModuleHasModuleRules/ModuleRule.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.ModuleHasModuleRules/ModuleRule.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Module", PropertyDisplayNameKey="nHydrate2.Dsl.ModuleHasModuleRules/ModuleRule.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("249cd8e2-030c-4c5a-bcde-4c055b4d052e")]
		public virtual ModuleRule ModuleRule
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModuleRule)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModuleRuleDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModuleRuleDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ModuleRules of a Module
		/// <summary>
		/// Gets a list of ModuleRules.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ModuleRule> GetModuleRules(Module element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ModuleRule>, ModuleRule>(element, ModuleDomainRoleId);
		}
		#endregion
		#region Module link accessor
		/// <summary>
		/// Get the list of ModuleHasModuleRules links to a Module.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::nHydrate2.Dsl.ModuleHasModuleRules> GetLinksToModuleRules ( global::nHydrate2.Dsl.Module moduleInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate2.Dsl.ModuleHasModuleRules>(moduleInstance, global::nHydrate2.Dsl.ModuleHasModuleRules.ModuleDomainRoleId);
		}
		#endregion
		#region ModuleRule link accessor
		/// <summary>
		/// Get the ModuleHasModuleRules link to a ModuleRule.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::nHydrate2.Dsl.ModuleHasModuleRules GetLinkToModule (global::nHydrate2.Dsl.ModuleRule moduleRuleInstance)
		{
			global::System.Collections.Generic.IList<global::nHydrate2.Dsl.ModuleHasModuleRules> links = DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate2.Dsl.ModuleHasModuleRules>(moduleRuleInstance, global::nHydrate2.Dsl.ModuleHasModuleRules.ModuleRuleDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ModuleRule not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ModuleHasModuleRules instance accessors
		
		/// <summary>
		/// Get any ModuleHasModuleRules links between a given Module and a ModuleRule.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::nHydrate2.Dsl.ModuleHasModuleRules> GetLinks( global::nHydrate2.Dsl.Module source, global::nHydrate2.Dsl.ModuleRule target )
		{
			global::System.Collections.Generic.List<global::nHydrate2.Dsl.ModuleHasModuleRules> outLinks = new global::System.Collections.Generic.List<global::nHydrate2.Dsl.ModuleHasModuleRules>();
			global::System.Collections.Generic.IList<global::nHydrate2.Dsl.ModuleHasModuleRules> links = DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate2.Dsl.ModuleHasModuleRules>(source, global::nHydrate2.Dsl.ModuleHasModuleRules.ModuleDomainRoleId);
			foreach ( global::nHydrate2.Dsl.ModuleHasModuleRules link in links )
			{
				if ( target.Equals(link.ModuleRule) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ModuleHasModuleRules link between a given Moduleand a ModuleRule.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::nHydrate2.Dsl.ModuleHasModuleRules GetLink( global::nHydrate2.Dsl.Module source, global::nHydrate2.Dsl.ModuleRule target )
		{
			global::System.Collections.Generic.IList<global::nHydrate2.Dsl.ModuleHasModuleRules> links = DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate2.Dsl.ModuleHasModuleRules>(source, global::nHydrate2.Dsl.ModuleHasModuleRules.ModuleDomainRoleId);
			foreach ( global::nHydrate2.Dsl.ModuleHasModuleRules link in links )
			{
				if ( target.Equals(link.ModuleRule) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace nHydrate2.Dsl
{
	/// <summary>
	/// DomainRelationship EntityHasIndexes
	/// </summary>
	[DslDesign::DisplayNameResource("nHydrate2.Dsl.EntityHasIndexes.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("nHydrate2.Dsl.EntityHasIndexes.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::nHydrate2.Dsl.nHydrate2DomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("1caea208-6608-47d1-a106-efb54a86e7c4")]
	public partial class EntityHasIndexes : DslModeling::ElementLink, System.ComponentModel.INotifyPropertyChanged
	{
		#region INotifyPropertyChanged
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs e)
		{
			if (this.PropertyChanged != null)
				this.PropertyChanged(this, e);
		}
		#endregion
	
		#region Constructors, domain class Id
		
		/// <summary>
		/// EntityHasIndexes domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x1caea208, 0x6608, 0x47d1, 0xa1, 0x06, 0xef, 0xb5, 0x4a, 0x86, 0xe7, 0xc4);
	
				
		/// <summary>
		/// Constructor
		/// Creates a EntityHasIndexes link in the same Partition as the given Entity
		/// </summary>
		/// <param name="source">Entity to use as the source of the relationship.</param>
		/// <param name="target">Index to use as the target of the relationship.</param>
		public EntityHasIndexes(Entity source, Index target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(EntityHasIndexes.EntityDomainRoleId, source), new DslModeling::RoleAssignment(EntityHasIndexes.IndexDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EntityHasIndexes(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EntityHasIndexes(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EntityHasIndexes(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EntityHasIndexes(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Entity domain role code
		
		/// <summary>
		/// Entity domain role Id.
		/// </summary>
		public static readonly global::System.Guid EntityDomainRoleId = new global::System.Guid(0x7c69ce01, 0xab6b, 0x4507, 0xbe, 0xdd, 0xfa, 0x78, 0x4b, 0x25, 0xa4, 0x93);
		
		/// <summary>
		/// DomainRole Entity
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.EntityHasIndexes/Entity.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.EntityHasIndexes/Entity.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Indexes", PropertyDisplayNameKey="nHydrate2.Dsl.EntityHasIndexes/Entity.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("7c69ce01-ab6b-4507-bedd-fa784b25a493")]
		public virtual Entity Entity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Entity)DslModeling::DomainRoleInfo.GetRolePlayer(this, EntityDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, EntityDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Entity of a Index
		/// <summary>
		/// Gets Entity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Entity GetEntity(Index element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, IndexDomainRoleId) as Entity;
		}
		
		/// <summary>
		/// Sets Entity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetEntity(Index element, Entity newEntity)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, IndexDomainRoleId, newEntity);
		}
		#endregion
		#region Index domain role code
		
		/// <summary>
		/// Index domain role Id.
		/// </summary>
		public static readonly global::System.Guid IndexDomainRoleId = new global::System.Guid(0xc33e52e0, 0x17e7, 0x44c7, 0x89, 0x8b, 0x75, 0x26, 0x39, 0x62, 0xed, 0xf6);
		
		/// <summary>
		/// DomainRole Index
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.EntityHasIndexes/Index.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.EntityHasIndexes/Index.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Entity", PropertyDisplayNameKey="nHydrate2.Dsl.EntityHasIndexes/Index.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("c33e52e0-17e7-44c7-898b-75263962edf6")]
		public virtual Index Index
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Index)DslModeling::DomainRoleInfo.GetRolePlayer(this, IndexDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, IndexDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Indexes of a Entity
		/// <summary>
		/// Gets a list of Indexes.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Index> GetIndexes(Entity element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Index>, Index>(element, EntityDomainRoleId);
		}
		#endregion
		#region Entity link accessor
		/// <summary>
		/// Get the list of EntityHasIndexes links to a Entity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::nHydrate2.Dsl.EntityHasIndexes> GetLinksToIndexes ( global::nHydrate2.Dsl.Entity entityInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate2.Dsl.EntityHasIndexes>(entityInstance, global::nHydrate2.Dsl.EntityHasIndexes.EntityDomainRoleId);
		}
		#endregion
		#region Index link accessor
		/// <summary>
		/// Get the EntityHasIndexes link to a Index.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::nHydrate2.Dsl.EntityHasIndexes GetLinkToEntity (global::nHydrate2.Dsl.Index indexInstance)
		{
			global::System.Collections.Generic.IList<global::nHydrate2.Dsl.EntityHasIndexes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate2.Dsl.EntityHasIndexes>(indexInstance, global::nHydrate2.Dsl.EntityHasIndexes.IndexDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Index not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region EntityHasIndexes instance accessors
		
		/// <summary>
		/// Get any EntityHasIndexes links between a given Entity and a Index.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::nHydrate2.Dsl.EntityHasIndexes> GetLinks( global::nHydrate2.Dsl.Entity source, global::nHydrate2.Dsl.Index target )
		{
			global::System.Collections.Generic.List<global::nHydrate2.Dsl.EntityHasIndexes> outLinks = new global::System.Collections.Generic.List<global::nHydrate2.Dsl.EntityHasIndexes>();
			global::System.Collections.Generic.IList<global::nHydrate2.Dsl.EntityHasIndexes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate2.Dsl.EntityHasIndexes>(source, global::nHydrate2.Dsl.EntityHasIndexes.EntityDomainRoleId);
			foreach ( global::nHydrate2.Dsl.EntityHasIndexes link in links )
			{
				if ( target.Equals(link.Index) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one EntityHasIndexes link between a given Entityand a Index.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::nHydrate2.Dsl.EntityHasIndexes GetLink( global::nHydrate2.Dsl.Entity source, global::nHydrate2.Dsl.Index target )
		{
			global::System.Collections.Generic.IList<global::nHydrate2.Dsl.EntityHasIndexes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate2.Dsl.EntityHasIndexes>(source, global::nHydrate2.Dsl.EntityHasIndexes.EntityDomainRoleId);
			foreach ( global::nHydrate2.Dsl.EntityHasIndexes link in links )
			{
				if ( target.Equals(link.Index) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace nHydrate2.Dsl
{
	/// <summary>
	/// DomainRelationship IndexHasIndexColumns
	/// Description for nHydrate2.Dsl.IndexHasIndexColumns
	/// </summary>
	[DslDesign::DisplayNameResource("nHydrate2.Dsl.IndexHasIndexColumns.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("nHydrate2.Dsl.IndexHasIndexColumns.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::nHydrate2.Dsl.nHydrate2DomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("f50821c9-7d23-4ae4-a1f0-1051f9ae551b")]
	public partial class IndexHasIndexColumns : DslModeling::ElementLink, System.ComponentModel.INotifyPropertyChanged
	{
		#region INotifyPropertyChanged
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs e)
		{
			if (this.PropertyChanged != null)
				this.PropertyChanged(this, e);
		}
		#endregion
	
		#region Constructors, domain class Id
		
		/// <summary>
		/// IndexHasIndexColumns domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xf50821c9, 0x7d23, 0x4ae4, 0xa1, 0xf0, 0x10, 0x51, 0xf9, 0xae, 0x55, 0x1b);
	
				
		/// <summary>
		/// Constructor
		/// Creates a IndexHasIndexColumns link in the same Partition as the given Index
		/// </summary>
		/// <param name="source">Index to use as the source of the relationship.</param>
		/// <param name="target">IndexColumn to use as the target of the relationship.</param>
		public IndexHasIndexColumns(Index source, IndexColumn target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(IndexHasIndexColumns.IndexDomainRoleId, source), new DslModeling::RoleAssignment(IndexHasIndexColumns.IndexColumnDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public IndexHasIndexColumns(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public IndexHasIndexColumns(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public IndexHasIndexColumns(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public IndexHasIndexColumns(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Index domain role code
		
		/// <summary>
		/// Index domain role Id.
		/// </summary>
		public static readonly global::System.Guid IndexDomainRoleId = new global::System.Guid(0x48eb9827, 0xed57, 0x4196, 0x81, 0x4f, 0xef, 0xe6, 0x04, 0x5b, 0xd2, 0x13);
		
		/// <summary>
		/// DomainRole Index
		/// Description for nHydrate2.Dsl.IndexHasIndexColumns.Index
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.IndexHasIndexColumns/Index.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.IndexHasIndexColumns/Index.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "IndexColumns", PropertyDisplayNameKey="nHydrate2.Dsl.IndexHasIndexColumns/Index.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("48eb9827-ed57-4196-814f-efe6045bd213")]
		public virtual Index Index
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Index)DslModeling::DomainRoleInfo.GetRolePlayer(this, IndexDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, IndexDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Index of a IndexColumn
		/// <summary>
		/// Gets Index.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Index GetIndex(IndexColumn element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, IndexColumnDomainRoleId) as Index;
		}
		
		/// <summary>
		/// Sets Index.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetIndex(IndexColumn element, Index newIndex)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, IndexColumnDomainRoleId, newIndex);
		}
		#endregion
		#region IndexColumn domain role code
		
		/// <summary>
		/// IndexColumn domain role Id.
		/// </summary>
		public static readonly global::System.Guid IndexColumnDomainRoleId = new global::System.Guid(0x2312ab11, 0x6be2, 0x4b81, 0x8c, 0x39, 0x7e, 0x78, 0x8e, 0xe1, 0xfd, 0xcb);
		
		/// <summary>
		/// DomainRole IndexColumn
		/// Description for nHydrate2.Dsl.IndexHasIndexColumns.IndexColumn
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.IndexHasIndexColumns/IndexColumn.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.IndexHasIndexColumns/IndexColumn.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Index", PropertyDisplayNameKey="nHydrate2.Dsl.IndexHasIndexColumns/IndexColumn.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("2312ab11-6be2-4b81-8c39-7e788ee1fdcb")]
		public virtual IndexColumn IndexColumn
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (IndexColumn)DslModeling::DomainRoleInfo.GetRolePlayer(this, IndexColumnDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, IndexColumnDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access IndexColumns of a Index
		/// <summary>
		/// Gets a list of IndexColumns.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<IndexColumn> GetIndexColumns(Index element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<IndexColumn>, IndexColumn>(element, IndexDomainRoleId);
		}
		#endregion
		#region Index link accessor
		/// <summary>
		/// Get the list of IndexHasIndexColumns links to a Index.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::nHydrate2.Dsl.IndexHasIndexColumns> GetLinksToIndexColumns ( global::nHydrate2.Dsl.Index indexInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate2.Dsl.IndexHasIndexColumns>(indexInstance, global::nHydrate2.Dsl.IndexHasIndexColumns.IndexDomainRoleId);
		}
		#endregion
		#region IndexColumn link accessor
		/// <summary>
		/// Get the IndexHasIndexColumns link to a IndexColumn.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::nHydrate2.Dsl.IndexHasIndexColumns GetLinkToIndex (global::nHydrate2.Dsl.IndexColumn indexColumnInstance)
		{
			global::System.Collections.Generic.IList<global::nHydrate2.Dsl.IndexHasIndexColumns> links = DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate2.Dsl.IndexHasIndexColumns>(indexColumnInstance, global::nHydrate2.Dsl.IndexHasIndexColumns.IndexColumnDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of IndexColumn not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region IndexHasIndexColumns instance accessors
		
		/// <summary>
		/// Get any IndexHasIndexColumns links between a given Index and a IndexColumn.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::nHydrate2.Dsl.IndexHasIndexColumns> GetLinks( global::nHydrate2.Dsl.Index source, global::nHydrate2.Dsl.IndexColumn target )
		{
			global::System.Collections.Generic.List<global::nHydrate2.Dsl.IndexHasIndexColumns> outLinks = new global::System.Collections.Generic.List<global::nHydrate2.Dsl.IndexHasIndexColumns>();
			global::System.Collections.Generic.IList<global::nHydrate2.Dsl.IndexHasIndexColumns> links = DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate2.Dsl.IndexHasIndexColumns>(source, global::nHydrate2.Dsl.IndexHasIndexColumns.IndexDomainRoleId);
			foreach ( global::nHydrate2.Dsl.IndexHasIndexColumns link in links )
			{
				if ( target.Equals(link.IndexColumn) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one IndexHasIndexColumns link between a given Indexand a IndexColumn.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::nHydrate2.Dsl.IndexHasIndexColumns GetLink( global::nHydrate2.Dsl.Index source, global::nHydrate2.Dsl.IndexColumn target )
		{
			global::System.Collections.Generic.IList<global::nHydrate2.Dsl.IndexHasIndexColumns> links = DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate2.Dsl.IndexHasIndexColumns>(source, global::nHydrate2.Dsl.IndexHasIndexColumns.IndexDomainRoleId);
			foreach ( global::nHydrate2.Dsl.IndexHasIndexColumns link in links )
			{
				if ( target.Equals(link.IndexColumn) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace nHydrate2.Dsl
{
	/// <summary>
	/// DomainRelationship nHydrateModelHasModelMetadata
	/// Description for nHydrate2.Dsl.nHydrateModelHasModelMetadata
	/// </summary>
	[DslDesign::DisplayNameResource("nHydrate2.Dsl.nHydrateModelHasModelMetadata.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("nHydrate2.Dsl.nHydrateModelHasModelMetadata.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::nHydrate2.Dsl.nHydrate2DomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("8b52efcf-2a19-449a-b104-9dd450281764")]
	public partial class nHydrateModelHasModelMetadata : DslModeling::ElementLink, System.ComponentModel.INotifyPropertyChanged
	{
		#region INotifyPropertyChanged
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs e)
		{
			if (this.PropertyChanged != null)
				this.PropertyChanged(this, e);
		}
		#endregion
	
		#region Constructors, domain class Id
		
		/// <summary>
		/// nHydrateModelHasModelMetadata domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x8b52efcf, 0x2a19, 0x449a, 0xb1, 0x04, 0x9d, 0xd4, 0x50, 0x28, 0x17, 0x64);
	
				
		/// <summary>
		/// Constructor
		/// Creates a nHydrateModelHasModelMetadata link in the same Partition as the given nHydrateModel
		/// </summary>
		/// <param name="source">nHydrateModel to use as the source of the relationship.</param>
		/// <param name="target">ModelMetadata to use as the target of the relationship.</param>
		public nHydrateModelHasModelMetadata(nHydrateModel source, ModelMetadata target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(nHydrateModelHasModelMetadata.nHydrateModelDomainRoleId, source), new DslModeling::RoleAssignment(nHydrateModelHasModelMetadata.ModelMetadataDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public nHydrateModelHasModelMetadata(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public nHydrateModelHasModelMetadata(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public nHydrateModelHasModelMetadata(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public nHydrateModelHasModelMetadata(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region nHydrateModel domain role code
		
		/// <summary>
		/// nHydrateModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid nHydrateModelDomainRoleId = new global::System.Guid(0xfe8660eb, 0xc0c9, 0x4bab, 0xad, 0x2a, 0x53, 0x5a, 0xfb, 0x8d, 0x2d, 0x9d);
		
		/// <summary>
		/// DomainRole nHydrateModel
		/// Description for nHydrate2.Dsl.nHydrateModelHasModelMetadata.nHydrateModel
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.nHydrateModelHasModelMetadata/nHydrateModel.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.nHydrateModelHasModelMetadata/nHydrateModel.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ModelMetadata", PropertyDisplayNameKey="nHydrate2.Dsl.nHydrateModelHasModelMetadata/nHydrateModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("fe8660eb-c0c9-4bab-ad2a-535afb8d2d9d")]
		public virtual nHydrateModel nHydrateModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (nHydrateModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, nHydrateModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, nHydrateModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access nHydrateModel of a ModelMetadata
		/// <summary>
		/// Gets nHydrateModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static nHydrateModel GetnHydrateModel(ModelMetadata element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ModelMetadataDomainRoleId) as nHydrateModel;
		}
		
		/// <summary>
		/// Sets nHydrateModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetnHydrateModel(ModelMetadata element, nHydrateModel newnHydrateModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ModelMetadataDomainRoleId, newnHydrateModel);
		}
		#endregion
		#region ModelMetadata domain role code
		
		/// <summary>
		/// ModelMetadata domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelMetadataDomainRoleId = new global::System.Guid(0xedcb86d4, 0x6b8a, 0x470f, 0x9e, 0xc0, 0x2a, 0x98, 0x01, 0x7c, 0x5c, 0x12);
		
		/// <summary>
		/// DomainRole ModelMetadata
		/// Description for nHydrate2.Dsl.nHydrateModelHasModelMetadata.ModelMetadata
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.nHydrateModelHasModelMetadata/ModelMetadata.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.nHydrateModelHasModelMetadata/ModelMetadata.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "nHydrateModel", PropertyDisplayNameKey="nHydrate2.Dsl.nHydrateModelHasModelMetadata/ModelMetadata.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("edcb86d4-6b8a-470f-9ec0-2a98017c5c12")]
		public virtual ModelMetadata ModelMetadata
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelMetadata)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelMetadataDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelMetadataDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ModelMetadata of a nHydrateModel
		/// <summary>
		/// Gets a list of ModelMetadata.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ModelMetadata> GetModelMetadata(nHydrateModel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ModelMetadata>, ModelMetadata>(element, nHydrateModelDomainRoleId);
		}
		#endregion
		#region nHydrateModel link accessor
		/// <summary>
		/// Get the list of nHydrateModelHasModelMetadata links to a nHydrateModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::nHydrate2.Dsl.nHydrateModelHasModelMetadata> GetLinksToModelMetadata ( global::nHydrate2.Dsl.nHydrateModel nHydrateModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate2.Dsl.nHydrateModelHasModelMetadata>(nHydrateModelInstance, global::nHydrate2.Dsl.nHydrateModelHasModelMetadata.nHydrateModelDomainRoleId);
		}
		#endregion
		#region ModelMetadata link accessor
		/// <summary>
		/// Get the nHydrateModelHasModelMetadata link to a ModelMetadata.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::nHydrate2.Dsl.nHydrateModelHasModelMetadata GetLinkTonHydrateModel (global::nHydrate2.Dsl.ModelMetadata modelMetadataInstance)
		{
			global::System.Collections.Generic.IList<global::nHydrate2.Dsl.nHydrateModelHasModelMetadata> links = DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate2.Dsl.nHydrateModelHasModelMetadata>(modelMetadataInstance, global::nHydrate2.Dsl.nHydrateModelHasModelMetadata.ModelMetadataDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ModelMetadata not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region nHydrateModelHasModelMetadata instance accessors
		
		/// <summary>
		/// Get any nHydrateModelHasModelMetadata links between a given nHydrateModel and a ModelMetadata.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::nHydrate2.Dsl.nHydrateModelHasModelMetadata> GetLinks( global::nHydrate2.Dsl.nHydrateModel source, global::nHydrate2.Dsl.ModelMetadata target )
		{
			global::System.Collections.Generic.List<global::nHydrate2.Dsl.nHydrateModelHasModelMetadata> outLinks = new global::System.Collections.Generic.List<global::nHydrate2.Dsl.nHydrateModelHasModelMetadata>();
			global::System.Collections.Generic.IList<global::nHydrate2.Dsl.nHydrateModelHasModelMetadata> links = DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate2.Dsl.nHydrateModelHasModelMetadata>(source, global::nHydrate2.Dsl.nHydrateModelHasModelMetadata.nHydrateModelDomainRoleId);
			foreach ( global::nHydrate2.Dsl.nHydrateModelHasModelMetadata link in links )
			{
				if ( target.Equals(link.ModelMetadata) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one nHydrateModelHasModelMetadata link between a given nHydrateModeland a ModelMetadata.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::nHydrate2.Dsl.nHydrateModelHasModelMetadata GetLink( global::nHydrate2.Dsl.nHydrateModel source, global::nHydrate2.Dsl.ModelMetadata target )
		{
			global::System.Collections.Generic.IList<global::nHydrate2.Dsl.nHydrateModelHasModelMetadata> links = DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate2.Dsl.nHydrateModelHasModelMetadata>(source, global::nHydrate2.Dsl.nHydrateModelHasModelMetadata.nHydrateModelDomainRoleId);
			foreach ( global::nHydrate2.Dsl.nHydrateModelHasModelMetadata link in links )
			{
				if ( target.Equals(link.ModelMetadata) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace nHydrate2.Dsl
{
	/// <summary>
	/// Double-derived base class for DomainRelationship EntityHasViews
	/// </summary>
	[DslDesign::DisplayNameResource("nHydrate2.Dsl.EntityHasViews.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("nHydrate2.Dsl.EntityHasViews.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::nHydrate2.Dsl.nHydrate2DomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(AllowsDuplicates = true)]
	[DslModeling::DomainObjectId("7ee38be2-ed4a-46a1-ae1a-3a61bd64e20f")]
	public abstract partial class EntityHasViewsBase : DslModeling::ElementLink, System.ComponentModel.INotifyPropertyChanged
	{
		#region INotifyPropertyChanged
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs e)
		{
			if (this.PropertyChanged != null)
				this.PropertyChanged(this, e);
		}
		#endregion
	
		#region Constructors, domain class Id
		
		/// <summary>
		/// EntityHasViews domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x7ee38be2, 0xed4a, 0x46a1, 0xae, 0x1a, 0x3a, 0x61, 0xbd, 0x64, 0xe2, 0x0f);
	
		// Constructors were not generated for this relationship because it had HasCustomConstructor
		// set to true. Please provide the constructors below in a partial class.
		///// <summary>
		///// Constructor.
		///// </summary>
		///// <param name="partition">The Partition instance containing this ElementLink</param>
		///// <param name="roleAssignments">A set of role assignments for roleplayer initialization</param>
		///// <param name="propertyAssignments">A set of attribute assignments for attribute initialization</param>
		//protected EntityHasViewsBase(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
		//	: base(partition, roleAssignments, propertyAssignments)
		//{
		//}
		#endregion
		#region ParentEntity domain role code
		
		/// <summary>
		/// ParentEntity domain role Id.
		/// </summary>
		public static readonly global::System.Guid ParentEntityDomainRoleId = new global::System.Guid(0x980aab21, 0xbcfb, 0x4594, 0xbc, 0xe6, 0xe8, 0x92, 0xe9, 0x10, 0x39, 0xa1);
		
		/// <summary>
		/// DomainRole ParentEntity
		/// Description for nHydrate2.Dsl.EntityHasViews.ParentEntity
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.EntityHasViews/ParentEntity.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.EntityHasViews/ParentEntity.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ChildViews", PropertyDisplayNameKey="nHydrate2.Dsl.EntityHasViews/ParentEntity.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("980aab21-bcfb-4594-bce6-e892e91039a1")]
		public virtual Entity ParentEntity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Entity)DslModeling::DomainRoleInfo.GetRolePlayer(this, ParentEntityDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ParentEntityDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ParentEntity of a View
		/// <summary>
		/// Gets a list of ParentEntity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Entity> GetParentEntity(View element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Entity>, Entity>(element, ChildViewDomainRoleId);
		}
		#endregion
		#region ChildView domain role code
		
		/// <summary>
		/// ChildView domain role Id.
		/// </summary>
		public static readonly global::System.Guid ChildViewDomainRoleId = new global::System.Guid(0x19b19e10, 0xa398, 0x468d, 0xa5, 0x04, 0xaa, 0x47, 0xbd, 0x30, 0x28, 0x7b);
		
		/// <summary>
		/// DomainRole ChildView
		/// Description for nHydrate2.Dsl.EntityHasViews.ChildView
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.EntityHasViews/ChildView.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.EntityHasViews/ChildView.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ParentEntity", PropertyDisplayNameKey="nHydrate2.Dsl.EntityHasViews/ChildView.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("19b19e10-a398-468d-a504-aa47bd30287b")]
		public virtual View ChildView
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (View)DslModeling::DomainRoleInfo.GetRolePlayer(this, ChildViewDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ChildViewDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ChildViews of a Entity
		/// <summary>
		/// Gets a list of ChildViews.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<View> GetChildViews(Entity element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<View>, View>(element, ParentEntityDomainRoleId);
		}
		#endregion
		#region RoleName domain property code
		
		/// <summary>
		/// RoleName domain property Id.
		/// </summary>
		public static readonly global::System.Guid RoleNameDomainPropertyId = new global::System.Guid(0x89ec5e65, 0xdb89, 0x4578, 0x8d, 0xa3, 0x2b, 0x6b, 0x45, 0x3e, 0x72, 0xbb);
		
		/// <summary>
		/// Storage for RoleName
		/// </summary>
		private global::System.String roleNamePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of RoleName domain property.
		/// The named relation necessary when there is more than one relation between two
		/// entities
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.EntityHasViews/RoleName.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.EntityHasViews/RoleName.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.EntityHasViews/RoleName.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("89ec5e65-db89-4578-8da3-2b6b453e72bb")]
		public virtual global::System.String RoleName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return roleNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				RoleNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the EntityHasViews.RoleName domain property.
		/// </summary>
		internal sealed partial class RoleNamePropertyHandler : DslModeling::DomainPropertyValueHandler<EntityHasViewsBase, global::System.String>
		{
			private RoleNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the EntityHasViews.RoleName domain property value handler.
			/// </summary>
			public static readonly RoleNamePropertyHandler Instance = new RoleNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the EntityHasViews.RoleName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return RoleNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(EntityHasViewsBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.RoleName;
				//return element.GetValue<global::System.String>("RoleName", element.roleNamePropertyStorage);
				//return element.roleNamePropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(EntityHasViewsBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.roleNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("EntityHasViews"));
				}
			}
		}
		
		#endregion
		#region ImportData domain property code
		
		/// <summary>
		/// ImportData domain property Id.
		/// </summary>
		public static readonly global::System.Guid ImportDataDomainPropertyId = new global::System.Guid(0xcfababba, 0x9bc1, 0x4ccc, 0x93, 0xc6, 0x2e, 0xb7, 0xa4, 0x09, 0x85, 0x0d);
		
		/// <summary>
		/// Storage for ImportData
		/// </summary>
		private global::System.String importDataPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of ImportData domain property.
		/// Internal data to track imports
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.EntityHasViews/ImportData.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.EntityHasViews/ImportData.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("cfababba-9bc1-4ccc-93c6-2eb7a409850d")]
		public virtual global::System.String ImportData
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return importDataPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ImportDataPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the EntityHasViews.ImportData domain property.
		/// </summary>
		internal sealed partial class ImportDataPropertyHandler : DslModeling::DomainPropertyValueHandler<EntityHasViewsBase, global::System.String>
		{
			private ImportDataPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the EntityHasViews.ImportData domain property value handler.
			/// </summary>
			public static readonly ImportDataPropertyHandler Instance = new ImportDataPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the EntityHasViews.ImportData domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ImportDataDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(EntityHasViewsBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.ImportData;
				//return element.GetValue<global::System.String>("ImportData", element.importDataPropertyStorage);
				//return element.importDataPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(EntityHasViewsBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.importDataPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("EntityHasViews"));
				}
			}
		}
		
		#endregion
		#region Summary domain property code
		
		/// <summary>
		/// Summary domain property Id.
		/// </summary>
		public static readonly global::System.Guid SummaryDomainPropertyId = new global::System.Guid(0x7311f0de, 0x9fed, 0x4f35, 0xab, 0xfa, 0xb8, 0xb7, 0x9f, 0x2b, 0x9f, 0xf4);
		
		/// <summary>
		/// Storage for Summary
		/// </summary>
		private global::System.String summaryPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Summary domain property.
		/// Determines summary text were applicable
		/// </summary>
		[System.ComponentModel.Editor(typeof(System.ComponentModel.Design.MultilineStringEditor), typeof(System.Drawing.Design.UITypeEditor))]
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.EntityHasViews/Summary.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate2.Dsl.EntityHasViews/Summary.Category", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.EntityHasViews/Summary.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("7311f0de-9fed-4f35-abfa-b8b79f2b9ff4")]
		public virtual global::System.String Summary
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return summaryPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				SummaryPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the EntityHasViews.Summary domain property.
		/// </summary>
		internal sealed partial class SummaryPropertyHandler : DslModeling::DomainPropertyValueHandler<EntityHasViewsBase, global::System.String>
		{
			private SummaryPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the EntityHasViews.Summary domain property value handler.
			/// </summary>
			public static readonly SummaryPropertyHandler Instance = new SummaryPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the EntityHasViews.Summary domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return SummaryDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(EntityHasViewsBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.Summary;
				//return element.GetValue<global::System.String>("Summary", element.summaryPropertyStorage);
				//return element.summaryPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(EntityHasViewsBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.summaryPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("EntityHasViews"));
				}
			}
		}
		
		#endregion
		#region ParentEntity link accessor
		/// <summary>
		/// Get the list of EntityHasViews links to a Entity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::nHydrate2.Dsl.EntityHasViews> GetLinksToChildViews ( global::nHydrate2.Dsl.Entity parentEntityInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate2.Dsl.EntityHasViews>(parentEntityInstance, global::nHydrate2.Dsl.EntityHasViews.ParentEntityDomainRoleId);
		}
		#endregion
		#region ChildView link accessor
		/// <summary>
		/// Get the list of EntityHasViews links to a View.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::nHydrate2.Dsl.EntityHasViews> GetLinksToParentEntity ( global::nHydrate2.Dsl.View childViewInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate2.Dsl.EntityHasViews>(childViewInstance, global::nHydrate2.Dsl.EntityHasViews.ChildViewDomainRoleId);
		}
		#endregion
		#region EntityHasViews instance accessors
		
		/// <summary>
		/// Get any EntityHasViews links between a given Entity and a View.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::nHydrate2.Dsl.EntityHasViews> GetLinks( global::nHydrate2.Dsl.Entity source, global::nHydrate2.Dsl.View target )
		{
			global::System.Collections.Generic.List<global::nHydrate2.Dsl.EntityHasViews> outLinks = new global::System.Collections.Generic.List<global::nHydrate2.Dsl.EntityHasViews>();
			global::System.Collections.Generic.IList<global::nHydrate2.Dsl.EntityHasViews> links = DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate2.Dsl.EntityHasViews>(source, global::nHydrate2.Dsl.EntityHasViews.ParentEntityDomainRoleId);
			foreach ( global::nHydrate2.Dsl.EntityHasViews link in links )
			{
				if ( target.Equals(link.ChildView) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		#endregion
	}
	/// <summary>
	/// DomainRelationship EntityHasViews
	/// Association relationship between an entity and a view
	/// </summary>
	[global::System.CLSCompliant(true)]
	public partial class EntityHasViews : EntityHasViewsBase
	{
		#region Constructors
		// Constructors were not generated for this relationship because it had HasCustomConstructor
		// set to true. Please provide the constructors below in a partial class.
		//		
		///// <summary>
		///// Constructor
		///// Creates a EntityHasViews link in the same Partition as the given Entity
		///// </summary>
		///// <param name="source">Entity to use as the source of the relationship.</param>
		///// <param name="target">View to use as the target of the relationship.</param>
		//public EntityHasViews(Entity source, View target)
		//	: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(EntityHasViews.ParentEntityDomainRoleId, source), new DslModeling::RoleAssignment(EntityHasViews.ChildViewDomainRoleId, target)}, null)
		//{
		//}
		//
		///// <summary>
		///// Constructor
		///// </summary>
		///// <param name="store">Store where new link is to be created.</param>
		///// <param name="roleAssignments">List of relationship role assignments.</param>
		//public EntityHasViews(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
		//	: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		//{
		//}
		//
		///// <summary>
		///// Constructor
		///// </summary>
		///// <param name="store">Store where new link is to be created.</param>
		///// <param name="roleAssignments">List of relationship role assignments.</param>
		///// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		//public EntityHasViews(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
		//	: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		//{
		//}
		//
		///// <summary>
		///// Constructor
		///// </summary>
		///// <param name="partition">Partition where new link is to be created.</param>
		///// <param name="roleAssignments">List of relationship role assignments.</param>
		//public EntityHasViews(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
		//	: base(partition, roleAssignments, null)
		//{
		//}
		//
		///// <summary>
		///// Constructor
		///// </summary>
		///// <param name="partition">Partition where new link is to be created.</param>
		///// <param name="roleAssignments">List of relationship role assignments.</param>
		///// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		//public EntityHasViews(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
		//	: base(partition, roleAssignments, propertyAssignments)
		//{
		//}
		#endregion
	}
}
namespace nHydrate2.Dsl
{
	/// <summary>
	/// DomainRelationship nHydrateModelHasIndexModules
	/// Description for nHydrate2.Dsl.nHydrateModelHasIndexModules
	/// </summary>
	[DslDesign::DisplayNameResource("nHydrate2.Dsl.nHydrateModelHasIndexModules.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("nHydrate2.Dsl.nHydrateModelHasIndexModules.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::nHydrate2.Dsl.nHydrate2DomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("4ce7e656-14e7-421e-9368-3091700c1eda")]
	public partial class nHydrateModelHasIndexModules : DslModeling::ElementLink, System.ComponentModel.INotifyPropertyChanged
	{
		#region INotifyPropertyChanged
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs e)
		{
			if (this.PropertyChanged != null)
				this.PropertyChanged(this, e);
		}
		#endregion
	
		#region Constructors, domain class Id
		
		/// <summary>
		/// nHydrateModelHasIndexModules domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x4ce7e656, 0x14e7, 0x421e, 0x93, 0x68, 0x30, 0x91, 0x70, 0x0c, 0x1e, 0xda);
	
				
		/// <summary>
		/// Constructor
		/// Creates a nHydrateModelHasIndexModules link in the same Partition as the given nHydrateModel
		/// </summary>
		/// <param name="source">nHydrateModel to use as the source of the relationship.</param>
		/// <param name="target">IndexModule to use as the target of the relationship.</param>
		public nHydrateModelHasIndexModules(nHydrateModel source, IndexModule target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(nHydrateModelHasIndexModules.nHydrateModelDomainRoleId, source), new DslModeling::RoleAssignment(nHydrateModelHasIndexModules.IndexModuleDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public nHydrateModelHasIndexModules(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public nHydrateModelHasIndexModules(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public nHydrateModelHasIndexModules(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public nHydrateModelHasIndexModules(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region nHydrateModel domain role code
		
		/// <summary>
		/// nHydrateModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid nHydrateModelDomainRoleId = new global::System.Guid(0x3b7768ac, 0x9f51, 0x4b4e, 0xaf, 0x67, 0x3c, 0x2d, 0x59, 0xf1, 0x79, 0xa1);
		
		/// <summary>
		/// DomainRole nHydrateModel
		/// Description for nHydrate2.Dsl.nHydrateModelHasIndexModules.nHydrateModel
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.nHydrateModelHasIndexModules/nHydrateModel.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.nHydrateModelHasIndexModules/nHydrateModel.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "IndexModules", PropertyDisplayNameKey="nHydrate2.Dsl.nHydrateModelHasIndexModules/nHydrateModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("3b7768ac-9f51-4b4e-af67-3c2d59f179a1")]
		public virtual nHydrateModel nHydrateModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (nHydrateModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, nHydrateModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, nHydrateModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access nHydrateModel of a IndexModule
		/// <summary>
		/// Gets nHydrateModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static nHydrateModel GetnHydrateModel(IndexModule element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, IndexModuleDomainRoleId) as nHydrateModel;
		}
		
		/// <summary>
		/// Sets nHydrateModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetnHydrateModel(IndexModule element, nHydrateModel newnHydrateModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, IndexModuleDomainRoleId, newnHydrateModel);
		}
		#endregion
		#region IndexModule domain role code
		
		/// <summary>
		/// IndexModule domain role Id.
		/// </summary>
		public static readonly global::System.Guid IndexModuleDomainRoleId = new global::System.Guid(0x94543612, 0x9ccf, 0x4034, 0xb5, 0x9e, 0x74, 0x6d, 0x39, 0xd2, 0xd1, 0x9e);
		
		/// <summary>
		/// DomainRole IndexModule
		/// Description for nHydrate2.Dsl.nHydrateModelHasIndexModules.IndexModule
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate2.Dsl.nHydrateModelHasIndexModules/IndexModule.DisplayName", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate2.Dsl.nHydrateModelHasIndexModules/IndexModule.Description", typeof(global::nHydrate2.Dsl.nHydrate2DomainModel), "nHydrate2.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "nHydrateModel", PropertyDisplayNameKey="nHydrate2.Dsl.nHydrateModelHasIndexModules/IndexModule.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("94543612-9ccf-4034-b59e-746d39d2d19e")]
		public virtual IndexModule IndexModule
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (IndexModule)DslModeling::DomainRoleInfo.GetRolePlayer(this, IndexModuleDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, IndexModuleDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access IndexModules of a nHydrateModel
		/// <summary>
		/// Gets a list of IndexModules.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<IndexModule> GetIndexModules(nHydrateModel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<IndexModule>, IndexModule>(element, nHydrateModelDomainRoleId);
		}
		#endregion
		#region nHydrateModel link accessor
		/// <summary>
		/// Get the list of nHydrateModelHasIndexModules links to a nHydrateModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::nHydrate2.Dsl.nHydrateModelHasIndexModules> GetLinksToIndexModules ( global::nHydrate2.Dsl.nHydrateModel nHydrateModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate2.Dsl.nHydrateModelHasIndexModules>(nHydrateModelInstance, global::nHydrate2.Dsl.nHydrateModelHasIndexModules.nHydrateModelDomainRoleId);
		}
		#endregion
		#region IndexModule link accessor
		/// <summary>
		/// Get the nHydrateModelHasIndexModules link to a IndexModule.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::nHydrate2.Dsl.nHydrateModelHasIndexModules GetLinkTonHydrateModel (global::nHydrate2.Dsl.IndexModule indexModuleInstance)
		{
			global::System.Collections.Generic.IList<global::nHydrate2.Dsl.nHydrateModelHasIndexModules> links = DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate2.Dsl.nHydrateModelHasIndexModules>(indexModuleInstance, global::nHydrate2.Dsl.nHydrateModelHasIndexModules.IndexModuleDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of IndexModule not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region nHydrateModelHasIndexModules instance accessors
		
		/// <summary>
		/// Get any nHydrateModelHasIndexModules links between a given nHydrateModel and a IndexModule.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::nHydrate2.Dsl.nHydrateModelHasIndexModules> GetLinks( global::nHydrate2.Dsl.nHydrateModel source, global::nHydrate2.Dsl.IndexModule target )
		{
			global::System.Collections.Generic.List<global::nHydrate2.Dsl.nHydrateModelHasIndexModules> outLinks = new global::System.Collections.Generic.List<global::nHydrate2.Dsl.nHydrateModelHasIndexModules>();
			global::System.Collections.Generic.IList<global::nHydrate2.Dsl.nHydrateModelHasIndexModules> links = DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate2.Dsl.nHydrateModelHasIndexModules>(source, global::nHydrate2.Dsl.nHydrateModelHasIndexModules.nHydrateModelDomainRoleId);
			foreach ( global::nHydrate2.Dsl.nHydrateModelHasIndexModules link in links )
			{
				if ( target.Equals(link.IndexModule) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one nHydrateModelHasIndexModules link between a given nHydrateModeland a IndexModule.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::nHydrate2.Dsl.nHydrateModelHasIndexModules GetLink( global::nHydrate2.Dsl.nHydrateModel source, global::nHydrate2.Dsl.IndexModule target )
		{
			global::System.Collections.Generic.IList<global::nHydrate2.Dsl.nHydrateModelHasIndexModules> links = DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate2.Dsl.nHydrateModelHasIndexModules>(source, global::nHydrate2.Dsl.nHydrateModelHasIndexModules.nHydrateModelDomainRoleId);
			foreach ( global::nHydrate2.Dsl.nHydrateModelHasIndexModules link in links )
			{
				if ( target.Equals(link.IndexModule) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
